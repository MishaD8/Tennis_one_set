import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import requests
from typing import Dict, List, Tuple
import warnings
warnings.filterwarnings('ignore')

class TennisBettingSystem:
    def __init__(self, model_predictor):
        self.predictor = model_predictor
        self.min_confidence = 0.65  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —Å—Ç–∞–≤–∫–∏
        self.min_odds = 1.5  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        self.max_odds = 10.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        
    def calculate_kelly_criterion(self, probability: float, odds: float) -> float:
        """
        –†–∞—Å—á–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—é –ö–µ–ª–ª–∏
        """
        if probability <= 0 or odds <= 1:
            return 0
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –±—É–∫–º–µ–∫–µ—Ä–∞
        bookmaker_prob = 1 / odds
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–π –ö–µ–ª–ª–∏: f = (bp - q) / b
        # –≥–¥–µ b = odds - 1, p = –Ω–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å, q = 1 - p
        b = odds - 1
        p = probability
        q = 1 - p
        
        kelly_fraction = (b * p - q) / b
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç–∞–≤–∫–∏ (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥)
        return max(0, min(kelly_fraction * 0.25, 0.05))  # –ú–∞–∫—Å–∏–º—É–º 5% –±–∞–Ω–∫–∞
    
    def find_value_bets(self, matches_data: pd.DataFrame, odds_data: pd.DataFrame) -> pd.DataFrame:
        """
        –ü–æ–∏—Å–∫ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
        """
        value_bets = []
        
        for idx, match in matches_data.iterrows():
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
                match_features = self.predictor.prepare_features(pd.DataFrame([match]))
                probability = self.predictor.predict_probability(match_features)[0][0]
                
                # –ù–∞—Ö–æ–¥–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–≥–æ –º–∞—Ç—á–∞
                match_odds = odds_data[odds_data['match_id'] == match['match_id']]
                
                if match_odds.empty:
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ "–∏–≥—Ä–æ–∫ –≤–æ–∑—å–º–µ—Ç —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"
                for _, odds_row in match_odds.iterrows():
                    bookmaker = odds_row['bookmaker']
                    odds_value = odds_row['player_wins_set_odds']
                    
                    if self.min_odds <= odds_value <= self.max_odds:
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å
                        implied_prob = 1 / odds_value
                        expected_value = (probability * (odds_value - 1)) - (1 - probability)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—å
                        if (probability > implied_prob and 
                            probability >= self.min_confidence and 
                            expected_value > 0):
                            
                            kelly_size = self.calculate_kelly_criterion(probability, odds_value)
                            
                            if kelly_size > 0:
                                value_bets.append({
                                    'match_id': match['match_id'],
                                    'player_name': match['player_name'],
                                    'opponent_name': match['opponent_name'],
                                    'tournament': match['tournament'],
                                    'surface': match['surface'],
                                    'match_date': match['match_date'],
                                    'bookmaker': bookmaker,
                                    'odds': odds_value,
                                    'our_probability': probability,
                                    'implied_probability': implied_prob,
                                    'expected_value': expected_value,
                                    'kelly_fraction': kelly_size,
                                    'confidence_level': self._get_confidence_level(probability),
                                    'value_rating': expected_value / implied_prob  # –†–µ–π—Ç–∏–Ω–≥ —Ü–µ–Ω–Ω–æ—Å—Ç–∏
                                })
                                
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –º–∞—Ç—á–∞ {match.get('match_id', 'unknown')}: {e}")
                continue
        
        if value_bets:
            df_bets = pd.DataFrame(value_bets)
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É —Ü–µ–Ω–Ω–æ—Å—Ç–∏
            df_bets = df_bets.sort_values('value_rating', ascending=False)
            return df_bets
        else:
            return pd.DataFrame()
    
    def _get_confidence_level(self, probability: float) -> str:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        """
        if probability >= 0.8:
            return "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è"
        elif probability >= 0.7:
            return "–í—ã—Å–æ–∫–∞—è"
        elif probability >= 0.6:
            return "–°—Ä–µ–¥–Ω—è—è"
        else:
            return "–ù–∏–∑–∫–∞—è"
    
    def generate_betting_report(self, value_bets: pd.DataFrame) -> str:
        """
        –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å—Ç–∞–≤–∫–∞–º
        """
        if value_bets.empty:
            return "–¶–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        
        report = f"""
üéæ –û–¢–ß–ï–¢ –ü–û –¢–ï–ù–ù–ò–°–ù–´–ú –°–¢–ê–í–ö–ê–ú
{'='*50}

üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫: {len(value_bets)}
‚Ä¢ –°—Ä–µ–¥–Ω—è—è –Ω–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {value_bets['our_probability'].mean():.1%}
‚Ä¢ –°—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {value_bets['odds'].mean():.2f}
‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –æ–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {value_bets['expected_value'].mean():.3f}

üèÜ –¢–û–ü-5 –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ô:
"""
        
        for idx, bet in value_bets.head(5).iterrows():
            report += f"""
#{idx+1}. {bet['player_name']} vs {bet['opponent_name']}
   üìÖ {bet['match_date']} | üèüÔ∏è {bet['tournament']} ({bet['surface']})
   üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {bet['odds']:.2f} ({bet['bookmaker']})
   üéØ –ù–∞—à–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {bet['our_probability']:.1%}
   üìà –û–∂–∏–¥–∞–µ–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {bet['expected_value']:.3f}
   üíµ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –¥–æ–ª—è –±–∞–Ω–∫–∞: {bet['kelly_fraction']:.1%}
   ‚≠ê –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {bet['confidence_level']}
"""
        
        report += f"""
üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –±–∞–Ω–∫–æ–º
‚Ä¢ –ù–µ –ø—Ä–µ–≤—ã—à–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –º–æ–¥–µ–ª–∏
‚Ä¢ –£—á–∏—Ç—ã–≤–∞–π—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ª–∏–Ω–∏–π –ø–µ—Ä–µ–¥ –º–∞—Ç—á–µ–º

‚ö†Ô∏è –í–ê–ñ–ù–û: –≠—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–æ–¥–µ–ª–∏.
–°—Ç–∞–≤–∫–∏ –≤—Å–µ–≥–¥–∞ —Å–≤—è–∑–∞–Ω—ã —Å —Ä–∏—Å–∫–æ–º. –ò–≥—Ä–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ!
"""
        return report

def create_sample_matches_and_odds():
    """
    –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    """
    # –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –º–∞—Ç—á–µ–π
    matches = [
        {
            'match_id': 'M001',
            'player_name': '–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á',
            'opponent_name': '–†–∞—Ñ–∞—ç–ª—å –ù–∞–¥–∞–ª—å',
            'tournament': 'Roland Garros',
            'surface': '–ì—Ä—É–Ω—Ç',
            'match_date': '2025-06-20',
            'player_age': 38, 'player_rank': 1, 'player_points': 8350,
            'recent_matches_count': 12, 'wins_last_10': 8, 'losses_last_10': 2,
            'sets_won_ratio': 0.75, 'sets_lost_ratio': 0.25, 'tiebreak_win_ratio': 0.65,
            'sets_won_on_surface': 45, 'sets_lost_on_surface': 18,
            'first_serve_pct': 0.68, 'first_serve_won_pct': 0.73, 
            'second_serve_won_pct': 0.58, 'break_points_saved_pct': 0.67,
            'first_serve_return_won_pct': 0.32, 'second_serve_return_won_pct': 0.52,
            'break_points_converted_pct': 0.41,
            'opponent_age': 39, 'opponent_rank': 2, 'opponent_points': 7980,
            'opponent_recent_form': 0.8, 'h2h_wins': 30, 'h2h_losses': 29,
            'tournament_level': 4, 'surface_type': 1, 'match_round': 4,
            'best_of_sets': 5, 'is_home': 0
        },
        {
            'match_id': 'M002',
            'player_name': '–ö–∞—Ä–ª–æ—Å –ê–ª–∫–∞—Ä–∞—Å',
            'opponent_name': '–Ø–Ω–Ω–∏–∫ –°–∏–Ω–Ω–µ—Ä',
            'tournament': 'Wimbledon',
            'surface': '–¢—Ä–∞–≤–∞',
            'match_date': '2025-06-21',
            'player_age': 22, 'player_rank': 3, 'player_points': 7200,
            'recent_matches_count': 10, 'wins_last_10': 7, 'losses_last_10': 3,
            'sets_won_ratio': 0.72, 'sets_lost_ratio': 0.28, 'tiebreak_win_ratio': 0.58,
            'sets_won_on_surface': 25, 'sets_lost_on_surface': 12,
            'first_serve_pct': 0.65, 'first_serve_won_pct': 0.71, 
            'second_serve_won_pct': 0.55, 'break_points_saved_pct': 0.63,
            'first_serve_return_won_pct': 0.35, 'second_serve_return_won_pct': 0.48,
            'break_points_converted_pct': 0.38,
            'opponent_age': 23, 'opponent_rank': 4, 'opponent_points': 6800,
            'opponent_recent_form': 0.75, 'h2h_wins': 3, 'h2h_losses': 4,
            'tournament_level': 4, 'surface_type': 2, 'match_round': 3,
            'best_of_sets': 5, 'is_home': 0
        }
    ]
    
    # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –æ—Ç —Ä–∞–∑–Ω—ã—Ö –±—É–∫–º–µ–∫–µ—Ä–æ–≤
    odds = [
        {'match_id': 'M001', 'bookmaker': 'Bet365', 'player_wins_set_odds': 1.85},
        {'match_id': 'M001', 'bookmaker': 'William Hill', 'player_wins_set_odds': 1.90},
        {'match_id': 'M001', 'bookmaker': 'Pinnacle', 'player_wins_set_odds': 1.88},
        {'match_id': 'M002', 'bookmaker': 'Bet365', 'player_wins_set_odds': 1.75},
        {'match_id': 'M002', 'bookmaker': 'William Hill', 'player_wins_set_odds': 1.80},
        {'match_id': 'M002', 'bookmaker': 'Pinnacle', 'player_wins_set_odds': 1.78},
    ]
    
    return pd.DataFrame(matches), pd.DataFrame(odds)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def analyze_historical_performance(predictions: pd.DataFrame, actual_results: pd.DataFrame) -> Dict:
    """
    –ê–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–æ–¥–µ–ª–∏
    """
    merged = predictions.merge(actual_results, on='match_id')
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—Ä–æ–≤–Ω—è–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
    confidence_groups = {
        '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è': merged[merged['confidence_level'] == '–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è'],
        '–í—ã—Å–æ–∫–∞—è': merged[merged['confidence_level'] == '–í—ã—Å–æ–∫–∞—è'],
        '–°—Ä–µ–¥–Ω—è—è': merged[merged['confidence_level'] == '–°—Ä–µ–¥–Ω—è—è']
    }
    
    results = {}
    for level, group in confidence_groups.items():
        if len(group) > 0:
            accuracy = (group['predicted_outcome'] == group['actual_outcome']).mean()
            profit = group['profit'].sum()
            roi = profit / group['stake'].sum() if group['stake'].sum() > 0 else 0
            
            results[level] = {
                'matches': len(group),
                'accuracy': accuracy,
                'total_profit': profit,
                'roi': roi
            }
    
    return results

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
if __name__ == "__main__":
    print("üéæ –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Ç–µ–Ω–Ω–∏—Å")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    matches_df, odds_df = create_sample_matches_and_odds()
    
    print(f"üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º {len(matches_df)} –º–∞—Ç—á–µ–π —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –æ—Ç {len(odds_df)} –±—É–∫–º–µ–∫–µ—Ä–æ–≤")
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    # betting_system = TennisBettingSystem(trained_predictor)
    # value_bets = betting_system.find_value_bets(matches_df, odds_df)
    # report = betting_system.generate_betting_report(value_bets)
    # print(report)
    
    print("\nüí° –î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:")
    print("1. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("2. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä—Å–∏–Ω–≥ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    print("3. –°–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("4. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö")