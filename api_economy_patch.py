#!/usr/bin/env python3
"""
üí∞ API ECONOMY PATCH
–î–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É tennis backend –±–µ–∑ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è
–ü—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –º–æ–¥—É–ª—å –≤ –≤–∞—à backend!
"""

import json
import time
import os
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Any

logger = logging.getLogger(__name__)

class SimpleAPIEconomy:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏ API - –ª–µ–≥–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è"""
    
    def __init__(self, api_key: str, max_per_hour: int = 30, cache_minutes: int = 20):
        self.api_key = api_key
        self.max_per_hour = max_per_hour
        self.cache_minutes = cache_minutes
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.usage_file = "api_usage.json"
        self.cache_file = "api_cache.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –∫–µ—à–µ"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        try:
            if os.path.exists(self.usage_file):
                with open(self.usage_file, 'r') as f:
                    usage_data = json.load(f)
                    self.hourly_requests = usage_data.get('hourly_requests', [])
                    self.total_requests = usage_data.get('total_requests', 0)
            else:
                self.hourly_requests = []
                self.total_requests = 0
        except:
            self.hourly_requests = []
            self.total_requests = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    self.cache_data = json.load(f)
            else:
                self.cache_data = {}
        except:
            self.cache_data = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            usage_data = {
                'hourly_requests': self.hourly_requests,
                'total_requests': self.total_requests,
                'updated': datetime.now().isoformat()
            }
            with open(self.usage_file, 'w') as f:
                json.dump(usage_data, f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache_data, f, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def clean_old_requests(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        hour_ago = datetime.now() - timedelta(hours=1)
        self.hourly_requests = [
            req for req in self.hourly_requests 
            if datetime.fromisoformat(req) > hour_ago
        ]
    
    def can_make_request(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        self.clean_old_requests()
        
        if len(self.hourly_requests) >= self.max_per_hour:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.max_per_hour}/—á–∞—Å"
        
        return True, "OK"
    
    def get_from_cache(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
        if cache_key not in self.cache_data:
            return None
        
        cached_item = self.cache_data[cache_key]
        cached_time = datetime.fromisoformat(cached_item['timestamp'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à
        if datetime.now() - cached_time > timedelta(minutes=self.cache_minutes):
            del self.cache_data[cache_key]
            self.save_data()
            return None
        
        logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à: {cache_key}")
        return cached_item['data']
    
    def save_to_cache(self, cache_key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
        self.cache_data[cache_key] = {
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        self.save_data()
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: {cache_key}")
    
    def record_api_request(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å"""
        self.hourly_requests.append(datetime.now().isoformat())
        self.total_requests += 1
        self.save_data()
    
    def make_tennis_request(self, sport_key: str = 'tennis', force_fresh: bool = False) -> Dict:
        """
        –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –∑–∞–º–µ–Ω—è–µ—Ç –≤–∞—à–∏ –ø—Ä—è–º—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
        –ü—Ä–æ—Å—Ç–æ –∑–∞–º–µ–Ω–∏—Ç–µ requests.get –Ω–∞ —ç—Ç–æ—Ç –º–µ—Ç–æ–¥!
        """
        
        cache_key = f"tennis_{sport_key}"
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
        if not force_fresh:
            cached_data = self.get_from_cache(cache_key)
            if cached_data is not None:
                return {
                    'success': True,
                    'data': cached_data,
                    'source': 'cache',
                    'emoji': 'üìã',
                    'status': 'CACHED'
                }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        can_request, reason = self.can_make_request()
        if not can_request:
            logger.warning(f"üö¶ {reason}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if cache_key in self.cache_data:
                return {
                    'success': True,
                    'data': self.cache_data[cache_key]['data'],
                    'source': 'stale_cache',
                    'emoji': 'üíæ',
                    'status': 'SAVED',
                    'warning': reason
                }
            
            return {
                'success': False,
                'error': reason,
                'source': 'rate_limited'
            }
        
        # 3. –î–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å
        try:
            url = f"https://api.the-odds-api.com/v4/sports/{sport_key}/odds"
            params = {
                'apiKey': self.api_key,
                'regions': 'us,uk,eu',
                'markets': 'h2h',
                'oddsFormat': 'decimal',
                'dateFormat': 'iso'
            }
            
            logger.info(f"üì° API –∑–∞–ø—Ä–æ—Å: {sport_key}")
            response = requests.get(url, params=params, timeout=10)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
            self.record_api_request()
            
            if response.status_code == 200:
                data = response.json()
                
                # –ö–µ—à–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
                self.save_to_cache(cache_key, data)
                
                return {
                    'success': True,
                    'data': data,
                    'source': 'fresh_api',
                    'emoji': 'üî¥',
                    'status': 'LIVE API'
                }
                
            elif response.status_code == 401:
                return {'success': False, 'error': '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á'}
            elif response.status_code == 422:
                return {'success': False, 'error': '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}
            else:
                return {'success': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            logger.error(f"‚ùå API –æ—à–∏–±–∫–∞: {e}")
            
            # –ü—Ä–∏ –æ—à–∏–±–∫–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if cache_key in self.cache_data:
                return {
                    'success': True,
                    'data': self.cache_data[cache_key]['data'],
                    'source': 'error_fallback',
                    'emoji': 'üíæ',
                    'status': 'FALLBACK'
                }
            
            return {'success': False, 'error': str(e)}
    
    def get_usage_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.clean_old_requests()
        
        return {
            'requests_this_hour': len(self.hourly_requests),
            'max_per_hour': self.max_per_hour,
            'remaining_hour': self.max_per_hour - len(self.hourly_requests),
            'total_requests_ever': self.total_requests,
            'cache_items': len(self.cache_data),
            'cache_minutes': self.cache_minutes
        }

# –ì–õ–û–ë–ê–õ–¨–ù–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø - –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑
_api_economy = None

def init_api_economy(api_key: str, max_per_hour: int = 30, cache_minutes: int = 20):
    """
    –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –≤—ã–∑–æ–≤–∏—Ç–µ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ backend
    """
    global _api_economy
    _api_economy = SimpleAPIEconomy(api_key, max_per_hour, cache_minutes)
    logger.info(f"üí∞ API Economy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {max_per_hour}/—á–∞—Å, –∫–µ—à {cache_minutes}–º–∏–Ω")

def economical_tennis_request(sport_key: str = 'tennis', force_fresh: bool = False) -> Dict:
    """
    –ó–ê–ú–ï–ù–ê –î–õ–Ø –í–ê–®–ò–• API –ó–ê–ü–†–û–°–û–í
    
    –í–ú–ï–°–¢–û:
        response = requests.get("https://api.the-odds-api.com/v4/sports/tennis/odds", ...)
        
    –ò–°–ü–û–õ–¨–ó–£–ô–¢–ï:
        result = economical_tennis_request('tennis')
        if result['success']:
            matches = result['data']
    """
    if _api_economy is None:
        raise Exception("API Economy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω! –í—ã–∑–æ–≤–∏—Ç–µ init_api_economy() –ø–µ—Ä–≤—ã–º")
    
    return _api_economy.make_tennis_request(sport_key, force_fresh)

def get_api_usage() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    if _api_economy is None:
        return {'error': 'API Economy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
    
    return _api_economy.get_usage_stats()

def clear_api_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à API"""
    if _api_economy is not None:
        _api_economy.cache_data = {}
        _api_economy.save_data()
        logger.info("üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω")

# –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
def example_integration():
    """
    –ü–†–ò–ú–ï–†: –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π backend
    """
    
    # 1. –í –Ω–∞—á–∞–ª–µ –≤–∞—à–µ–≥–æ backend —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ:
    """
    from api_economy_patch import init_api_economy, economical_tennis_request, get_api_usage
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —ç–∫–æ–Ω–æ–º–∏—é API
    init_api_economy(
        api_key="your_api_key_here",
        max_per_hour=30,    # –≤–∞—à –ª–∏–º–∏—Ç
        cache_minutes=20    # –≤—Ä–µ–º—è –∫–µ—à–∞
    )
    """
    
    # 2. –í –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–º–µ–Ω–∏—Ç–µ:
    """
    # –°–¢–ê–†–´–ô –ö–û–î:
    def get_tennis_odds():
        response = requests.get("https://api.the-odds-api.com/v4/sports/tennis/odds", 
                               params={'apiKey': API_KEY, ...})
        if response.status_code == 200:
            return response.json()
        return None
    
    # –ù–û–í–´–ô –ö–û–î:
    def get_tennis_odds():
        result = economical_tennis_request('tennis')
        if result['success']:
            return result['data']
        return None
    """
    
    # 3. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ endpoints (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
    """
    @app.route('/api/usage')
    def api_usage():
        return jsonify(get_api_usage())
    """

if __name__ == "__main__":
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    print("üí∞ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API ECONOMY PATCH")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_api_economy("test_key", max_per_hour=5, cache_minutes=1)
    
    # –¢–µ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤
    print("1Ô∏è‚É£ –ü–µ—Ä–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    result1 = economical_tennis_request('tennis')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result1.get('source', 'error')}")
    
    print("2Ô∏è‚É£ –í—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∫–µ—à–∞):")
    result2 = economical_tennis_request('tennis')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result2.get('source', 'error')}")
    
    print("3Ô∏è‚É£ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    stats = get_api_usage()
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –∑–∞ —á–∞—Å: {stats['requests_this_hour']}")
    print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: {stats['cache_items']}")
    
    print("\n‚úÖ –ü–∞—Ç—á –≥–æ—Ç–æ–≤ –∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
    