#!/usr/bin/env python3
"""
üí∞ API ECONOMY PATCH - –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
"""

import json
import time
import os
import requests
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional, Any

logger = logging.getLogger(__name__)

# Global API Economy instance
_api_economy = None

class SimpleAPIEconomy:
    """–ü—Ä–æ—Å—Ç–∞—è —Å–∏—Å—Ç–µ–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏ API - –ª–µ–≥–∫–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è"""
    
    def __init__(self, api_key: str = None, max_per_hour: int = 30, cache_minutes: int = 20):
        # Load API key from config if not provided
        if not api_key:
            try:
                from config_loader import load_secure_config
                config = load_secure_config()
                api_key = (config.get('data_sources', {})
                          .get('the_odds_api', {})
                          .get('api_key'))
                if not api_key:
                    api_key = (config.get('betting_apis', {})
                              .get('the_odds_api', {})
                              .get('api_key'))
            except Exception as e:
                logger.warning(f"Could not load API key from config: {e}")
        
        # Secure API key handling - never store in plain text in logs
        self.api_key = api_key
        self._api_key_hash = None  # For verification without storing key
        if api_key:
            import hashlib
            self._api_key_hash = hashlib.sha256(api_key.encode()).hexdigest()[:8]
        
        self.max_per_hour = max_per_hour
        self.cache_minutes = cache_minutes
        
        # –§–∞–π–ª—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.usage_file = "api_usage.json"
        self.cache_file = "api_cache.json"
        
        # –ù–û–í–û–ï: –§–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.manual_update_file = "manual_update_trigger.json"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        self.load_data()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∏ –∫–µ—à–µ"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        try:
            if os.path.exists(self.usage_file):
                with open(self.usage_file, 'r') as f:
                    usage_data = json.load(f)
                    self.hourly_requests = usage_data.get('hourly_requests', [])
                    self.total_requests = usage_data.get('total_requests', 0)
            else:
                self.hourly_requests = []
                self.total_requests = 0
        except:
            self.hourly_requests = []
            self.total_requests = 0
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–µ—à
        try:
            if os.path.exists(self.cache_file):
                with open(self.cache_file, 'r', encoding='utf-8') as f:
                    self.cache_data = json.load(f)
            else:
                self.cache_data = {}
        except:
            self.cache_data = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ"""
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            usage_data = {
                'hourly_requests': self.hourly_requests,
                'total_requests': self.total_requests,
                'updated': datetime.now().isoformat()
            }
            with open(self.usage_file, 'w') as f:
                json.dump(usage_data, f)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à
            with open(self.cache_file, 'w', encoding='utf-8') as f:
                json.dump(self.cache_data, f, ensure_ascii=False)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    def clean_old_requests(self):
        """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        hour_ago = datetime.now() - timedelta(hours=1)
        self.hourly_requests = [
            req for req in self.hourly_requests 
            if datetime.fromisoformat(req) > hour_ago
        ]
    
    def can_make_request(self) -> tuple[bool, str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –º–æ–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å API –∑–∞–ø—Ä–æ—Å"""
        self.clean_old_requests()
        
        if len(self.hourly_requests) >= self.max_per_hour:
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç {self.max_per_hour}/—á–∞—Å"
        
        return True, "OK"
    
    def get_from_cache(self, cache_key: str) -> Optional[Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–µ—à–∞"""
        if cache_key not in self.cache_data:
            return None
        
        cached_item = self.cache_data[cache_key]
        cached_time = datetime.fromisoformat(cached_item['timestamp'])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ —É—Å—Ç–∞—Ä–µ–ª –ª–∏ –∫–µ—à
        if datetime.now() - cached_time > timedelta(minutes=self.cache_minutes):
            del self.cache_data[cache_key]
            self.save_data()
            return None
        
        logger.info(f"üìã –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à: {cache_key}")
        return cached_item['data']
    
    def save_to_cache(self, cache_key: str, data: Any):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–µ—à"""
        self.cache_data[cache_key] = {
            'data': data,
            'timestamp': datetime.now().isoformat()
        }
        self.save_data()
        logger.info(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –∫–µ—à: {cache_key}")
    
    def record_api_request(self):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–π API –∑–∞–ø—Ä–æ—Å"""
        self.hourly_requests.append(datetime.now().isoformat())
        self.total_requests += 1
        self.save_data()
    
    # –ù–û–í–û–ï: –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    def check_manual_update_trigger(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω—É–∂–Ω–æ –ª–∏ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        try:
            if os.path.exists(self.manual_update_file):
                with open(self.manual_update_file, 'r') as f:
                    trigger_data = json.load(f)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–ª–∞–≥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                if trigger_data.get('force_update', False):
                    return True
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                last_update = trigger_data.get('last_manual_update')
                if last_update:
                    last_time = datetime.fromisoformat(last_update)
                    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±—ã–ª–æ –±–æ–ª—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥
                    if (datetime.now() - last_time).seconds > 3600:
                        return True
            
            return False
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
            return False
    
    def create_manual_update_trigger(self):
        """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        trigger_data = {
            'force_update': True,
            'created_at': datetime.now().isoformat(),
            'message': '–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—à–µ–Ω–æ'
        }
        
        try:
            with open(self.manual_update_file, 'w') as f:
                json.dump(trigger_data, f, indent=2)
            
            logger.info("‚úÖ –°–æ–∑–¥–∞–Ω —Ç—Ä–∏–≥–≥–µ—Ä —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            print("‚úÖ –¢—Ä–∏–≥–≥–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω! –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ.")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
    
    def clear_manual_update_trigger(self):
        """–û—á–∏—â–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
        try:
            trigger_data = {
                'force_update': False,
                'last_manual_update': datetime.now().isoformat(),
                'message': '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'
            }
            
            with open(self.manual_update_file, 'w') as f:
                json.dump(trigger_data, f, indent=2)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç—Ä–∏–≥–≥–µ—Ä–∞: {e}")
    
    def make_tennis_request(self, sport_key: str = 'tennis_atp_canadian_open', force_fresh: bool = False) -> Dict:
        """
        –ú–û–î–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–ê–Ø: –∑–∞–º–µ–Ω—è–µ—Ç –≤–∞—à–∏ –ø—Ä—è–º—ã–µ API –∑–∞–ø—Ä–æ—Å—ã
        –¢–µ–ø–µ—Ä—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        """
        
        cache_key = f"tennis_{sport_key}"
        
        # –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∏–≥–≥–µ—Ä —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        manual_update_needed = self.check_manual_update_trigger()
        if manual_update_needed:
            logger.info("üîÑ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ç—Ä–∏–≥–≥–µ—Ä —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
            force_fresh = True
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à (–µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ)
        if not force_fresh:
            cached_data = self.get_from_cache(cache_key)
            if cached_data is not None:
                return {
                    'success': True,
                    'data': cached_data,
                    'source': 'cache',
                    'emoji': 'üìã',
                    'status': 'CACHED'
                }
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã
        can_request, reason = self.can_make_request()
        if not can_request and not manual_update_needed:
            logger.warning(f"üö¶ {reason}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–π –∫–µ—à –µ—Å–ª–∏ –µ—Å—Ç—å
            if cache_key in self.cache_data:
                return {
                    'success': True,
                    'data': self.cache_data[cache_key]['data'],
                    'source': 'stale_cache',
                    'emoji': 'üíæ',
                    'status': 'SAVED',
                    'warning': reason
                }
            
            return {
                'success': False,
                'error': reason,
                'source': 'rate_limited'
            }
        
        # 3. –î–µ–ª–∞–µ–º API –∑–∞–ø—Ä–æ—Å - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ sport keys
        sport_keys_to_try = [
            'tennis_atp_canadian_open',
            'tennis_wta_canadian_open'
        ]
        
        # Start with requested sport key if it's not in our list
        if sport_key not in sport_keys_to_try:
            sport_keys_to_try.insert(0, sport_key)
        
        for try_sport_key in sport_keys_to_try:
            try:
                url = f"https://api.the-odds-api.com/v4/sports/{try_sport_key}/odds"
                params = {
                    'apiKey': self.api_key,
                    'regions': 'us,uk,eu',
                    'markets': 'h2h',
                    'oddsFormat': 'decimal',
                    'dateFormat': 'iso'
                }
                
                # Secure logging - never log API keys
                masked_params = params.copy()
                if 'apiKey' in masked_params:
                    masked_params['apiKey'] = f"***{self._api_key_hash or 'MASKED'}***"
                
                logger.info(f"üì° API –∑–∞–ø—Ä–æ—Å: {try_sport_key} {'(–†–£–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï)' if manual_update_needed else ''}")
                logger.debug(f"Request params (API key masked): {masked_params}")
                
                response = requests.get(url, params=params, timeout=10)
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
                self.record_api_request()
                
                if response.status_code == 200:
                    data = response.json()
                    if data:  # If we actually got matches
                        # Process and return the data
                        tennis_data = self.convert_to_tennis_format(data, try_sport_key)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                        self.save_to_cache(cache_key, tennis_data)
                        
                        # –ù–û–í–û–ï: –û—á–∏—â–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                        if manual_update_needed:
                            self.clear_manual_update_trigger()
                        
                        return {
                            'success': True,
                            'data': tennis_data,
                            'source': 'fresh_api' if not manual_update_needed else 'manual_update',
                            'emoji': 'üî¥' if not manual_update_needed else 'üîÑ',
                            'status': 'LIVE_API' if not manual_update_needed else 'MANUAL_UPDATE',
                            'matches_count': len(tennis_data),
                            'sport_key_used': try_sport_key
                        }
                    else:
                        logger.info(f"No matches found for {try_sport_key}, trying next...")
                        continue
                        
                elif response.status_code == 404:
                    logger.info(f"Sport key {try_sport_key} not found (404), trying next...")
                    continue
                else:
                    logger.warning(f"API request failed with status {response.status_code} for {try_sport_key}")
                    continue
                    
            except Exception as e:
                logger.error(f"API request failed for {try_sport_key}: {e}")
                continue
        
        # If all sport keys failed
        logger.warning("All sport keys failed")
        # Return cached data if available
        if cache_key in self.cache_data:
            return {
                'success': True,
                'data': self.cache_data[cache_key]['data'],
                'source': 'error_fallback',
                'emoji': 'üíæ',
                'status': 'FALLBACK'
            }
        
        return {
            'success': False,
            'error': 'All API requests failed and no cached data available',
            'source': 'api_error'
        }
    
    def convert_to_tennis_format(self, api_data: list, sport_key: str) -> Dict:
        """Convert Odds API format to tennis system format"""
        converted_matches = {}
        
        for match in api_data:
            try:
                match_id = match.get('id', f"odds_{datetime.now().timestamp()}")
                player1 = match.get('home_team', 'Player 1')
                player2 = match.get('away_team', 'Player 2')
                
                # Find best odds
                best_p1_odds = None
                best_p2_odds = None
                best_p1_bookmaker = None
                best_p2_bookmaker = None
                
                for bookmaker in match.get('bookmakers', []):
                    bookmaker_name = bookmaker.get('title', bookmaker.get('key', 'Unknown'))
                    
                    for market in bookmaker.get('markets', []):
                        if market.get('key') == 'h2h':
                            for outcome in market.get('outcomes', []):
                                player_name = outcome.get('name')
                                odds = outcome.get('price', 0)
                                
                                if not odds:
                                    continue
                                
                                decimal_odds = float(odds)
                                
                                # Match to players and keep best odds
                                if player_name == player1:
                                    if best_p1_odds is None or decimal_odds > best_p1_odds:
                                        best_p1_odds = decimal_odds
                                        best_p1_bookmaker = bookmaker_name
                                elif player_name == player2:
                                    if best_p2_odds is None or decimal_odds > best_p2_odds:
                                        best_p2_odds = decimal_odds
                                        best_p2_bookmaker = bookmaker_name
                
                # Create tennis format result
                if best_p1_odds and best_p2_odds:
                    converted_matches[match_id] = {
                        'match_info': {
                            'player1': player1,
                            'player2': player2,
                            'tournament': match.get('sport_title', 'Tennis Tournament'),
                            'surface': 'Unknown',
                            'date': match.get('commence_time', datetime.now().isoformat())[:10],
                            'time': match.get('commence_time', datetime.now().isoformat())[11:16],
                            'source': 'api_economy_patch'
                        },
                        'best_markets': {
                            'winner': {
                                'player1': {
                                    'odds': round(best_p1_odds, 2),
                                    'bookmaker': best_p1_bookmaker
                                },
                                'player2': {
                                    'odds': round(best_p2_odds, 2),
                                    'bookmaker': best_p2_bookmaker
                                }
                            }
                        }
                    }
                    
            except Exception as e:
                logger.error(f"Error processing match {match.get('id', 'unknown')}: {e}")
                continue
        
        logger.info(f"üîÑ Converted {len(converted_matches)} matches from {sport_key}")
        return converted_matches
    
    def get_usage_stats(self) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        self.clean_old_requests()
        
        # –ù–û–í–û–ï: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä—É—á–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        manual_status = "–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
        if os.path.exists(self.manual_update_file):
            try:
                with open(self.manual_update_file, 'r') as f:
                    trigger_data = json.load(f)
                if trigger_data.get('force_update', False):
                    manual_status = "–∑–∞–ø—Ä–æ—à–µ–Ω–æ"
                else:
                    last_update = trigger_data.get('last_manual_update')
                    if last_update:
                        manual_status = f"–ø–æ—Å–ª–µ–¥–Ω–µ–µ: {last_update[:19]}"
            except:
                pass
        
        return {
            'requests_this_hour': len(self.hourly_requests),
            'max_per_hour': self.max_per_hour,
            'remaining_hour': self.max_per_hour - len(self.hourly_requests),
            'total_requests_ever': self.total_requests,
            'cache_items': len(self.cache_data),
            'cache_minutes': self.cache_minutes,
            'manual_update_status': manual_status
        }


def init_api_economy(api_key: str, max_per_hour: int = 30, cache_minutes: int = 20):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Economy"""
    global _api_economy
    _api_economy = SimpleAPIEconomy(api_key, max_per_hour, cache_minutes)
    logger.info(f"üí∞ API Economy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {max_per_hour}/—á–∞—Å, –∫–µ—à {cache_minutes}–º–∏–Ω")

def economical_tennis_request(sport_key: str = 'tennis', force_fresh: bool = False) -> Dict:
    """–ó–∞–º–µ–Ω–∞ –¥–ª—è –≤–∞—à–∏—Ö API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å fallback –¥–∞–Ω–Ω—ã–º–∏"""
    try:
        if _api_economy is None:
            # Try to initialize with environment variables
            from dotenv import load_dotenv
            load_dotenv()
            import os
            api_key = os.getenv('ODDS_API_KEY')
            if api_key:
                init_api_economy(api_key)
            else:
                logger.warning("API Economy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ—Ç API –∫–ª—é—á–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º fallback –¥–∞–Ω–Ω—ã–µ")
                return generate_fallback_tennis_data()
        
        return _api_economy.make_tennis_request(sport_key, force_fresh)
        
    except Exception as e:
        logger.error(f"API Economy error: {e}")
        return generate_fallback_tennis_data()

def generate_fallback_tennis_data() -> Dict:
    """Return empty data when APIs are unavailable - only show real tournaments"""
    return {
        'success': False,
        'data': [],
        'source': 'no_fallback_data',
        'status': 'NO_REAL_DATA',
        'emoji': 'üö´',
        'message': 'No real tournament data available - only ATP/WTA tournaments shown'
    }

def get_api_usage() -> Dict:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
    if _api_economy is None:
        return {'error': 'API Economy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}
    
    return _api_economy.get_usage_stats()

def clear_api_cache():
    """–û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à API"""
    if _api_economy is not None:
        _api_economy.cache_data = {}
        _api_economy.save_data()
        logger.info("üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω")

# –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–£–ß–ù–û–ì–û –£–ü–†–ê–í–õ–ï–ù–ò–Ø
def trigger_manual_update():
    """–°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∏–≥–≥–µ—Ä –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    if _api_economy is not None:
        _api_economy.create_manual_update_trigger()
        return True
    return False

def check_manual_update_status() -> Dict:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    if _api_economy is not None:
        return {
            'trigger_exists': _api_economy.check_manual_update_trigger(),
            'usage_stats': _api_economy.get_usage_stats()
        }
    return {'error': 'API Economy –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω'}

if __name__ == "__main__":
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    print("üí∞ API ECONOMY PATCH - –†–£–ß–ù–û–ï –£–ü–†–ê–í–õ–ï–ù–ò–ï")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init_api_economy("test_key", max_per_hour=5, cache_minutes=1)
    
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç—Ä–∏–≥–≥–µ—Ä–∞ —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    trigger_manual_update()
    
    print("2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:")
    status = check_manual_update_status()
    print(f"   –¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω: {status['trigger_exists']}")
    
    print("3Ô∏è‚É£ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–æ–ª–∂–µ–Ω –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ):")
    result = economical_tennis_request('tennis')
    print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result.get('source', 'error')} - {result.get('status', 'unknown')}")
    
    print("4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:")
    status = check_manual_update_status()
    print(f"   –¢—Ä–∏–≥–≥–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω: {status['trigger_exists']}")
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ç–æ–≤–∞!")
    print("\nüìã –ö–ê–ö –ò–°–ü–û–õ–¨–ó–û–í–ê–¢–¨:")
    print("1. –í—ã–∑–æ–≤–∏—Ç–µ trigger_manual_update() –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    print("2. –ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º API –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ")
    print("3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ check_manual_update_status() –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è")