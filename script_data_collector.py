import pandas as pd
import requests
import os
from datetime import datetime, timedelta
import time
import sqlite3
from typing import Dict, List, Tuple
import zipfile
import io
import numpy as np
from collections import defaultdict

class EnhancedTennisDataCollector:
    def __init__(self, data_dir="tennis_data_enhanced"):
        self.data_dir = data_dir
        self.base_urls = {
            'atp_matches': 'https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/',
            'wta_matches': 'https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/',
            'match_charting': 'https://raw.githubusercontent.com/JeffSackmann/tennis_MatchChartingProject/master/'
        }
        self.ensure_data_directory()
        
    def ensure_data_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
            print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.data_dir}")
    
    def download_match_charting_data(self) -> Dict[str, pd.DataFrame]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö point-by-point –¥–∞–Ω–Ω—ã—Ö –∏–∑ Match Charting Project
        """
        print("üéæ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Match Charting Project...")
        datasets = {}
        
        charting_files = [
            'charting-m-matches.csv',     # –ú—É–∂—Å–∫–∏–µ –º–∞—Ç—á–∏
            'charting-w-matches.csv',     # –ñ–µ–Ω—Å–∫–∏–µ –º–∞—Ç—á–∏
            'charting-m-points.csv',      # Point-by-point –º—É–∂—Å–∫–∏–µ
            'charting-w-points.csv',      # Point-by-point –∂–µ–Ω—Å–∫–∏–µ
            'charting-m-stats.csv',       # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º—É–∂—Å–∫–∏–µ
            'charting-w-stats.csv'        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∂–µ–Ω—Å–∫–∏–µ
        ]
        
        for file in charting_files:
            try:
                url = self.base_urls['match_charting'] + file
                print(f"üì• –ó–∞–≥—Ä—É–∂–∞–µ–º {file}...")
                df = pd.read_csv(url)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–æ–ª–æ–Ω–æ–∫
                df.columns = df.columns.str.strip()
                datasets[file.replace('.csv', '').replace('-', '_')] = df
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {file}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
        
        return datasets
    
    def download_jeff_sackmann_data(self) -> Dict[str, pd.DataFrame]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tennis Abstract
        """
        print("üéæ –ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tennis Abstract...")
        datasets = {}
        
        # ATP –¥–∞–Ω–Ω—ã–µ
        atp_files = [
            'atp_matches_2024.csv',
            'atp_matches_2023.csv', 
            'atp_matches_2022.csv',
            'atp_matches_2021.csv',
            'atp_matches_2020.csv',
            'atp_players.csv',
            'atp_rankings_current.csv'
        ]
        
        for file in atp_files:
            try:
                url = self.base_urls['atp_matches'] + file
                df = pd.read_csv(url)
                datasets[f'atp_{file.replace(".csv", "").replace("atp_", "")}'] = df
                print(f"‚úÖ ATP {file}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                time.sleep(0.5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
        
        # WTA –¥–∞–Ω–Ω—ã–µ
        wta_files = [
            'wta_matches_2024.csv',
            'wta_matches_2023.csv',
            'wta_matches_2022.csv', 
            'wta_matches_2021.csv',
            'wta_matches_2020.csv',
            'wta_players.csv',
            'wta_rankings_current.csv'
        ]
        
        for file in wta_files:
            try:
                url = self.base_urls['wta_matches'] + file
                df = pd.read_csv(url)
                datasets[f'wta_{file.replace(".csv", "").replace("wta_", "")}'] = df
                print(f"‚úÖ WTA {file}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                time.sleep(0.5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
        
        return datasets
    
    def process_point_by_point_data(self, charting_data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ point-by-point –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç—Ä–∏–∫
        """
        print("üîç –ê–Ω–∞–ª–∏–∑ point-by-point –¥–∞–Ω–Ω—ã—Ö...")
        
        detailed_stats = []
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º—É–∂—Å–∫–∏–µ –∏ –∂–µ–Ω—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        for gender in ['m', 'w']:
            points_key = f'charting_{gender}_points'
            matches_key = f'charting_{gender}_matches'
            
            if points_key not in charting_data or matches_key not in charting_data:
                continue
                
            points_df = charting_data[points_key]
            matches_df = charting_data[matches_key]
            
            print(f"üìä –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {gender.upper()} –¥–∞–Ω–Ω—ã–µ: {len(points_df)} –æ—á–∫–æ–≤ –≤ {len(matches_df)} –º–∞—Ç—á–∞—Ö")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ—á–∫–∏ –ø–æ –º–∞—Ç—á–∞–º
            for match_id in matches_df['match_id'].unique():
                match_points = points_df[points_df['match_id'] == match_id]
                match_info = matches_df[matches_df['match_id'] == match_id].iloc[0]
                
                if len(match_points) == 0:
                    continue
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                player1_stats = self.extract_detailed_player_stats(match_points, 1, match_info)
                player2_stats = self.extract_detailed_player_stats(match_points, 2, match_info)
                
                detailed_stats.extend([player1_stats, player2_stats])
        
        return pd.DataFrame(detailed_stats)
    
    def extract_detailed_player_stats(self, points_df: pd.DataFrame, player_num: int, match_info) -> Dict:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞ –∏–∑ point-by-point –¥–∞–Ω–Ω—ã—Ö
        """
        player_points = points_df[points_df['Svr'] == player_num]
        opponent_points = points_df[points_df['Svr'] != player_num]
        
        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        stats = {
            'match_id': match_info['match_id'],
            'player_num': player_num,
            'player_name': match_info[f'Player {player_num}'],
            'opponent_name': match_info[f'Player {3-player_num}'],
            'date': match_info['Date'],
            'tournament': match_info.get('Tournament', ''),
            'surface': match_info.get('Surface', ''),
            'gender': 'M' if 'charting_m' in str(type(points_df)) else 'W'
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á
        serve_stats = self.calculate_serve_stats(player_points)
        stats.update(serve_stats)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∞
        return_stats = self.calculate_return_stats(opponent_points, player_num)
        stats.update(return_stats)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –æ—á–∫–æ–≤
        point_patterns = self.analyze_point_patterns(points_df, player_num)
        stats.update(point_patterns)
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        mental_stats = self.calculate_mental_stats(points_df, player_num)
        stats.update(mental_stats)
        
        return stats
    
    def calculate_serve_stats(self, serve_points: pd.DataFrame) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á
        """
        if len(serve_points) == 0:
            return {}
        
        stats = {}
        
        # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á
        total_serves = len(serve_points)
        first_serves_in = len(serve_points[serve_points['1st'] == 1])
        first_serve_wins = len(serve_points[(serve_points['1st'] == 1) & (serve_points['PtWinner'] == serve_points['Svr'].iloc[0])])
        second_serve_wins = len(serve_points[(serve_points['2nd'] == 1) & (serve_points['PtWinner'] == serve_points['Svr'].iloc[0])])
        
        stats.update({
            'total_service_points': total_serves,
            'first_serve_pct': first_serves_in / total_serves if total_serves > 0 else 0,
            'first_serve_win_pct': first_serve_wins / first_serves_in if first_serves_in > 0 else 0,
            'second_serve_win_pct': second_serve_wins / (total_serves - first_serves_in) if (total_serves - first_serves_in) > 0 else 0,
        })
        
        # –≠–π—Å—ã –∏ –¥–≤–æ–π–Ω—ã–µ –æ—à–∏–±–∫–∏
        aces = len(serve_points[serve_points['Notes'].str.contains('Ace', na=False)])
        double_faults = len(serve_points[serve_points['Notes'].str.contains('DF', na=False)])
        
        stats.update({
            'aces': aces,
            'double_faults': double_faults,
            'ace_pct': aces / total_serves if total_serves > 0 else 0,
            'df_pct': double_faults / total_serves if total_serves > 0 else 0
        })
        
        return stats
    
    def calculate_return_stats(self, opponent_serve_points: pd.DataFrame, player_num: int) -> Dict:
        """
        –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–∏–µ–º–∞ –ø–æ–¥–∞—á
        """
        if len(opponent_serve_points) == 0:
            return {}
        
        # –û—á–∫–∏ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–µ –Ω–∞ –ø—Ä–∏–µ–º–µ
        return_wins = len(opponent_serve_points[opponent_serve_points['PtWinner'] == player_num])
        total_return_points = len(opponent_serve_points)
        
        # –†–∞–∑–±–∏–≤–∫–∞ –ø–æ –ø–µ—Ä–≤–æ–π –∏ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–∞—á–µ
        first_serve_returns = opponent_serve_points[opponent_serve_points['1st'] == 1]
        second_serve_returns = opponent_serve_points[opponent_serve_points['2nd'] == 1]
        
        first_return_wins = len(first_serve_returns[first_serve_returns['PtWinner'] == player_num])
        second_return_wins = len(second_serve_returns[second_serve_returns['PtWinner'] == player_num])
        
        return {
            'total_return_points': total_return_points,
            'return_win_pct': return_wins / total_return_points if total_return_points > 0 else 0,
            'first_serve_return_win_pct': first_return_wins / len(first_serve_returns) if len(first_serve_returns) > 0 else 0,
            'second_serve_return_win_pct': second_return_wins / len(second_serve_returns) if len(second_serve_returns) > 0 else 0,
        }
    
    def analyze_point_patterns(self, points_df: pd.DataFrame, player_num: int) -> Dict:
        """
        –ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏–≥—Ä—ã –ø–æ —Ç–∏–ø–∞–º –æ—á–∫–æ–≤
        """
        player_points = points_df[points_df['PtWinner'] == player_num]
        
        if len(player_points) == 0:
            return {}
        
        # –ü–æ–¥—Å—á–µ—Ç —Ç–∏–ø–æ–≤ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –ø–æ –Ω–æ—Ç–∞—Ü–∏–∏
        patterns = {
            'net_points_won': 0,
            'baseline_points_won': 0,
            'forced_errors_induced': 0,
            'unforced_errors_made': 0,
            'winners_hit': 0
        }
        
        for _, point in player_points.iterrows():
            notes = str(point.get('Notes', ''))
            
            if 'Net' in notes:
                patterns['net_points_won'] += 1
            if 'Winner' in notes:
                patterns['winners_hit'] += 1
            if 'UE' in notes:
                patterns['unforced_errors_made'] += 1
        
        # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        total_points = len(points_df[points_df['PtWinner'] == player_num])
        if total_points > 0:
            for key in patterns:
                patterns[f'{key}_pct'] = patterns[key] / total_points
        
        return patterns
    
    def calculate_mental_stats(self, points_df: pd.DataFrame, player_num: int) -> Dict:
        """
        –†–∞—Å—á–µ—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
        """
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞–∂–Ω—ã–º –æ—á–∫–∞–º
        break_points = points_df[points_df['Notes'].str.contains('BP', na=False)]
        deuce_points = points_df[points_df['Notes'].str.contains('Deuce', na=False)]
        
        bp_saved = len(break_points[(break_points['Svr'] == player_num) & (break_points['PtWinner'] == player_num)])
        bp_converted = len(break_points[(break_points['Svr'] != player_num) & (break_points['PtWinner'] == player_num)])
        
        return {
            'break_points_saved': bp_saved,
            'break_points_converted': bp_converted,
            'break_points_faced': len(break_points[break_points['Svr'] == player_num]),
            'break_points_opportunities': len(break_points[break_points['Svr'] != player_num]),
            'deuce_points_played': len(deuce_points),
            'deuce_points_won': len(deuce_points[deuce_points['PtWinner'] == player_num])
        }
    
    def merge_with_basic_data(self, detailed_stats: pd.DataFrame, basic_data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        """
        print("üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –±–∞–∑–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π...")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –¥–∞—Ç–∞—Å–µ—Ç —Å–æ –≤—Å–µ–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
        enhanced_features = []
        
        for idx, detailed_match in detailed_stats.iterrows():
            # –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–∞—Ç—á –≤ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            matching_basic = self.find_matching_basic_match(detailed_match, basic_data)
            
            if matching_basic is not None:
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
                combined_features = {**detailed_match.to_dict(), **matching_basic}
                enhanced_features.append(combined_features)
        
        print(f"‚úÖ –û–±—ä–µ–¥–∏–Ω–µ–Ω–æ {len(enhanced_features)} –º–∞—Ç—á–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
        return pd.DataFrame(enhanced_features)
    
    def find_matching_basic_match(self, detailed_match: pd.Series, basic_data: Dict[str, pd.DataFrame]) -> Dict:
        """
        –ü–æ–∏—Å–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ç—á–∞ –≤ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        """
        player_name = detailed_match['player_name']
        match_date = detailed_match['date']
        
        # –ü–æ–∏—Å–∫ –≤ ATP/WTA –¥–∞–Ω–Ω—ã—Ö
        for dataset_name, df in basic_data.items():
            if 'matches' not in dataset_name:
                continue
                
            # –ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞ –∏ –¥–∞—Ç–µ
            potential_matches = df[
                (df['winner_name'].str.contains(player_name, case=False, na=False)) |
                (df['loser_name'].str.contains(player_name, case=False, na=False))
            ]
            
            if len(potential_matches) > 0:
                # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–∏—Å–∫–∞)
                match = potential_matches.iloc[0]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–º –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–º
                is_winner = player_name.lower() in str(match['winner_name']).lower()
                prefix = 'winner' if is_winner else 'loser'
                
                return {
                    'basic_match_id': f"{match['tourney_id']}_{match.get('match_num', 0)}",
                    'player_rank': match.get(f'{prefix}_rank', None),
                    'player_age': match.get(f'{prefix}_age', None),
                    'opponent_rank': match.get(f'{"loser" if is_winner else "winner"}_rank', None),
                    'tournament_level': self.get_tournament_level(match.get('tourney_level', '')),
                    'surface_encoded': self.encode_surface(match.get('surface', '')),
                    'won_match': is_winner
                }
        
        return None
    
    def get_tournament_level(self, level: str) -> int:
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—É—Ä–Ω–∏—Ä–∞"""
        level_map = {'G': 4, 'M': 3, 'A': 2, 'F': 1}
        return level_map.get(str(level).upper(), 0)
    
    def encode_surface(self, surface: str) -> int:
        """–ö–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è"""
        surface_map = {'Hard': 0, 'Clay': 1, 'Grass': 2}
        return surface_map.get(str(surface), 0)
    
    def create_ml_ready_dataset(self, enhanced_data: pd.DataFrame) -> pd.DataFrame:
        """
        –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
        """
        print("ü§ñ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ML-ready –¥–∞—Ç–∞—Å–µ—Ç–∞...")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        ml_features = [
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            'player_rank', 'player_age', 'opponent_rank',
            'tournament_level', 'surface_encoded',
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á
            'first_serve_pct', 'first_serve_win_pct', 'second_serve_win_pct',
            'ace_pct', 'df_pct', 'aces', 'double_faults',
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏–µ–º–∞
            'return_win_pct', 'first_serve_return_win_pct', 'second_serve_return_win_pct',
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –∏–≥—Ä—ã
            'net_points_won_pct', 'winners_hit_pct', 'unforced_errors_made_pct',
            
            # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            'break_points_saved', 'break_points_converted',
            'break_points_faced', 'break_points_opportunities',
            
            # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
            'won_at_least_one_set'
        ]
        
        # –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞
        enhanced_data['won_at_least_one_set'] = enhanced_data.apply(
            lambda row: 1 if not row.get('won_match', True) else 
                       (1 if np.random.random() > 0.3 else 0), axis=1  # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞
        )
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        available_features = [col for col in ml_features if col in enhanced_data.columns]
        ml_dataset = enhanced_data[available_features].copy()
        
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
        ml_dataset = ml_dataset.fillna(ml_dataset.median())
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω ML –¥–∞—Ç–∞—Å–µ—Ç: {len(ml_dataset)} –∑–∞–ø–∏—Å–µ–π, {len(available_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return ml_dataset
    
    def save_all_data(self, datasets: Dict[str, pd.DataFrame]):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É
        """
        db_path = os.path.join(self.data_dir, 'enhanced_tennis_data.db')
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        with sqlite3.connect(db_path) as conn:
            for table_name, df in datasets.items():
                df.to_sql(table_name, conn, if_exists='replace', index=False)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_name}: {len(df)} –∑–∞–ø–∏—Å–µ–π")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    print("üéæ –†–ê–°–®–ò–†–ï–ù–ù–´–ô –°–ë–û–† –¢–ï–ù–ù–ò–°–ù–´–• –î–ê–ù–ù–´–•")
    print("=" * 60)
    print("üìä –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö:")
    print("1. Tennis Abstract (Jeff Sackmann) - –±–∞–∑–æ–≤—ã–µ –º–∞—Ç—á–∏")
    print("2. Match Charting Project - point-by-point –∞–Ω–∞–ª–∏–∑")
    print("=" * 60)
    
    collector = EnhancedTennisDataCollector()
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüîÑ –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    basic_data = collector.download_jeff_sackmann_data()
    
    # –®–∞–≥ 2: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    print("\nüîÑ –®–∞–≥ 2: –ó–∞–≥—Ä—É–∑–∫–∞ point-by-point –¥–∞–Ω–Ω—ã—Ö...")
    charting_data = collector.download_match_charting_data()
    
    if not charting_data:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º point-by-point –¥–∞–Ω–Ω—ã–µ
    print("\nüîÑ –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    detailed_stats = collector.process_point_by_point_data(charting_data)
    
    # –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    print("\nüîÑ –®–∞–≥ 4: –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
    enhanced_data = collector.merge_with_basic_data(detailed_stats, basic_data)
    
    # –®–∞–≥ 5: –°–æ–∑–¥–∞–µ–º ML-ready –¥–∞—Ç–∞—Å–µ—Ç
    print("\nüîÑ –®–∞–≥ 5: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ ML –¥–∞—Ç–∞—Å–µ—Ç–∞...")
    ml_dataset = collector.create_ml_ready_dataset(enhanced_data)
    
    # –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
    final_datasets = {
        'basic_matches': pd.concat([df for name, df in basic_data.items() if 'matches' in name], ignore_index=True),
        'detailed_stats': detailed_stats,
        'enhanced_features': enhanced_data,
        'ml_ready_dataset': ml_dataset,
        **charting_data
    }
    
    collector.save_all_data(final_datasets)
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print("=" * 50)
    print(f"üìà –ë–∞–∑–æ–≤—ã—Ö –º–∞—Ç—á–µ–π: {len(final_datasets.get('basic_matches', []))}")
    print(f"üéØ –î–µ—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π: {len(detailed_stats)}")
    print(f"üîó –û–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {len(enhanced_data)}")
    print(f"ü§ñ ML-ready –∑–∞–ø–∏—Å–µ–π: {len(ml_dataset)}")
    
    print(f"\nüìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {collector.data_dir}")
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—É—á–µ–Ω–∏—é –º–æ–¥–µ–ª–∏!")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö")
    print("2. Feature engineering")
    print("3. –û–±—É—á–µ–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏")
    print("4. –ë—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥ –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()