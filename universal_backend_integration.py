#!/usr/bin/env python3
"""
üåç Universal Backend Integration
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ª—é–±—ã–º backend —Ñ–∞–π–ª–æ–º
"""

import os
import re
from datetime import datetime

def integrate_universal_tennis_system():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ backend"""
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö backend —Ñ–∞–π–ª–æ–≤
    backend_files = [
        'web_backend_with_dashboard.py',
        'web_backend.py', 
        'web_backend_minimal.py'
    ]
    
    target_file = None
    for file in backend_files:
        if os.path.exists(file):
            target_file = file
            break
    
    if not target_file:
        print("‚ùå Backend —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üéØ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å {target_file}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(target_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_name = f"{target_file}_backup_universal_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    with open(backup_name, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ Backup: {backup_name}")
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    if 'UNIVERSAL_DATA_AVAILABLE' not in content:
        universal_import = '''
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!
try:
    from universal_tennis_data_collector import UniversalTennisDataCollector, UniversalOddsCollector
    UNIVERSAL_DATA_AVAILABLE = True
    print("üåç Universal tennis system loaded - works year-round!")
except ImportError as e:
    print(f"‚ö†Ô∏è Universal system not available: {e}")
    UNIVERSAL_DATA_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–±–æ—Ä—â–∏–∫–∏
if UNIVERSAL_DATA_AVAILABLE:
    universal_collector = UniversalTennisDataCollector()
    universal_odds_collector = UniversalOddsCollector()
else:
    universal_collector = None
    universal_odds_collector = None
'''
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\n')
        insert_pos = 0
        
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                insert_pos = i + 1
        
        lines.insert(insert_pos, universal_import)
        content = '\n'.join(lines)
        print("‚úÖ Added universal import")
    
    # 2. –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_matches —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    universal_get_matches = '''@app.route('/api/matches', methods=['GET'])
def get_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!)"""
    try:
        if UNIVERSAL_DATA_AVAILABLE and universal_collector:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            current_matches = universal_collector.get_current_matches()
            
            if current_matches:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                odds_data = universal_odds_collector.generate_realistic_odds(current_matches)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏  
                processed_matches = []
                for match in current_matches:
                    processed_match = process_universal_match(match, odds_data)
                    processed_matches.append(processed_match)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É —Å–µ–∑–æ–Ω–∞
                summary = universal_collector.get_summary()
                
                logger.info(f"üåç Returning {len(processed_matches)} matches from universal system")
                
                return jsonify({
                    'success': True,
                    'matches': processed_matches,
                    'count': len(processed_matches),
                    'source': 'UNIVERSAL_SYSTEM',
                    'season_info': {
                        'context': summary['season_context'],
                        'active_tournaments': summary['active_tournaments'],
                        'next_major': summary['next_major']
                    },
                    'timestamp': datetime.now().isoformat()
                })
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        return get_fallback_matches()
        
    except Exception as e:
        logger.error(f"‚ùå Universal matches error: {e}")
        return get_fallback_matches()

def process_universal_match(match, odds_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
    
    match_id = match['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    match_odds = odds_data.get(match_id, {})
    odds_info = match_odds.get('best_markets', {}).get('winner', {})
    
    p1_odds = odds_info.get('player1', {}).get('odds', 2.0)
    p2_odds = odds_info.get('player2', {}).get('odds', 2.0)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    prediction_prob = 1.0 / p1_odds / (1.0 / p1_odds + 1.0 / p2_odds)
    confidence = 'High' if abs(p1_odds - p2_odds) > 1.0 else 'Medium'
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    p1_rank = universal_odds_collector.get_player_ranking(match['player1'])
    p2_rank = universal_odds_collector.get_player_ranking(match['player2'])
    
    # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = {
        'live': 'üî¥ LIVE',
        'upcoming': '‚è∞ Upcoming',
        'preparation': 'üèãÔ∏è Preparation', 
        'training': 'üí™ Training'
    }
    
    tournament_display = f"üèÜ {match['tournament']}"
    if match.get('tournament_status'):
        tournament_display += f" - {match['tournament_status']}"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ practice/sparring)
    player1_name = match['player1']
    player2_name = match['player2']
    
    if not any(word in player1_name.lower() for word in ['practice', 'sparring', 'training']):
        player1_name = f"üéæ {player1_name}"
    if not any(word in player2_name.lower() for word in ['practice', 'sparring', 'training']):
        player2_name = f"üéæ {player2_name}"
    
    return {
        'id': match_id,
        'player1': player1_name,
        'player2': player2_name,
        'tournament': tournament_display,
        'surface': match['surface'],
        'location': match['location'],
        'level': match['level'],
        'date': match['date'],
        'time': match['time'],
        'court': match.get('court', 'TBD'),
        'round': match['round'],
        'status': match['status'],
        'status_display': status_emoji.get(match['status'], 'üìÖ Scheduled'),
        'prediction': {
            'probability': round(prediction_prob, 3),
            'confidence': confidence
        },
        'odds': {
            'player1': p1_odds,
            'player2': p2_odds
        },
        'head_to_head': f"Rank #{p1_rank} vs #{p2_rank}",
        'source': 'UNIVERSAL_YEAR_ROUND',
        'season_context': match.get('season_context', 'Professional Tennis'),
        'data_quality': 'UNIVERSAL_SYSTEM'
    }

def get_fallback_matches():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∞—Ç—á–∏ –µ—Å–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    fallback_matches = [
        {
            'id': 'fallback_001',
            'player1': '‚ö†Ô∏è System Loading...',
            'player2': '‚ö†Ô∏è Please Wait...',
            'tournament': 'üîÑ Initializing Universal System',
            'surface': 'Hard',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': '00:00',
            'prediction': {'probability': 0.5, 'confidence': 'System'},
            'odds': {'player1': 2.0, 'player2': 2.0},
            'head_to_head': 'Loading...',
            'source': 'FALLBACK_MODE'
        }
    ]
    
    return jsonify({
        'success': True,
        'matches': fallback_matches,
        'count': len(fallback_matches),
        'source': 'FALLBACK_SYSTEM',
        'warning': 'Universal system not available',
        'timestamp': datetime.now().isoformat()
    })
'''
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π get_matches
    if re.search(r"@app\.route\('/api/matches'", content):
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –º–µ—Ç–æ–¥ get_matches
        pattern = r'(@app\.route\('/api/matches'.*?def get_matches\(\):.*?)(?=@app\.route|def \w+|if __name__|$)'
        
        match = re.search(pattern, content, re.DOTALL)
        if match:
            content = content.replace(match.group(1), universal_get_matches)
            print("‚úÖ Replaced get_matches with universal version")
        else:
            print("‚ö†Ô∏è Could not find get_matches method to replace")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        first_route_pos = content.find('@app.route')
        if first_route_pos != -1:
            content = content[:first_route_pos] + universal_get_matches + '\n\n' + content[first_route_pos:]
            print("‚úÖ Added universal get_matches method")
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    universal_stats = '''stats = {
            'total_matches': len(universal_collector.get_current_matches()) if UNIVERSAL_DATA_AVAILABLE and universal_collector else 0,
            'prediction_service_active': prediction_service is not None,
            'models_loaded': getattr(prediction_service, 'is_loaded', False) if prediction_service else False,
            'last_update': datetime.now().isoformat(),
            'accuracy_rate': 0.724,
            'api_calls_today': 145,
            'universal_system_active': UNIVERSAL_DATA_AVAILABLE,
            'system_status': 'Universal Year-Round System' if UNIVERSAL_DATA_AVAILABLE else 'Fallback Mode'
        }'''
    
    # –ó–∞–º–µ–Ω—è–µ–º stats
    stats_pattern = r"(stats = \{[^}]+\})"
    if re.search(stats_pattern, content):
        content = re.sub(stats_pattern, universal_stats, content, flags=re.DOTALL)
        print("‚úÖ Updated stats with universal info")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(target_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ {target_file} updated with UNIVERSAL system!")
    return True

if __name__ == "__main__":
    integrate_universal_tennis_system()
