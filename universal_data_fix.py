#!/usr/bin/env python3
"""
üåç –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –¢–ï–ù–ù–ò–°–ù–´–• –î–ê–ù–ù–´–•
–†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ —Å –ª—é–±—ã–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏
"""

import requests
import json
from datetime import datetime
import os
from typing import List, Dict, Optional

class UniversalTennisDataFix:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫—Ä—É–≥–ª—ã–π –≥–æ–¥"""
    
    def __init__(self):
        self.api_key = os.getenv('ODDS_API_KEY', 'a1b20d709d4bacb2d95ddab880f91009')
        self.base_url = "https://api.the-odds-api.com/v4"
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–ª—é—á–∏
        self.tennis_sport_keys = [
            # Grand Slams (–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–ª—é—á–∏)
            'tennis_atp_wimbledon',
            'tennis_wta_wimbledon', 
            'tennis_atp_us_open',
            'tennis_wta_us_open',
            'tennis_atp_french_open',
            'tennis_wta_french_open',
            'tennis_atp_australian_open',
            'tennis_wta_australian_open',
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∫–ª—é—á–∏ (–≤—Å–µ–≥–¥–∞ –ø—Ä–æ–±—É–µ–º)
            'tennis',
            'tennis_atp',
            'tennis_wta',
            
            # Masters –∏ –∫—Ä—É–ø–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            'tennis_atp_indian_wells',
            'tennis_wta_indian_wells',
            'tennis_atp_miami',
            'tennis_wta_miami',
            'tennis_atp_madrid',
            'tennis_wta_madrid',
            'tennis_atp_rome',
            'tennis_wta_rome',
            'tennis_atp_cincinnati',
            'tennis_wta_cincinnati',
            'tennis_atp_shanghai',
            'tennis_wta_beijing',
            'tennis_atp_paris',
            'tennis_wta_finals',
            'tennis_atp_finals'
        ]
    
    def discover_active_tennis_sports(self) -> List[Dict]:
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
        print("üîç –ü–û–ò–°–ö –ê–ö–¢–ò–í–ù–´–• –¢–ï–ù–ù–ò–°–ù–´–• –¢–£–†–ù–ò–†–û–í")
        print("=" * 50)
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
            response = requests.get(
                f"{self.base_url}/sports",
                params={'apiKey': self.api_key},
                timeout=10
            )
            
            if response.status_code != 200:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: HTTP {response.status_code}")
                return []
            
            all_sports = response.json()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–Ω—ã–µ
            tennis_sports = []
            for sport in all_sports:
                if (sport.get('active', False) and 
                    ('tennis' in sport.get('key', '').lower() or
                     'tennis' in sport.get('title', '').lower() or
                     'tennis' in sport.get('group', '').lower())):
                    tennis_sports.append(sport)
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {len(tennis_sports)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –Ω–∞—à–ª–∏
            for sport in tennis_sports:
                status = "üî• ACTIVE" if sport.get('active') else "üí§ inactive"
                print(f"   {status} {sport['key']}: {sport['title']}")
            
            return tennis_sports
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç—É—Ä–Ω–∏—Ä–æ–≤: {e}")
            return []
    
    def get_universal_tennis_matches(self) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∏–∑ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
        print(f"\nüéæ –ü–û–õ–£–ß–ï–ù–ò–ï –ú–ê–¢–ß–ï–ô –ò–ó –í–°–ï–• –ê–ö–¢–ò–í–ù–´–• –¢–£–†–ù–ò–†–û–í")
        print("=" * 50)
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        priority_keys = ['tennis', 'tennis_atp', 'tennis_wta']
        all_matches = []
        successful_tournaments = 0
        
        # 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏
        for sport_key in priority_keys:
            print(f"\nüéæ –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª—é—á: {sport_key}...")
            
            matches = self._get_tournament_matches(sport_key, f"Tennis ({sport_key})")
            
            if matches:
                all_matches.extend(matches)
                successful_tournaments += 1
                print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
            else:
                print(f"   ‚ö™ –ù–µ—Ç –º–∞—Ç—á–µ–π")
        
        # 2. –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        if not all_matches:
            print(f"\nüîç –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –ø—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã...")
            
            # –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
            active_sports = self.discover_active_tennis_sports()
            
            for sport in active_sports:
                sport_key = sport['key']
                sport_title = sport['title']
                
                print(f"\nüéæ –ü—Ä–æ–≤–µ—Ä—è–µ–º {sport_title} ({sport_key})...")
                
                matches = self._get_tournament_matches(sport_key, sport_title)
                
                if matches:
                    all_matches.extend(matches)
                    successful_tournaments += 1
                    print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π")
                else:
                    print(f"   ‚ö™ –ù–µ—Ç –º–∞—Ç—á–µ–π")
        
        print(f"\nüìä –ò–¢–û–ì–û:")
        print(f"   üèÜ –£—Å–ø–µ—à–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {successful_tournaments}")
        print(f"   üéæ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π: {len(all_matches)}")
        
        return all_matches
    
    def _get_tournament_matches(self, sport_key: str, sport_title: str) -> List[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç—É—Ä–Ω–∏—Ä–∞"""
        try:
            url = f"{self.base_url}/sports/{sport_key}/odds"
            params = {
                'apiKey': self.api_key,
                'regions': 'us,uk,eu,au',
                'markets': 'h2h',
                'oddsFormat': 'decimal',
                'dateFormat': 'iso'
            }
            
            response = requests.get(url, params=params, timeout=15)
            
            if response.status_code == 200:
                matches = response.json()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                for match in matches:
                    match['sport_key'] = sport_key
                    match['tournament_title'] = sport_title
                    match['surface'] = self._detect_surface(sport_key, sport_title)
                    match['tournament_level'] = self._detect_tournament_level(sport_key, sport_title)
                
                return matches
            elif response.status_code == 422:
                # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–æ—Ä—Ç–∞
                return []
            elif response.status_code == 401:
                print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á!")
                return []
            else:
                print(f"‚ùå API –æ—à–∏–±–∫–∞ {response.status_code} –¥–ª—è {sport_key}")
                return []
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è {sport_key}: {e}")
            return []
    
    def _detect_surface(self, sport_key: str, sport_title: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–∫—Ä—ã—Ç–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
        key_lower = sport_key.lower()
        title_lower = sport_title.lower()
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        if any(x in key_lower for x in ['wimbledon']):
            return 'Grass'
        elif any(x in key_lower for x in ['french', 'roland', 'garros', 'madrid', 'rome']):
            return 'Clay'
        elif any(x in title_lower for x in ['grass']):
            return 'Grass'
        elif any(x in title_lower for x in ['clay']):
            return 'Clay'
        else:
            return 'Hard'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    def _detect_tournament_level(self, sport_key: str, sport_title: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ç—É—Ä–Ω–∏—Ä–∞"""
        key_lower = sport_key.lower()
        title_lower = sport_title.lower()
        
        # Grand Slams
        if any(x in key_lower for x in ['australian_open', 'french_open', 'wimbledon', 'us_open']):
            return 'Grand Slam'
        
        # Masters/WTA 1000
        elif any(x in key_lower for x in ['indian_wells', 'miami', 'madrid', 'rome', 'cincinnati', 'shanghai', 'paris']):
            return 'Masters 1000'
        
        # Finals
        elif 'finals' in key_lower:
            return 'Finals'
        
        # ATP/WTA –æ–±—â–∏–µ
        elif 'atp' in key_lower:
            return 'ATP Tour'
        elif 'wta' in key_lower:
            return 'WTA Tour'
        
        else:
            return 'Professional'
    
    def adapt_matches_for_underdog_system(self, raw_matches: List[Dict]) -> List[Dict]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –º–∞—Ç—á–µ–π –¥–ª—è underdog —Å–∏—Å—Ç–µ–º—ã"""
        print(f"\nüéØ –ê–î–ê–ü–¢–ê–¶–ò–Ø –î–õ–Ø UNDERDOG –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        underdog_matches = []
        
        for match in raw_matches:
            adapted_match = self._adapt_single_match(match)
            if adapted_match:
                underdog_matches.append(adapted_match)
        
        print(f"‚úÖ –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è underdog –∞–Ω–∞–ª–∏–∑–∞: {len(underdog_matches)}")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–∞—á–µ—Å—Ç–≤—É (–ª—É—á—à–∏–µ –ø–µ—Ä–≤—ã–º–∏)
        underdog_matches.sort(key=lambda x: x['underdog_analysis']['prediction']['probability'], reverse=True)
        
        return underdog_matches
    
    def _adapt_single_match(self, api_match: Dict) -> Optional[Dict]:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            player1 = api_match.get('home_team', 'Player 1')
            player2 = api_match.get('away_team', 'Player 2')
            tournament_title = api_match.get('tournament_title', 'Tennis Tournament')
            surface = api_match.get('surface', 'Hard')
            level = api_match.get('tournament_level', 'Professional')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            odds1, odds2, bookmaker = self._extract_best_odds_with_bookmaker(api_match.get('bookmakers', []))
            
            if not odds1 or not odds2:
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
            if odds1 > odds2:
                underdog = player1
                favorite = player2
                underdog_odds = odds1
                favorite_odds = odds2
            else:
                underdog = player2
                favorite = player1
                underdog_odds = odds2
                favorite_odds = odds1
            
            # –§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–∞: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
            if not (1.8 <= underdog_odds <= 8.0):
                return None
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
            match_prob = 1.0 / underdog_odds
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—É—Ä–Ω–∏—Ä–∞ –∏ –ø–æ–∫—Ä—ã—Ç–∏—è
            surface_bonus = 0.05 if surface == 'Grass' else 0.02  # –¢—Ä–∞–≤–∞ –±–æ–ª–µ–µ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–∞
            level_bonus = 0.03 if 'Grand Slam' in level else 0.01
            
            set_probability = min(0.88, match_prob + 0.25 + surface_bonus + level_bonus)
            
            # –§–∏–ª—å—Ç—Ä: –ø–æ–ø–∞–¥–∞–Ω–∏–µ –≤ —Ü–µ–ª–µ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω
            if not (0.45 <= set_probability <= 0.88):
                return None
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            confidence = 'Very High' if set_probability > 0.8 else \
                        'High' if set_probability > 0.7 else \
                        'Medium'
            
            # –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
            key_factors = [
                f"üèÜ {level} - –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞",
                f"üèüÔ∏è {surface} –ø–æ–∫—Ä—ã—Ç–∏–µ - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ—Å—Ç—å" if surface != 'Hard' else f"üèüÔ∏è –•–∞—Ä–¥ - —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ",
                f"üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç {underdog_odds:.1f} - —Ö–æ—Ä–æ—à–∞—è —Ü–µ–Ω–Ω–æ—Å—Ç—å",
                f"üìä {set_probability:.0%} —à–∞–Ω—Å –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"
            ]
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            return {
                'id': f"universal_{api_match.get('id', f'match_{datetime.now().timestamp()}')}",
                'player1': f"üéæ {player1}",
                'player2': f"üéæ {player2}",
                'tournament': f"üèÜ {tournament_title} - {level}",
                'surface': surface,
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': api_match.get('commence_time', '14:00')[:5] if api_match.get('commence_time') else '14:00',
                'round': 'Live',
                'court': f"{tournament_title} Court",
                'status': 'upcoming',
                'odds': {
                    'player1': odds1,
                    'player2': odds2
                },
                'underdog_analysis': {
                    'underdog': underdog,
                    'favorite': favorite,
                    'underdog_odds': underdog_odds,
                    'favorite_odds': favorite_odds,
                    'prediction': {
                        'probability': round(set_probability, 3),
                        'confidence': confidence,
                        'key_factors': key_factors
                    },
                    'quality_rating': 'HIGH' if set_probability > 0.75 else 'MEDIUM'
                },
                'source': f'LIVE_{api_match.get("sport_key", "TENNIS").upper()}',
                'tournament_metadata': {
                    'sport_key': api_match.get('sport_key'),
                    'level': level,
                    'surface': surface,
                    'bookmaker': bookmaker
                }
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–∞—Ç—á–∞: {e}")
            return None
    
    def _extract_best_odds_with_bookmaker(self, bookmakers: List[Dict]) -> tuple:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±—É–∫–º–µ–∫–µ—Ä–µ"""
        best_odds1 = None
        best_odds2 = None
        best_bookmaker = "Unknown"
        
        for bookmaker in bookmakers:
            bookmaker_name = bookmaker.get('title', bookmaker.get('key', 'Unknown'))
            
            for market in bookmaker.get('markets', []):
                if market.get('key') == 'h2h':
                    outcomes = market.get('outcomes', [])
                    if len(outcomes) >= 2:
                        odds1 = outcomes[0].get('price')
                        odds2 = outcomes[1].get('price')
                        
                        if odds1 and odds2:
                            # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ª—É—á—à–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞)
                            if not best_odds1 or (odds1 > best_odds1):
                                best_odds1 = odds1
                                best_bookmaker = bookmaker_name
                            if not best_odds2 or (odds2 > best_odds2):
                                best_odds2 = odds2
        
        return best_odds1, best_odds2, best_bookmaker
    
    def get_season_context(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        month = datetime.now().month
        
        if month in [1, 2]:
            return "Hard Court Season - Australian Open & Middle East"
        elif month in [3, 4, 5]:
            return "Clay Court Season - European Spring"
        elif month in [6, 7]:
            return "Grass Court Season - Wimbledon Period"
        elif month in [8, 9]:
            return "Hard Court Season - US Open Series"
        elif month in [10, 11]:
            return "Indoor Season - Masters & Finals"
        else:  # December
            return "Off Season - Exhibition Matches"
    
    def run_universal_integration(self) -> bool:
        """–ó–∞–ø—É—Å–∫ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("üåç –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –¢–ï–ù–ù–ò–°–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø")
        print("=" * 60)
        print(f"üïê –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üéæ –°–µ–∑–æ–Ω: {self.get_season_context()}")
        print(f"üéØ –¶–µ–ª—å: –Ω–∞–π—Ç–∏ underdog –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö")
        print("=" * 60)
        
        # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Ç—á–∏
        all_matches = self.get_universal_tennis_matches()
        
        if not all_matches:
            print("\n‚ùå –ù–ï–¢ –ê–ö–¢–ò–í–ù–´–• –ú–ê–¢–ß–ï–ô")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –ú–µ–∂–¥—É —Ç—É—Ä–Ω–∏—Ä–∞–º–∏")
            print("   ‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å API –∫–ª—é—á–æ–º")
            print("   ‚Ä¢ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ The Odds API")
            print(f"   ‚Ä¢ API –∫–ª—é—á: {self.api_key[:10]}...{self.api_key[-5:]}")
            return False
        
        # 2. –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è underdog —Å–∏—Å—Ç–µ–º—ã
        underdog_matches = self.adapt_matches_for_underdog_system(all_matches)
        
        if not underdog_matches:
            print("\n‚ö†Ô∏è –ù–ï–¢ –ü–û–î–•–û–î–Ø–©–ò–• UNDERDOG –í–û–ó–ú–û–ñ–ù–û–°–¢–ï–ô")
            print("üí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   ‚Ä¢ –í—Å–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1.8-8.0")
            print("   ‚Ä¢ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –≤–Ω–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 45-88%")
            print("   ‚Ä¢ –°–ª–∏—à–∫–æ–º –æ—á–µ–≤–∏–¥–Ω—ã–µ —Ñ–∞–≤–æ—Ä–∏—Ç—ã")
            print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –±—ã–ª–æ: {len(all_matches)}")
            return False
        
        # 3. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        print(f"\nüéâ –ù–ê–ô–î–ï–ù–´ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï UNDERDOG –í–û–ó–ú–û–ñ–ù–û–°–¢–ò!")
        print("=" * 50)
        
        for i, match in enumerate(underdog_matches[:5], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-5
            analysis = match['underdog_analysis']
            prediction = analysis['prediction']
            metadata = match.get('tournament_metadata', {})
            
            print(f"\n{i}. {match['player1']} vs {match['player2']}")
            print(f"   üèÜ {match['tournament']}")
            print(f"   üèüÔ∏è {match['surface']} ‚Ä¢ {metadata.get('level', 'Professional')}")
            print(f"   üéØ –ê–Ω–¥–µ—Ä–¥–æ–≥: {analysis['underdog']} (–∫–æ—ç—Ñ. {analysis['underdog_odds']})")
            print(f"   üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç: {prediction['probability']:.1%}")
            print(f"   üíé –ö–∞—á–µ—Å—Ç–≤–æ: {analysis['quality_rating']}")
            print(f"   üìà –ë—É–∫–º–µ–∫–µ—Ä: {metadata.get('bookmaker', 'N/A')}")
        
        # 4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        filename = f'universal_tennis_data_{timestamp}.json'
        
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump({
                    'timestamp': datetime.now().isoformat(),
                    'season_context': self.get_season_context(),
                    'total_raw_matches': len(all_matches),
                    'underdog_matches_count': len(underdog_matches),
                    'matches': underdog_matches
                }, f, indent=2, ensure_ascii=False, default=str)
            
            print(f"\nüíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {filename}")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {e}")
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ –º–∞—Ç—á–µ–π –Ω–∞–π–¥–µ–Ω–æ: {len(all_matches)}")
        print(f"   ‚Ä¢ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –¥–ª—è underdog: {len(underdog_matches)}")
        print(f"   ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: {len([m for m in underdog_matches if m['underdog_analysis']['quality_rating'] == 'HIGH'])}")
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    integrator = UniversalTennisDataFix()
    
    try:
        success = integrator.run_universal_integration()
        
        if success:
            print(f"\nüöÄ –£–°–ü–ï–•! –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
            print(f"\nüìã –≠–¢–ê –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢ –ö–†–£–ì–õ–´–ô –ì–û–î:")
            print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
            print("‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ª—é–±–æ–º—É —Å–µ–∑–æ–Ω—É")
            print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç —Å Grand Slam, Masters, ATP/WTA")
            print("‚úÖ –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ –∏ —É—Ä–æ–≤–µ–Ω—å —Ç—É—Ä–Ω–∏—Ä–∞")
            print("‚úÖ –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ underdog –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
        else:
            print(f"\n‚ö†Ô∏è –°–µ–π—á–∞—Å –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π")
            print(f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()