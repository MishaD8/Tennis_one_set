#!/usr/bin/env python3
"""
üéæ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ï–ù–ù–ò–°–ù–û–ì–û –ü–†–û–ï–ö–¢–ê
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import os
import sys
import json
from datetime import datetime

def quick_test():
    print("üéæ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –¢–ï–ù–ù–ò–°–ù–û–ì–û –ü–†–û–ï–ö–¢–ê")
    print("=" * 50)
    print(f"üïê {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    results = {}
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
    print("\nüìÅ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
    critical_files = {
        'tennis_prediction_module.py': 'ML –º–æ–¥–µ–ª–∏',
        'real_tennis_predictor_integration.py': '–†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', 
        'tennis_backend.py': 'Underdog —Å–∏—Å—Ç–µ–º–∞',
        'api_economy_patch.py': 'API —ç–∫–æ–Ω–æ–º–∏—è',
        'config.json': '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è'
    }
    
    files_found = 0
    for file_path, description in critical_files.items():
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {description}: {file_path} ({size} bytes)")
            files_found += 1
        else:
            print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
    
    results['files'] = {'found': files_found, 'total': len(critical_files)}
    
    # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –º–æ–¥–µ–ª–µ–π
    print(f"\nü§ñ –ü–†–û–í–ï–†–ö–ê ML –ú–û–î–ï–õ–ï–ô:")
    models_dir = "tennis_models"
    if os.path.exists(models_dir):
        model_files = os.listdir(models_dir)
        print(f"‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {models_dir}: {len(model_files)} —Ñ–∞–π–ª–æ–≤")
        
        expected_models = ['neural_network.h5', 'xgboost.pkl', 'random_forest.pkl', 
                          'gradient_boosting.pkl', 'logistic_regression.pkl', 'scaler.pkl']
        
        found_models = 0
        for model in expected_models:
            if model in model_files:
                print(f"  ‚úÖ {model}")
                found_models += 1
            else:
                print(f"  ‚ùå {model}")
        
        results['models'] = {'found': found_models, 'total': len(expected_models)}
    else:
        print(f"‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {models_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        results['models'] = {'found': 0, 'total': 6}
    
    # 3. –¢–µ—Å—Ç –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
    print(f"\nüîß –¢–ï–°–¢ –ò–ú–ü–û–†–¢–ê –ú–û–î–£–õ–ï–ô:")
    modules = {
        'tennis_prediction_module': '–û—Å–Ω–æ–≤–Ω–æ–π ML —Å–µ—Ä–≤–∏—Å',
        'real_tennis_predictor_integration': '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        'api_economy_patch': 'API —ç–∫–æ–Ω–æ–º–∏—è'
    }
    
    imported_modules = 0
    for module_name, description in modules.items():
        try:
            exec(f"import {module_name}")
            print(f"‚úÖ {description}: {module_name}")
            imported_modules += 1
        except ImportError as e:
            print(f"‚ùå {description}: {module_name} - –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê")
        except Exception as e:
            print(f"‚ö†Ô∏è {description}: {module_name} - {type(e).__name__}")
    
    results['imports'] = {'success': imported_modules, 'total': len(modules)}
    
    # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print(f"\n‚öôÔ∏è –ü–†–û–í–ï–†–ö–ê –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–ò:")
    if os.path.exists('config.json'):
        try:
            with open('config.json', 'r') as f:
                config = json.load(f)
            
            api_key = config.get('data_sources', {}).get('the_odds_api', {}).get('api_key', '')
            has_real_key = api_key and api_key != 'YOUR_API_KEY' and len(api_key) > 10
            
            print(f"‚úÖ config.json –∑–∞–≥—Ä—É–∂–µ–Ω")
            print(f"üîë API –∫–ª—é—á: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if has_real_key else '‚ö†Ô∏è –¢–µ—Å—Ç–æ–≤—ã–π/–ø—É—Å—Ç–æ–π'}")
            
            results['config'] = {'loaded': True, 'has_api_key': has_real_key}
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è config.json: {e}")
            results['config'] = {'loaded': False, 'has_api_key': False}
    else:
        print(f"‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
        results['config'] = {'loaded': False, 'has_api_key': False}
    
    # 5. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç ML —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
    print(f"\nüß† –ë–´–°–¢–†–´–ô –¢–ï–°–¢ ML:")
    try:
        import tennis_prediction_module as tpm
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        service = tpm.TennisPredictionService()
        print(f"‚úÖ TennisPredictionService —Å–æ–∑–¥–∞–Ω")
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏
        models_loaded = service.load_models()
        print(f"üìÇ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π: {'‚úÖ –£—Å–ø–µ—à–Ω–æ' if models_loaded else '‚ö†Ô∏è –î–µ–º–æ —Ä–µ–∂–∏–º'}")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
        test_data = tpm.create_match_data(
            player_rank=1, opponent_rank=45, 
            player_recent_win_rate=0.85
        )
        
        prediction = service.predict_match(test_data)
        prob = prediction['probability']
        conf = prediction['confidence']
        
        print(f"üéØ –¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {prob:.1%} ({conf})")
        print(f"‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        results['ml_test'] = {
            'success': True, 
            'models_loaded': models_loaded,
            'prediction': {'probability': prob, 'confidence': conf}
        }
        
    except Exception as e:
        print(f"‚ùå ML —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
        results['ml_test'] = {'success': False, 'error': str(e)}
    
    # 6. –¢–µ—Å—Ç underdog —Å–∏—Å—Ç–µ–º—ã
    print(f"\nüéØ –¢–ï–°–¢ UNDERDOG –°–ò–°–¢–ï–ú–´:")
    try:
        import tennis_backend as tb
        
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = tb.UnderdogAnalyzer()
        print(f"‚úÖ UnderdogAnalyzer —Å–æ–∑–¥–∞–Ω")
        
        # –¢–µ—Å—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        alcaraz_rank = analyzer.get_player_ranking('Carlos Alcaraz')
        nakashima_rank = analyzer.get_player_ranking('Brandon Nakashima')
        
        print(f"üìä –†–µ–π—Ç–∏–Ω–≥–∏: Alcaraz #{alcaraz_rank}, Nakashima #{nakashima_rank}")
        
        # –¢–µ—Å—Ç underdog —Å—Ü–µ–Ω–∞—Ä–∏—è
        scenario = analyzer.identify_underdog_scenario('Brandon Nakashima', 'Carlos Alcaraz')
        
        print(f"üéØ Underdog —Å—Ü–µ–Ω–∞—Ä–∏–π:")
        print(f"   Underdog: {scenario['underdog']} (#{scenario['underdog_rank']})")
        print(f"   Favorite: {scenario['favorite']} (#{scenario['favorite_rank']})")
        print(f"   –¢–∏–ø: {scenario['underdog_type']}")
        
        # –ü–æ–ª–Ω—ã–π —Ä–∞—Å—á–µ—Ç
        analysis = analyzer.calculate_underdog_probability(
            'Brandon Nakashima', 'Carlos Alcaraz', 'Wimbledon', 'Grass'
        )
        
        prob = analysis['underdog_probability']
        quality = analysis['quality']
        ml_system = analysis['ml_system_used']
        
        print(f"üé≤ –§–∏–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {prob:.1%} ({quality})")
        print(f"ü§ñ ML —Å–∏—Å—Ç–µ–º–∞: {ml_system}")
        print(f"‚úÖ Underdog —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        
        results['underdog_test'] = {
            'success': True,
            'uses_ml': ml_system != 'None',
            'analysis': {'probability': prob, 'quality': quality, 'ml_system': ml_system}
        }
        
    except Exception as e:
        print(f"‚ùå Underdog —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω: {e}")
        results['underdog_test'] = {'success': False, 'error': str(e)}
    
    # 7. –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print(f"\n" + "=" * 50)
    print(f"üìä –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê")
    print("=" * 50)
    
    # –ü–æ–¥—Å—á–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    scores = []
    
    # –§–∞–π–ª—ã (30%)
    file_score = (results['files']['found'] / results['files']['total']) * 30
    scores.append(file_score)
    print(f"üìÅ –§–∞–π–ª—ã: {results['files']['found']}/{results['files']['total']} = {file_score:.1f}/30")
    
    # –ú–æ–¥–µ–ª–∏ (20%) 
    model_score = (results['models']['found'] / results['models']['total']) * 20
    scores.append(model_score)
    print(f"ü§ñ ML –º–æ–¥–µ–ª–∏: {results['models']['found']}/{results['models']['total']} = {model_score:.1f}/20")
    
    # –ò–º–ø–æ—Ä—Ç—ã (20%)
    import_score = (results['imports']['success'] / results['imports']['total']) * 20
    scores.append(import_score)
    print(f"üîß –ò–º–ø–æ—Ä—Ç—ã: {results['imports']['success']}/{results['imports']['total']} = {import_score:.1f}/20")
    
    # ML —Ç–µ—Å—Ç (15%)
    ml_score = 15 if results['ml_test']['success'] else 0
    scores.append(ml_score)
    print(f"üß† ML —Ç–µ—Å—Ç: {'–£—Å–ø–µ—Ö' if results['ml_test']['success'] else '–ù–µ—É–¥–∞—á–∞'} = {ml_score}/15")
    
    # Underdog —Ç–µ—Å—Ç (15%)
    underdog_score = 15 if results['underdog_test']['success'] else 0
    scores.append(underdog_score)
    print(f"üéØ Underdog —Ç–µ—Å—Ç: {'–£—Å–ø–µ—Ö' if results['underdog_test']['success'] else '–ù–µ—É–¥–∞—á–∞'} = {underdog_score}/15")
    
    total_score = sum(scores)
    print(f"\nüéØ –û–ë–©–ò–ô –°–ß–ï–¢: {total_score:.1f}/100")
    
    # –í—ã–≤–æ–¥—ã
    print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –í–´–í–û–î–´:")
    
    if results['ml_test']['success'] and results['underdog_test']['success']:
        underdog_uses_ml = results['underdog_test']['analysis']['ml_system'] != 'None'
        if underdog_uses_ml:
            print(f"‚úÖ –û–¢–õ–ò–ß–ù–û! Underdog —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ï ML –º–æ–¥–µ–ª–∏")
            print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –±–∞–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–∞—Ö, –ù–ï '–æ—Ç –±–∞–ª–¥—ã'")
        else:
            print(f"‚ö†Ô∏è Underdog —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –±–∞–∑–æ–≤—É—é –ª–æ–≥–∏–∫—É")
            print(f"üí° –ù—É–∂–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±—É—á–µ–Ω–Ω—ã–º–∏ ML –º–æ–¥–µ–ª—è–º–∏")
    else:
        print(f"‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å ML –∏–ª–∏ Underdog —Å–∏—Å—Ç–µ–º–æ–π")
    
    if results['models']['found'] >= 5:
        print(f"‚úÖ ML –º–æ–¥–µ–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –∏ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è")
    else:
        print(f"‚ö†Ô∏è –ú–∞–ª–æ ML –º–æ–¥–µ–ª–µ–π - –Ω—É–∂–Ω–æ –æ–±—É—á–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å")
    
    if total_score >= 80:
        print(f"üéâ –°–ò–°–¢–ï–ú–ê –í –û–¢–õ–ò–ß–ù–û–ú –°–û–°–¢–û–Ø–ù–ò–ò!")
    elif total_score >= 60:
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ, –µ—Å—Ç—å –º–µ—Å—Ç–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è")
    else:
        print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    report = {
        'timestamp': datetime.now().isoformat(),
        'total_score': total_score,
        'detailed_results': results,
        'conclusion': {
            'ml_working': results['ml_test']['success'],
            'underdog_working': results['underdog_test']['success'],
            'underdog_uses_ml': results['underdog_test']['success'] and results['underdog_test']['analysis']['ml_system'] != 'None',
            'models_available': results['models']['found'] >= 5
        }
    }
    
    filename = f"quick_test_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
    try:
        with open(filename, 'w') as f:
            json.dump(report, f, indent=2)
        print(f"\nüíæ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
    except Exception as e:
        print(f"\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç: {e}")
    
    return report

if __name__ == "__main__":
    report = quick_test()
    
    print(f"\nüéæ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–π —Å—á–µ—Ç: {report['total_score']:.1f}/100")
    
    if report['conclusion']['underdog_uses_ml']:
        print(f"üéØ ‚úÖ –ì–õ–ê–í–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Underdog —Å–∏—Å—Ç–µ–º–∞ –î–ï–ô–°–¢–í–ò–¢–ï–õ–¨–ù–û –∏—Å–ø–æ–ª—å–∑—É–µ—Ç ML!")
    else:
        print(f"üéØ ‚ö†Ô∏è –ì–õ–ê–í–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢: Underdog —Å–∏—Å—Ç–µ–º–∞ –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ ML –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")