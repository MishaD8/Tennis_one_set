#!/usr/bin/env python3
"""
üéæ –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø THE ODDS API
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö –æ—Ç The Odds API
"""

import requests
import json
from datetime import datetime
from typing import Dict, List, Optional
import logging

logger = logging.getLogger(__name__)

class TheOddsAPICorrect:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å The Odds API
    –û—Å–Ω–æ–≤–∞–Ω–∞ –Ω–∞ —Ä–µ–∞–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –∏—Ö –¥–∞–Ω–Ω—ã—Ö
    """
    
    def __init__(self, api_key: str):
        self.api_key = api_key
        self.base_url = "https://api.the-odds-api.com/v4"
        self.requests_used = 0
        self.requests_remaining = None
        
    def _make_request(self, endpoint: str, params: Dict) -> Optional[Dict]:
        """–ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            params['apiKey'] = self.api_key
            
            response = requests.get(f"{self.base_url}/{endpoint}", params=params, timeout=10)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
            headers = response.headers
            self.requests_used = headers.get('x-requests-used', 'Unknown')
            self.requests_remaining = headers.get('x-requests-remaining', 'Unknown')
            
            logger.info(f"API Usage: {self.requests_used} used, {self.requests_remaining} remaining")
            
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 401:
                logger.error("‚ùå Invalid API key")
                return None
            elif response.status_code == 422:
                logger.warning("‚ö†Ô∏è Invalid parameters or no data available")
                return None
            else:
                logger.error(f"‚ùå API error {response.status_code}: {response.text}")
                return None
                
        except requests.RequestException as e:
            logger.error(f"‚ùå Request failed: {e}")
            return None
    
    def get_available_sports(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞"""
        logger.info("üèÉ Getting available sports...")
        
        data = self._make_request("sports", {})
        if data:
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–Ω–Ω–∏—Å
            tennis_sports = [sport for sport in data if 'tennis' in sport.get('key', '').lower()]
            logger.info(f"üéæ Found {len(tennis_sports)} tennis sports: {[s['key'] for s in tennis_sports]}")
            return tennis_sports
        return []
    
    def get_tennis_odds(self, sport_key: str = "tennis", regions: str = "us,uk,eu,au") -> List[Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —Ç–µ–Ω–Ω–∏—Å
        
        Args:
            sport_key: –ö–ª—é—á —Å–ø–æ—Ä—Ç–∞ (tennis, tennis_atp, tennis_wta)
            regions: –†–µ–≥–∏–æ–Ω—ã –±—É–∫–º–µ–∫–µ—Ä–æ–≤ (us, uk, eu, au)
        """
        logger.info(f"üéæ Getting tennis odds for {sport_key}...")
        
        params = {
            'regions': regions,
            'markets': 'h2h',  # Head-to-head (winner market)
            'oddsFormat': 'decimal',
            'dateFormat': 'iso'
        }
        
        data = self._make_request(f"sports/{sport_key}/odds", params)
        
        if data:
            logger.info(f"‚úÖ Found {len(data)} tennis matches with odds")
            return data
        return []
    
    def convert_to_tennis_format(self, odds_data: List[Dict]) -> Dict[str, Dict]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ The Odds API –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–≤–æ–µ–π —Å–∏—Å—Ç–µ–º—ã
        
        The Odds API –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –º–∞—Ç—á–µ–π —Å bookmakers
        –¢–≤–æ—è —Å–∏—Å—Ç–µ–º–∞ –æ–∂–∏–¥–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å match_id –∫–∞–∫ –∫–ª—é—á–æ–º
        """
        converted_odds = {}
        
        for match in odds_data:
            try:
                # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –º–∞—Ç—á–∞
                match_id = match.get('id', f"odds_{datetime.now().timestamp()}")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ (–≤ —Ç–µ–Ω–Ω–∏—Å–µ home_team –∏ away_team - —ç—Ç–æ –∏–≥—Ä–æ–∫–∏)
                player1 = match.get('home_team', 'Player 1')
                player2 = match.get('away_team', 'Player 2')
                
                # –ò—â–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å—Ä–µ–¥–∏ –±—É–∫–º–µ–∫–µ—Ä–æ–≤
                best_p1_odds = None
                best_p2_odds = None
                best_p1_bookmaker = None
                best_p2_bookmaker = None
                
                for bookmaker in match.get('bookmakers', []):
                    bookmaker_name = bookmaker.get('title', bookmaker.get('key', 'Unknown'))
                    
                    for market in bookmaker.get('markets', []):
                        if market.get('key') == 'h2h':  # Head-to-head market
                            
                            for outcome in market.get('outcomes', []):
                                player_name = outcome.get('name')
                                odds = outcome.get('price')
                                
                                if not odds:
                                    continue
                                
                                # The Odds API –º–æ–∂–µ—Ç –¥–∞–≤–∞—Ç—å –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                if isinstance(odds, (int, float)):
                                    if odds > 0 and odds < 1:
                                        # –£–∂–µ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ
                                        decimal_odds = odds
                                    elif odds > 100 or odds < -100:
                                        # –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∏–µ - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ
                                        if odds > 0:
                                            decimal_odds = (odds / 100) + 1
                                        else:
                                            decimal_odds = (100 / abs(odds)) + 1
                                    else:
                                        decimal_odds = odds
                                else:
                                    decimal_odds = float(odds) if odds else 2.0
                                
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫–æ–π —ç—Ç–æ –∏–≥—Ä–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                                if player_name == player1 or player_name.lower() in player1.lower():
                                    if best_p1_odds is None or decimal_odds > best_p1_odds:
                                        best_p1_odds = decimal_odds
                                        best_p1_bookmaker = bookmaker_name
                                        
                                elif player_name == player2 or player_name.lower() in player2.lower():
                                    if best_p2_odds is None or decimal_odds > best_p2_odds:
                                        best_p2_odds = decimal_odds
                                        best_p2_bookmaker = bookmaker_name
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–≤–æ–µ–π —Å–∏—Å—Ç–µ–º—ã
                if best_p1_odds and best_p2_odds:
                    converted_odds[match_id] = {
                        'match_info': {
                            'player1': player1,
                            'player2': player2,
                            'tournament': f"Tennis Match ({match.get('sport_title', 'Tennis')})",
                            'surface': 'Unknown',  # The Odds API –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–æ–∫—Ä—ã—Ç–∏–µ
                            'date': match.get('commence_time', datetime.now().isoformat())[:10],
                            'time': match.get('commence_time', datetime.now().isoformat())[11:16],
                            'source': 'the_odds_api'
                        },
                        'best_markets': {
                            'winner': {
                                'player1': {
                                    'odds': round(best_p1_odds, 2),
                                    'bookmaker': best_p1_bookmaker
                                },
                                'player2': {
                                    'odds': round(best_p2_odds, 2),
                                    'bookmaker': best_p2_bookmaker
                                }
                            }
                        },
                        'raw_data': match  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    }
                
            except Exception as e:
                logger.error(f"‚ùå Error processing match {match.get('id', 'unknown')}: {e}")
                continue
        
        logger.info(f"üîÑ Converted {len(converted_odds)} matches to tennis format")
        return converted_odds
    
    def test_tennis_sports(self) -> Dict[str, int]:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞"""
        logger.info("üîç Testing different tennis sports...")
        
        # –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–ª—é—á–∏ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞ –≤ The Odds API
        tennis_sport_keys = [
            'tennis',
            'tennis_atp', 
            'tennis_wta',
            'tennis_atp_french_open',
            'tennis_wta_french_open',
            'tennis_atp_wimbledon',
            'tennis_wta_wimbledon',
            'tennis_atp_us_open',
            'tennis_wta_us_open'
        ]
        
        results = {}
        
        for sport_key in tennis_sport_keys:
            try:
                odds_data = self.get_tennis_odds(sport_key, regions="us,uk")
                results[sport_key] = len(odds_data)
                logger.info(f"  üéæ {sport_key}: {len(odds_data)} matches")
                
                if odds_data:
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –º–∞—Ç—á–∞
                    first_match = odds_data[0]
                    logger.info(f"    Example: {first_match.get('home_team')} vs {first_match.get('away_team')}")
                    
            except Exception as e:
                logger.error(f"  ‚ùå {sport_key}: {e}")
                results[sport_key] = 0
        
        return results
    
    def get_usage_stats(self) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API"""
        return {
            'requests_used': self.requests_used,
            'requests_remaining': self.requests_remaining,
            'last_update': datetime.now().isoformat()
        }


class TennisOddsIntegrator:
    """
    –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è The Odds API –∫ —Ç–≤–æ–µ–π —Å–∏—Å—Ç–µ–º–µ
    """
    
    def __init__(self, api_key: str):
        self.odds_api = TheOddsAPICorrect(api_key)
        self.cache = {}
        self.last_update = None
        
    def get_live_tennis_odds(self, force_refresh: bool = False) -> Dict[str, Dict]:
        """
        –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ —Ç–µ–Ω–Ω–∏—Å
        –° –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
        """
        now = datetime.now()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å–≤–µ–∂–∏–µ (–º–ª–∞–¥—à–µ 10 –º–∏–Ω—É—Ç)
        if (not force_refresh and self.cache and self.last_update and 
            (now - self.last_update).total_seconds() < 600):
            logger.info("üìã Using cached odds data")
            return self.cache
        
        logger.info("üîÑ Fetching fresh odds data...")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –≤–∏–¥—ã —Å–ø–æ—Ä—Ç–∞
        all_odds = {}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–Ω–Ω–∏—Å
        tennis_odds = self.odds_api.get_tennis_odds('tennis')
        if tennis_odds:
            converted = self.odds_api.convert_to_tennis_format(tennis_odds)
            all_odds.update(converted)
        
        # –ü—Ä–æ–±—É–µ–º ATP –∏ WTA –æ—Ç–¥–µ–ª—å–Ω–æ
        for sport_key in ['tennis_atp', 'tennis_wta']:
            try:
                sport_odds = self.odds_api.get_tennis_odds(sport_key)
                if sport_odds:
                    converted = self.odds_api.convert_to_tennis_format(sport_odds)
                    all_odds.update(converted)
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Could not get {sport_key}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–µ—à
        self.cache = all_odds
        self.last_update = now
        
        logger.info(f"‚úÖ Got {len(all_odds)} tennis matches with real odds")
        return all_odds
    
    def get_integration_status(self) -> Dict:
        """–°—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        try:
            # –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            sports = self.odds_api.get_available_sports()
            
            # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            odds = self.get_live_tennis_odds()
            
            usage = self.odds_api.get_usage_stats()
            
            return {
                'status': 'connected',
                'tennis_sports_available': len(sports),
                'matches_with_odds': len(odds),
                'api_usage': usage,
                'last_check': datetime.now().isoformat()
            }
            
        except Exception as e:
            return {
                'status': 'error',
                'error': str(e),
                'last_check': datetime.now().isoformat()
            }


def test_integration(api_key: str):
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("üéæ TESTING THE ODDS API INTEGRATION")
    print("=" * 50)
    
    if not api_key or api_key == "YOUR_API_KEY":
        print("‚ùå Please provide a real API key!")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
        integrator = TennisOddsIntegrator(api_key)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        status = integrator.get_integration_status()
        
        print(f"üîå Status: {status['status']}")
        print(f"üéæ Tennis sports: {status.get('tennis_sports_available', 0)}")
        print(f"‚öΩ Matches with odds: {status.get('matches_with_odds', 0)}")
        
        if 'api_usage' in status:
            usage = status['api_usage']
            print(f"üìä API Usage: {usage['requests_used']}/{usage['requests_remaining']} remaining")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        print("\nüîç Getting live tennis odds...")
        odds = integrator.get_live_tennis_odds(force_refresh=True)
        
        if odds:
            print(f"\n‚úÖ SUCCESS! Got {len(odds)} matches with real odds:")
            
            for i, (match_id, match_data) in enumerate(list(odds.items())[:3], 1):
                match_info = match_data['match_info']
                winner_odds = match_data['best_markets']['winner']
                
                print(f"\nüéæ Match {i}: {match_info['player1']} vs {match_info['player2']}")
                print(f"   üìÖ Date: {match_info['date']} {match_info['time']}")
                print(f"   üí∞ Odds: {winner_odds['player1']['odds']} ({winner_odds['player1']['bookmaker']}) vs")
                print(f"           {winner_odds['player2']['odds']} ({winner_odds['player2']['bookmaker']})")
        
        else:
            print("‚ö†Ô∏è No tennis matches found")
            print("üí° Tennis might be out of season or check sport keys")
        
        print(f"\nüéØ Ready for integration!")
        
    except Exception as e:
        print(f"‚ùå Integration test failed: {e}")


if __name__ == "__main__":
    # –ó–ê–ú–ï–ù–ò –ù–ê –°–í–û–ô –†–ï–ê–õ–¨–ù–´–ô API –ö–õ–Æ–ß
    API_KEY = "a1b20d709d4bacb2d95ddab880f91009"
    
    test_integration(API_KEY)