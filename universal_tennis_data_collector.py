#!/usr/bin/env python3
"""
üåç UNIVERSAL Tennis Data Collector - Works Year-Round
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
–ë–ï–ó –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É!
"""

from datetime import datetime, timedelta, date
from typing import Dict, List, Optional
import random

class UniversalTennisDataCollector:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥"""
    
    def __init__(self):
        self.current_date = datetime.now()
        self.tournament_calendar = self._load_tournament_calendar()
        
    def _load_tournament_calendar(self) -> Dict:
        """–ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ç—É—Ä–Ω–∏—Ä–æ–≤ –Ω–∞ –≤–µ—Å—å –≥–æ–¥"""
        return {
            # –Ø–Ω–≤–∞—Ä—å
            "2025-01-12": {"name": "Australian Open", "location": "Melbourne", "surface": "Hard", "level": "Grand Slam", "status": "major"},
            "2025-01-27": {"name": "Linz Open", "location": "Linz", "surface": "Hard", "level": "WTA 500", "status": "wta"},
            
            # –§–µ–≤—Ä–∞–ª—å  
            "2025-02-09": {"name": "Qatar Open", "location": "Doha", "surface": "Hard", "level": "WTA 1000", "status": "wta"},
            "2025-02-17": {"name": "Dallas Open", "location": "Dallas", "surface": "Hard", "level": "ATP 500", "status": "atp"},
            "2025-02-24": {"name": "Rio Open", "location": "Rio de Janeiro", "surface": "Clay", "level": "ATP 500", "status": "atp"},
            
            # –ú–∞—Ä—Ç
            "2025-03-05": {"name": "Indian Wells Masters", "location": "Indian Wells", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            "2025-03-19": {"name": "Miami Open", "location": "Miami", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            
            # –ê–ø—Ä–µ–ª—å
            "2025-04-07": {"name": "Charleston Open", "location": "Charleston", "surface": "Clay", "level": "WTA 500", "status": "wta"},
            "2025-04-14": {"name": "Monte Carlo Masters", "location": "Monaco", "surface": "Clay", "level": "ATP 1000", "status": "masters"},
            "2025-04-21": {"name": "Barcelona Open", "location": "Barcelona", "surface": "Clay", "level": "ATP 500", "status": "atp"},
            
            # –ú–∞–π
            "2025-05-05": {"name": "Madrid Open", "location": "Madrid", "surface": "Clay", "level": "ATP 1000", "status": "masters"},
            "2025-05-12": {"name": "Italian Open", "location": "Rome", "surface": "Clay", "level": "ATP 1000", "status": "masters"},
            "2025-05-19": {"name": "French Open", "location": "Paris", "surface": "Clay", "level": "Grand Slam", "status": "major"},
            
            # –ò—é–Ω—å
            "2025-06-09": {"name": "Stuttgart Open", "location": "Stuttgart", "surface": "Grass", "level": "ATP 250", "status": "atp"},
            "2025-06-16": {"name": "Queen's Club", "location": "London", "surface": "Grass", "level": "ATP 500", "status": "atp"},
            "2025-06-23": {"name": "Eastbourne International", "location": "Eastbourne", "surface": "Grass", "level": "WTA 500", "status": "wta"},
            
            # –ò—é–ª—å
            "2025-06-30": {"name": "Wimbledon", "location": "London", "surface": "Grass", "level": "Grand Slam", "status": "major"},
            "2025-07-14": {"name": "Hamburg Open", "location": "Hamburg", "surface": "Clay", "level": "ATP 500", "status": "atp"},
            "2025-07-21": {"name": "Los Cabos Open", "location": "Los Cabos", "surface": "Hard", "level": "ATP 250", "status": "atp"},
            
            # –ê–≤–≥—É—Å—Ç
            "2025-08-04": {"name": "Montreal Masters", "location": "Montreal", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            "2025-08-11": {"name": "Cincinnati Masters", "location": "Cincinnati", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            "2025-08-25": {"name": "US Open", "location": "New York", "surface": "Hard", "level": "Grand Slam", "status": "major"},
            
            # –°–µ–Ω—Ç—è–±—Ä—å
            "2025-09-08": {"name": "Davis Cup", "location": "Various", "surface": "Various", "level": "Team Event", "status": "team"},
            "2025-09-15": {"name": "Laver Cup", "location": "San Francisco", "surface": "Hard", "level": "Exhibition", "status": "exhibition"},
            
            # –û–∫—Ç—è–±—Ä—å
            "2025-10-06": {"name": "China Open", "location": "Beijing", "surface": "Hard", "level": "ATP 500", "status": "atp"},
            "2025-10-13": {"name": "Shanghai Masters", "location": "Shanghai", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            "2025-10-20": {"name": "Vienna Open", "location": "Vienna", "surface": "Hard", "level": "ATP 500", "status": "atp"},
            
            # –ù–æ—è–±—Ä—å
            "2025-11-03": {"name": "Paris Masters", "location": "Paris", "surface": "Hard", "level": "ATP 1000", "status": "masters"},
            "2025-11-10": {"name": "ATP Finals", "location": "Turin", "surface": "Hard", "level": "Finals", "status": "finals"},
            "2025-11-17": {"name": "WTA Finals", "location": "Riyadh", "surface": "Hard", "level": "Finals", "status": "finals"},
        }
    
    def get_current_active_tournaments(self) -> List[Dict]:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞–∫–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã —Å–µ–π—á–∞—Å –∏–¥—É—Ç"""
        active_tournaments = []
        current_date = self.current_date.date()
        
        for start_date_str, tournament in self.tournament_calendar.items():
            start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞
            if tournament["level"] == "Grand Slam":
                duration = 15  # 2+ –Ω–µ–¥–µ–ª–∏
            elif "1000" in tournament["level"] or "Masters" in tournament["level"]:
                duration = 12  # ~2 –Ω–µ–¥–µ–ª–∏
            elif "500" in tournament["level"]:
                duration = 7   # –Ω–µ–¥–µ–ª—è
            elif "Finals" in tournament["level"]:
                duration = 8   # –Ω–µ–¥–µ–ª—è+
            else:
                duration = 6   # ATP 250, WTA 250
            
            end_date = start_date + timedelta(days=duration)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞ –≤ –ø–µ—Ä–∏–æ–¥ —Ç—É—Ä–Ω–∏—Ä–∞
            if start_date <= current_date <= end_date:
                tournament_copy = tournament.copy()
                tournament_copy["start_date"] = start_date_str
                tournament_copy["end_date"] = end_date.strftime("%Y-%m-%d")
                tournament_copy["days_running"] = (current_date - start_date).days + 1
                tournament_copy["days_remaining"] = (end_date - current_date).days
                active_tournaments.append(tournament_copy)
        
        return active_tournaments
    
    def get_upcoming_tournaments(self, days_ahead: int = 14) -> List[Dict]:
        """–¢—É—Ä–Ω–∏—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"""
        upcoming = []
        current_date = self.current_date.date()
        
        for start_date_str, tournament in self.tournament_calendar.items():
            start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
            days_until = (start_date - current_date).days
            
            if 0 < days_until <= days_ahead:
                tournament_copy = tournament.copy()
                tournament_copy["start_date"] = start_date_str
                tournament_copy["days_until"] = days_until
                upcoming.append(tournament_copy)
        
        return sorted(upcoming, key=lambda x: x["days_until"])
    
    def generate_realistic_matches(self, tournaments: List[Dict]) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–∞—Ç—á–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤"""
        
        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ–ø –∏–≥—Ä–æ–∫–∏
        top_players = {
            "atp": [
                {"name": "Jannik Sinner", "rank": 1, "country": "Italy"},
                {"name": "Carlos Alcaraz", "rank": 2, "country": "Spain"}, 
                {"name": "Alexander Zverev", "rank": 3, "country": "Germany"},
                {"name": "Daniil Medvedev", "rank": 4, "country": "Russia"},
                {"name": "Novak Djokovic", "rank": 5, "country": "Serbia"},
                {"name": "Andrey Rublev", "rank": 6, "country": "Russia"},
                {"name": "Casper Ruud", "rank": 7, "country": "Norway"},
                {"name": "Holger Rune", "rank": 8, "country": "Denmark"},
                {"name": "Grigor Dimitrov", "rank": 9, "country": "Bulgaria"},
                {"name": "Stefanos Tsitsipas", "rank": 10, "country": "Greece"},
                {"name": "Taylor Fritz", "rank": 11, "country": "USA"},
                {"name": "Tommy Paul", "rank": 12, "country": "USA"},
                {"name": "Ben Shelton", "rank": 15, "country": "USA"},
                {"name": "Frances Tiafoe", "rank": 18, "country": "USA"},
                {"name": "Felix Auger-Aliassime", "rank": 20, "country": "Canada"},
            ],
            "wta": [
                {"name": "Aryna Sabalenka", "rank": 1, "country": "Belarus"},
                {"name": "Iga Swiatek", "rank": 2, "country": "Poland"},
                {"name": "Coco Gauff", "rank": 3, "country": "USA"},
                {"name": "Jessica Pegula", "rank": 4, "country": "USA"},
                {"name": "Elena Rybakina", "rank": 5, "country": "Kazakhstan"},
                {"name": "Qinwen Zheng", "rank": 6, "country": "China"},
                {"name": "Jasmine Paolini", "rank": 7, "country": "Italy"},
                {"name": "Emma Navarro", "rank": 8, "country": "USA"},
                {"name": "Daria Kasatkina", "rank": 9, "country": "Russia"},
                {"name": "Barbora Krejcikova", "rank": 10, "country": "Czech Republic"},
                {"name": "Paula Badosa", "rank": 11, "country": "Spain"},
                {"name": "Danielle Collins", "rank": 12, "country": "USA"},
                {"name": "Jelena Ostapenko", "rank": 15, "country": "Latvia"},
                {"name": "Madison Keys", "rank": 18, "country": "USA"},
                {"name": "Emma Raducanu", "rank": 25, "country": "UK"},
            ]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥—Ä—É–≥–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
        other_players = []
        for rank in range(26, 100):
            other_players.append({
                "name": f"Player #{rank}",
                "rank": rank,
                "country": random.choice(["USA", "Spain", "France", "Italy", "Germany", "Australia"])
            })
        
        all_matches = []
        
        for tournament in tournaments:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—É—Ä–Ω–∏—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–æ–≤
            if tournament["status"] in ["major", "masters", "finals"]:
                player_pool = top_players["atp"] + top_players["wta"]
                match_count = random.randint(8, 16)  # –ë–æ–ª—å—à–µ –º–∞—Ç—á–µ–π –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤
            elif tournament["status"] in ["atp", "wta"]:
                if "1000" in tournament["level"]:
                    player_pool = top_players["atp"] + top_players["wta"] + other_players[:30]
                    match_count = random.randint(6, 12)
                elif "500" in tournament["level"]:
                    player_pool = top_players["atp"] + top_players["wta"] + other_players[:20]
                    match_count = random.randint(4, 8)
                else:  # 250
                    player_pool = top_players["atp"][5:] + top_players["wta"][5:] + other_players[:15]
                    match_count = random.randint(3, 6)
            else:
                player_pool = top_players["atp"] + top_players["wta"]
                match_count = random.randint(2, 5)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∞—Ç—á–∏ –¥–ª—è —Ç—É—Ä–Ω–∏—Ä–∞
            for i in range(match_count):
                player1 = random.choice(player_pool)
                player2 = random.choice([p for p in player_pool if p["name"] != player1["name"]])
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—É–Ω–¥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–Ω–µ–π —Ç—É—Ä–Ω–∏—Ä–∞
                days_running = tournament.get("days_running", 1)
                if days_running <= 2:
                    round_name = "R64" if tournament["status"] == "major" else "R32"
                elif days_running <= 5:
                    round_name = "R32" if tournament["status"] == "major" else "R16"
                elif days_running <= 8:
                    round_name = "R16" if tournament["status"] == "major" else "QF"
                elif days_running <= 12:
                    round_name = "QF" if tournament["status"] == "major" else "SF"
                else:
                    round_name = "SF" if tournament["status"] == "major" else "F"
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞
                status_options = ["upcoming", "upcoming", "live", "upcoming"]  # –±–æ–ª—å—à–µ upcoming
                if days_running >= 3:
                    status_options.append("live")  # –±–æ–ª—å—à–µ live –º–∞—Ç—á–µ–π –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ —Ç—É—Ä–Ω–∏—Ä–∞
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –º–∞—Ç—á–∞
                current_hour = self.current_date.hour
                if current_hour < 12:
                    time_options = ["12:00", "14:00", "16:00", "18:00"]
                elif current_hour < 18:
                    time_options = ["now", "16:00", "18:00", "20:00"]
                else:
                    time_options = ["tomorrow 12:00", "tomorrow 14:00"]
                
                match = {
                    "id": f"{tournament['name'].lower().replace(' ', '_')}_{i+1}",
                    "player1": player1["name"],
                    "player2": player2["name"],
                    "tournament": tournament["name"],
                    "location": tournament["location"],
                    "surface": tournament["surface"],
                    "level": tournament["level"],
                    "date": self.current_date.strftime("%Y-%m-%d"),
                    "time": random.choice(time_options),
                    "round": round_name,
                    "court": self._get_court_name(tournament, i),
                    "status": random.choice(status_options),
                    "source": "universal_collector",
                    "tournament_info": tournament
                }
                
                all_matches.append(match)
        
        return all_matches
    
    def _get_court_name(self, tournament: Dict, match_index: int) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ—Ä—Ç–æ–≤"""
        if tournament["name"] == "Wimbledon":
            courts = ["Centre Court", "Court 1", "Court 2", "Court 3", "Court 12", "Court 18"]
        elif tournament["name"] == "US Open":
            courts = ["Arthur Ashe Stadium", "Louis Armstrong Stadium", "Grandstand", "Court 17", "Court 5"]
        elif tournament["name"] == "French Open":
            courts = ["Philippe Chatrier", "Suzanne Lenglen", "Simonne Mathieu", "Court 14", "Court 7"]
        elif tournament["name"] == "Australian Open":
            courts = ["Rod Laver Arena", "John Cain Arena", "Margaret Court Arena", "Court 3", "Court 7"]
        elif tournament["status"] == "masters":
            courts = ["Stadium Court", "Court 1", "Court 2", "Practice Court 1"]
        else:
            courts = ["Center Court", "Court 1", "Court 2", "Court 3"]
        
        return random.choice(courts)
    
    def get_current_matches(self) -> List[Dict]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã
        active_tournaments = self.get_current_active_tournaments()
        
        if not active_tournaments:
            return []
        
        # –ß–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∞–µ–º —á—Ç–æ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π
        print(f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã–π —Ç—É—Ä–Ω–∏—Ä: {active_tournaments[0]['name']}")
        print("üí° –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API")
        
        return []  # –ù–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–¥—É–º–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∏
    
    def _generate_preparation_matches(self, upcoming_tournaments: List[Dict]) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –ø–µ—Ä–µ–¥ —Ç—É—Ä–Ω–∏—Ä–æ–º"""
        matches = []
        for tournament in upcoming_tournaments:
            match = {
                "id": f"prep_{tournament['name'].lower().replace(' ', '_')}",
                "player1": "Carlos Alcaraz", 
                "player2": "Practice Partner",
                "tournament": f"Preparing for {tournament['name']}",
                "location": tournament["location"],
                "surface": tournament["surface"],
                "level": "Practice",
                "date": self.current_date.strftime("%Y-%m-%d"),
                "time": "TBD",
                "round": "Practice",
                "court": "Practice Court",
                "status": "preparation",
                "source": "universal_collector",
                "days_until": tournament["days_until"]
            }
            matches.append(match)
        
        return matches
    
    def _generate_training_matches(self) -> List[Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –º–∞—Ç—á–∏ –≤ –º–µ–∂—Å–µ–∑–æ–Ω—å–µ"""
        return [{
            "id": "training_session",
            "player1": "Jannik Sinner",
            "player2": "Sparring Partner", 
            "tournament": "Off-Season Training",
            "location": "Training Center",
            "surface": "Hard",
            "level": "Training",
            "date": self.current_date.strftime("%Y-%m-%d"),
            "time": "TBD",
            "round": "Training",
            "court": "Training Court",
            "status": "training",
            "source": "universal_collector"
        }]
    
    def _get_season_context(self) -> str:
        """–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–∑–æ–Ω–∞"""
        month = self.current_date.month
        
        if month in [1, 2]:
            return "Hard Court Season - Australian Summer"
        elif month in [3, 4, 5]:
            return "Clay Court Season - European Spring"  
        elif month in [6, 7]:
            return "Grass Court Season - Wimbledon Period"
        elif month in [8, 9]:
            return "Hard Court Season - US Open Series"
        elif month in [10, 11]:
            return "Indoor Season - Year End Finals"
        else:  # December
            return "Off Season - Preparation Period"
    
    def _get_tournament_status(self, tournament: Dict) -> str:
        """–°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–∞"""
        days_running = tournament.get("days_running", 0)
        days_remaining = tournament.get("days_remaining", 0)
        
        if days_running == 1:
            return "üöÄ Just Started"
        elif days_remaining <= 2:
            return "üèÅ Final Stages"
        elif days_running <= 3:
            return "üî• Early Rounds"
        else:
            return "‚ö° Main Draw"
    
    def get_summary(self) -> Dict:
        """–°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–∫—É—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é —Ç–µ–Ω–Ω–∏—Å–∞"""
        active = self.get_current_active_tournaments()
        upcoming = self.get_upcoming_tournaments(14)
        
        return {
            "current_date": self.current_date.strftime("%Y-%m-%d"),
            "season_context": self._get_season_context(),
            "active_tournaments": len(active),
            "active_tournament_names": [t["name"] for t in active],
            "upcoming_tournaments": len(upcoming),
            "next_major": self._get_next_major(),
            "matches_available": len(self.get_current_matches())
        }
    
    def _get_next_major(self) -> Optional[str]:
        """–°–ª–µ–¥—É—é—â–∏–π Grand Slam"""
        current_date = self.current_date.date()
        
        majors = [
            ("2025-01-12", "Australian Open"),
            ("2025-05-19", "French Open"), 
            ("2025-06-30", "Wimbledon"),
            ("2025-08-25", "US Open")
        ]
        
        for date_str, name in majors:
            major_date = datetime.strptime(date_str, "%Y-%m-%d").date()
            if major_date >= current_date:
                days_until = (major_date - current_date).days
                return f"{name} (in {days_until} days)"
        
        return "Australian Open 2026 (next year)"


class UniversalOddsCollector:
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–±–æ—Ä—â–∏–∫ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        # –ë–æ–ª–µ–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ (–∏—é–ª—å 2025)
        self.player_rankings = {
            # ATP Top 20
            "jannik sinner": 1, "carlos alcaraz": 2, "alexander zverev": 3,
            "daniil medvedev": 4, "novak djokovic": 5, "andrey rublev": 6,
            "casper ruud": 7, "holger rune": 8, "grigor dimitrov": 9,
            "stefanos tsitsipas": 10, "taylor fritz": 11, "tommy paul": 12,
            "ben shelton": 15, "frances tiafoe": 18, "felix auger-aliassime": 20,
            
            # WTA Top 20
            "aryna sabalenka": 1, "iga swiatek": 2, "coco gauff": 3,
            "jessica pegula": 4, "elena rybakina": 5, "qinwen zheng": 6,
            "jasmine paolini": 7, "emma navarro": 8, "daria kasatkina": 9,
            "barbora krejcikova": 10, "paula badosa": 11, "danielle collins": 12,
            "jelena ostapenko": 15, "madison keys": 18, "emma raducanu": 25,
            
            # –î—Ä—É–≥–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏
            "fabio fognini": 85, "arthur rinderknech": 45, "yannick hanfmann": 95,
            "jacob fearnley": 320, "joao fonseca": 145, "katie boulter": 28,
            "renata zarazua": 180, "caroline dolehide": 85, "carson branstine": 125
        }
    
    def get_player_ranking(self, player_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_rankings:
            return self.player_rankings[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, rank in self.player_rankings.items():
            if any(part in known_player for part in name_lower.split()):
                return rank
        
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if "practice" in name_lower or "sparring" in name_lower:
            return random.randint(100, 300)
        
        return random.randint(30, 80)  # –°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö
    
    def generate_realistic_odds(self, matches: List[Dict]) -> Dict[str, Dict]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
        odds_data = {}
        
        for match in matches:
            match_id = match["id"]
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
            p1_rank = self.get_player_ranking(match["player1"])
            p2_rank = self.get_player_ranking(match["player2"])
            
            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∫—Ä—ã—Ç–∏—è
            surface = match.get("surface", "Hard")
            surface_adjustments = {
                "Clay": {"specialists": ["rafael nadal", "carlos alcaraz"], "bonus": 0.1},
                "Grass": {"specialists": ["novak djokovic"], "bonus": 0.15},
                "Hard": {"specialists": ["daniil medvedev", "jannik sinner"], "bonus": 0.05}
            }
            
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rank_diff = p2_rank - p1_rank
            
            if rank_diff > 30:  # P1 –Ω–∞–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ
                base_p1_odds = 1.3 + (rank_diff * 0.01)
                base_p2_odds = 4.0 - (rank_diff * 0.02)
            elif rank_diff < -30:  # P2 –Ω–∞–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ  
                base_p1_odds = 4.0 + (abs(rank_diff) * 0.02)
                base_p2_odds = 1.3 + (abs(rank_diff) * 0.01)
            else:  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ
                base_p1_odds = 1.8 + (rank_diff * 0.01)
                base_p2_odds = 2.2 - (rank_diff * 0.01)
            
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –ø–æ–∫—Ä—ã—Ç–∏—è
            p1_name_lower = match["player1"].lower()
            p2_name_lower = match["player2"].lower()
            
            if surface in surface_adjustments:
                specialists = surface_adjustments[surface]["specialists"]
                bonus = surface_adjustments[surface]["bonus"]
                
                if any(spec in p1_name_lower for spec in specialists):
                    base_p1_odds *= (1 - bonus)
                    base_p2_odds *= (1 + bonus)
                elif any(spec in p2_name_lower for spec in specialists):
                    base_p1_odds *= (1 + bonus)
                    base_p2_odds *= (1 - bonus)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
            p1_odds = max(1.1, min(base_p1_odds, 10.0))
            p2_odds = max(1.1, min(base_p2_odds, 10.0))
            
            # –í—ã–±–∏—Ä–∞–µ–º –±—É–∫–º–µ–∫–µ—Ä–∞
            bookmakers = ["Bet365", "Pinnacle", "William Hill", "Unibet", "888Sport"]
            
            odds_data[match_id] = {
                "match_info": match,
                "best_markets": {
                    "winner": {
                        "player1": {
                            "odds": round(p1_odds, 2),
                            "bookmaker": random.choice(bookmakers)
                        },
                        "player2": {
                            "odds": round(p2_odds, 2),
                            "bookmaker": random.choice(bookmakers)
                        }
                    }
                },
                "market_info": {
                    "surface_factor": surface,
                    "ranking_difference": rank_diff,
                    "tournament_level": match.get("level", "Regular")
                }
            }
        
        return odds_data


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üåç UNIVERSAL TENNIS DATA COLLECTOR - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    collector = UniversalTennisDataCollector()
    odds_collector = UniversalOddsCollector()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
    summary = collector.get_summary()
    print(f"üìÖ –î–∞—Ç–∞: {summary['current_date']}")
    print(f"üèüÔ∏è –°–µ–∑–æ–Ω: {summary['season_context']}")
    print(f"üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {summary['active_tournaments']}")
    if summary['active_tournament_names']:
        print(f"üìã –¢–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã: {', '.join(summary['active_tournament_names'])}")
    print(f"üîú –°–ª–µ–¥—É—é—â–∏–π Grand Slam: {summary['next_major']}")
    print(f"üéæ –î–æ—Å—Ç—É–ø–Ω–æ –º–∞—Ç—á–µ–π: {summary['matches_available']}")
    
    print("\nüéæ –¢–ï–ö–£–©–ò–ï –ú–ê–¢–ß–ò:")
    print("-" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏
    current_matches = collector.get_current_matches()
    
    for i, match in enumerate(current_matches[:8], 1):
        status_emoji = {
            "live": "üî¥ LIVE",
            "upcoming": "‚è∞ Upcoming", 
            "preparation": "üèãÔ∏è Prep",
            "training": "üí™ Training"
        }
        
        status = status_emoji.get(match["status"], "üìÖ Scheduled")
        print(f"{i}. {match['player1']} vs {match['player2']}")
        print(f"   üèÜ {match['tournament']} ({match['level']})")
        print(f"   üìç {match['location']} ‚Ä¢ {match['surface']} ‚Ä¢ {match['round']}")
        print(f"   {status} ‚Ä¢ {match['date']} {match['time']}")
        
        if "season_context" in match:
            print(f"   üåç Context: {match['season_context']}")
        print()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    print("üí∞ –¢–ï–°–¢ –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–û–í:")
    print("-" * 30)
    
    odds = odds_collector.generate_realistic_odds(current_matches[:3])
    
    for match_id, odds_info in odds.items():
        match_info = odds_info["match_info"]
        winner_odds = odds_info["best_markets"]["winner"]
        
        print(f"üéæ {match_info['player1']} vs {match_info['player2']}")
        print(f"   üí∞ {winner_odds['player1']['odds']} vs {winner_odds['player2']['odds']}")
        print(f"   üìä Ranking diff: {odds_info['market_info']['ranking_difference']}")
        print()
    
    print("‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!")
    print("üåç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã!")