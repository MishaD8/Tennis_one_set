#!/usr/bin/env python3
"""
üéæ COMPLETE TENNIS PREDICTION & BETTING PIPELINE
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö, –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏ –ø–æ–∏—Å–∫–∞ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫
"""

import os
import sys
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import argparse
import logging
import json
import time
from typing import Dict, List, Optional, Tuple
import warnings

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ schedule —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏
try:
    import schedule
    SCHEDULE_AVAILABLE = True
except ImportError:
    SCHEDULE_AVAILABLE = False
    logging.warning("‚ö†Ô∏è –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ 'schedule' –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install schedule")

# –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π
try:
    from enhanced_data_collector import EnhancedTennisDataCollector
    from enhanced_predictor import EnhancedTennisPredictor, time_series_split_validation
    from enhanced_betting_system import (
        EnhancedTennisBettingSystem, OddsCollector, ValueBet, BettingMetrics,
        create_sample_matches_and_enhanced_odds, backtest_betting_strategy
    )
except ImportError as e:
    logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    logging.error("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª—ã enhanced_*.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–º –∂–µ –∫–∞—Ç–∞–ª–æ–≥–µ")
    sys.exit(1)

warnings.filterwarnings('ignore')

class TennisPipelineConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è pipeline"""
    
    def __init__(self, config_file: str = 'config.json'):
        self.config_file = config_file
        self.load_config()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        default_config = {
            "data_collection": {
                "update_frequency_hours": 24,
                "min_matches_for_training": 1000,
                "years_to_collect": ["2024", "2023", "2022", "2021", "2020"]
            },
            "model_training": {
                "retrain_frequency_days": 7,
                "validation_splits": 5,
                "min_model_performance": 0.65,
                "ensemble_models": ["neural_network", "xgboost", "random_forest"]
            },
            "betting_system": {
                "bankroll": 10000,
                "max_stake_percentage": 0.05,
                "min_confidence": 0.55,
                "min_edge": 0.02,
                "max_daily_stakes": 5
            },
            "notifications": {
                "telegram_bot_token": "",
                "telegram_chat_id": "",
                "email_notifications": False,
                "discord_webhook": ""
            },
            "api_keys": {
                "pinnacle_username": "",
                "pinnacle_password": "",
                "oddsapi_key": ""
            }
        }
        
        if os.path.exists(self.config_file):
            with open(self.config_file, 'r') as f:
                loaded_config = json.load(f)
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π
                self._merge_configs(default_config, loaded_config)
        
        self.config = default_config
        self.save_config()
    
    def _merge_configs(self, default: dict, loaded: dict):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π"""
        for key, value in loaded.items():
            if key in default:
                if isinstance(value, dict) and isinstance(default[key], dict):
                    self._merge_configs(default[key], value)
                else:
                    default[key] = value
    
    def save_config(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        with open(self.config_file, 'w') as f:
            json.dump(self.config, f, indent=2)
    
    def get(self, path: str, default=None):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ –ø—É—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'data_collection.update_frequency_hours')"""
        keys = path.split('.')
        value = self.config
        
        for key in keys:
            if isinstance(value, dict) and key in value:
                value = value[key]
            else:
                return default
        
        return value

class TennisNotificationSystem:
    """–°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, config: TennisPipelineConfig):
        self.config = config
        self.telegram_token = config.get('notifications.telegram_bot_token')
        self.telegram_chat_id = config.get('notifications.telegram_chat_id')
        self.discord_webhook = config.get('notifications.discord_webhook')
    
    def send_telegram_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
        if not self.telegram_token or not self.telegram_chat_id:
            return
        
        try:
            import requests
            url = f"https://api.telegram.org/bot{self.telegram_token}/sendMessage"
            data = {
                'chat_id': self.telegram_chat_id,
                'text': message,
                'parse_mode': 'Markdown'
            }
            requests.post(url, data=data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def send_discord_message(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Discord"""
        if not self.discord_webhook:
            return
        
        try:
            import requests
            data = {'content': message}
            requests.post(self.discord_webhook, json=data)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Discord —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def notify_value_bets(self, value_bets: List[ValueBet]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–∫–∞—Ö"""
        if not value_bets:
            return
        
        message = f"üéæ *–ù–ê–ô–î–ï–ù–´ –¶–ï–ù–ù–´–ï –°–¢–ê–í–ö–ò!*\n\n"
        
        for i, bet in enumerate(value_bets[:5], 1):  # –¢–æ–ø-5
            message += f"*{i}. {bet.player_name}* vs {bet.opponent_name}\n"
            message += f"üí∞ –ö–æ—ç—Ñ: {bet.odds:.2f} | EV: {bet.expected_value:.3f}\n"
            message += f"üíµ –°—Ç–∞–≤–∫–∞: ${bet.recommended_stake:.2f}\n"
            message += f"üèüÔ∏è {bet.tournament} | {bet.match_date}\n\n"
        
        message += f"üìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(value_bets)} —Å—Ç–∞–≤–æ–∫"
        
        self.send_telegram_message(message)
        self.send_discord_message(message)
    
    def notify_performance_update(self, metrics: BettingMetrics):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        message = f"üìà *–û–ë–ù–û–í–õ–ï–ù–ò–ï –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò*\n\n"
        message += f"üí∞ –ü—Ä–∏–±—ã–ª—å: ${metrics.total_profit:.2f}\n"
        message += f"üìä ROI: {metrics.roi:.2f}%\n"
        message += f"üéØ –í–∏–Ω—Ä–µ–π—Ç: {metrics.win_rate:.1%}\n"
        message += f"üìà Sharpe: {metrics.sharpe_ratio:.2f}\n"
        message += f"üìâ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown:.2f}%"
        
        self.send_telegram_message(message)

class TennisPipeline:
    """–ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å pipeline"""
    
    def __init__(self, config_file: str = 'config.json'):
        self.config = TennisPipelineConfig(config_file)
        self.setup_logging()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.data_collector = EnhancedTennisDataCollector()
        self.predictor = EnhancedTennisPredictor()
        self.betting_system = None  # –ë—É–¥–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        self.odds_collector = OddsCollector()
        self.notification_system = TennisNotificationSystem(self.config)
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ pipeline
        self.last_data_update = None
        self.last_model_training = None
        self.model_performance = {}
        self.betting_history = []
        
        logging.info("üéæ Tennis Pipeline –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('tennis_pipeline.log'),
                logging.StreamHandler(sys.stdout)
            ]
        )
    
    def update_data(self, force: bool = False) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            update_hours = self.config.get('data_collection.update_frequency_hours', 24)
            
            if not force and self.last_data_update:
                hours_since_update = (datetime.now() - self.last_data_update).total_seconds() / 3600
                if hours_since_update < update_hours:
                    logging.info(f"‚è∞ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã {hours_since_update:.1f} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return False
            
            logging.info("üìä –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
            
            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            enhanced_df = self.data_collector.download_and_process_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
            min_matches = self.config.get('data_collection.min_matches_for_training', 1000)
            if len(enhanced_df) < min_matches:
                logging.warning(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: {len(enhanced_df)} < {min_matches}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
            self.data_collector.save_enhanced_data(enhanced_df)
            self.last_data_update = datetime.now()
            
            logging.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {len(enhanced_df)} –∑–∞–ø–∏—Å–µ–π")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False
    
    def train_models(self, force: bool = False) -> bool:
        """–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ
            retrain_days = self.config.get('model_training.retrain_frequency_days', 7)
            
            if not force and self.last_model_training:
                days_since_training = (datetime.now() - self.last_model_training).days
                if days_since_training < retrain_days:
                    logging.info(f"üß† –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã {days_since_training} –¥–Ω–µ–π –Ω–∞–∑–∞–¥, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return True
            
            logging.info("üèãÔ∏è‚Äç‚ôÇÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_path = os.path.join(self.data_collector.data_dir, 'enhanced_tennis_dataset.csv')
            if not os.path.exists(data_path):
                logging.error(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
                return False
            
            df = pd.read_csv(data_path)
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            df['match_date'] = pd.to_datetime(df['match_date'])
            cutoff_date = df['match_date'].quantile(0.8)
            
            train_df = df[df['match_date'] < cutoff_date]
            test_df = df[df['match_date'] >= cutoff_date]
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            X_train = self.predictor.prepare_features(train_df)
            y_train = train_df['won_at_least_one_set']
            
            X_test = self.predictor.prepare_features(test_df)
            y_test = test_df['won_at_least_one_set']
            
            # –†–∞–∑–¥–µ–ª—è–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            from sklearn.model_selection import train_test_split
            X_train_split, X_val_split, y_train_split, y_val_split = train_test_split(
                X_train, y_train, test_size=0.2, random_state=42, stratify=y_train
            )
            
            # –û–±—É—á–∞–µ–º –∞–Ω—Å–∞–º–±–ª—å
            performance = self.predictor.train_ensemble_models(
                X_train_split, y_train_split, X_val_split, y_val_split
            )
            
            # –û—Ü–µ–Ω–∏–≤–∞–µ–º –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            test_results = self.predictor.evaluate_models(X_test, y_test)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏
            min_performance = self.config.get('model_training.min_model_performance', 0.65)
            best_auc = max([results['auc'] for results in test_results.values()])
            
            if best_auc < min_performance:
                logging.warning(f"‚ö†Ô∏è –ù–∏–∑–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–æ–¥–µ–ª–∏: AUC = {best_auc:.3f} < {min_performance}")
                return False
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª–∏
            self.predictor.save_models()
            self.model_performance = test_results
            self.last_model_training = datetime.now()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —Å—Ç–∞–≤–æ–∫
            bankroll = self.config.get('betting_system.bankroll', 10000)
            self.betting_system = EnhancedTennisBettingSystem(self.predictor, bankroll)
            
            logging.info(f"‚úÖ –ú–æ–¥–µ–ª–∏ –æ–±—É—á–µ–Ω—ã: –ª—É—á—à–∏–π AUC = {best_auc:.3f}")
            return True
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π: {e}")
            return False
    
    def find_daily_bets(self) -> List[ValueBet]:
        """–ü–æ–∏—Å–∫ —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
        try:
            if not self.betting_system:
                logging.error("‚ùå –°–∏—Å—Ç–µ–º–∞ —Å—Ç–∞–≤–æ–∫ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                return []
            
            logging.info("üîç –ü–æ–∏—Å–∫ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è...")
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏—Ö –º–∞—Ç—á–µ–π
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
            matches_df, enhanced_odds = create_sample_matches_and_enhanced_odds()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –º–∞—Ç—á–∏
            today = datetime.now().strftime('%Y-%m-%d')
            today_matches = matches_df[matches_df['match_date'] == today]
            
            if len(today_matches) == 0:
                logging.info("üìÖ –ù–µ—Ç –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
                return []
            
            # –ò—â–µ–º —Ü–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            value_bets = self.betting_system.find_value_bets(today_matches, enhanced_odds)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫ –≤ –¥–µ–Ω—å
            max_daily_stakes = self.config.get('betting_system.max_daily_stakes', 5)
            value_bets = value_bets[:max_daily_stakes]
            
            if value_bets:
                logging.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(value_bets)} —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                self.notification_system.notify_value_bets(value_bets)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫–∏
                self.betting_system.save_betting_data(value_bets)
            else:
                logging.info("üìä –¶–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            
            return value_bets
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–≤–æ–∫: {e}")
            return []
    
    def update_performance(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–∞–≤–æ–∫
            betting_dir = "betting_data"
            if not os.path.exists(betting_dir):
                return
            
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å—Ç–∞–≤–æ–∫
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            
            sample_metrics = BettingMetrics(
                total_bets=50,
                total_profit=250.0,
                roi=5.2,
                win_rate=0.58,
                average_odds=1.85,
                sharpe_ratio=1.2,
                max_drawdown=-8.5,
                confidence_breakdown={
                    "–í—ã—Å–æ–∫–∞—è": {"count": 20, "profit": 180.0, "win_rate": 0.65},
                    "–°—Ä–µ–¥–Ω—è—è": {"count": 25, "profit": 70.0, "win_rate": 0.52},
                    "–ù–∏–∑–∫–∞—è": {"count": 5, "profit": 0.0, "win_rate": 0.40}
                }
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (—Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é)
            if datetime.now().weekday() == 0:  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
                self.notification_system.notify_performance_update(sample_metrics)
            
            logging.info(f"üìà –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞: ROI = {sample_metrics.roi:.2f}%")
            
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    def run_daily_pipeline(self):
        """–ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ pipeline"""
        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ pipeline")
        
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            data_updated = self.update_data()
            
            # 2. –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –∏–ª–∏ –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–∏–ª–∏—Å—å
            if data_updated or not self.last_model_training:
                model_trained = self.train_models()
                if not model_trained:
                    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫ —Å—Ç–∞–≤–æ–∫")
                    return
            
            # 3. –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            if not self.betting_system:
                try:
                    self.predictor.load_models()
                    bankroll = self.config.get('betting_system.bankroll', 10000)
                    self.betting_system = EnhancedTennisBettingSystem(self.predictor, bankroll)
                    logging.info("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–æ–≤")
                except Exception as e:
                    logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏: {e}")
                    return
            
            # 4. –ò—â–µ–º —Ü–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
            value_bets = self.find_daily_bets()
            
            # 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.update_performance()
            
            logging.info("‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π pipeline –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logging.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ pipeline: {e}")
            import traceback
            traceback.print_exc()
    
    def setup_scheduler(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á"""
        if not SCHEDULE_AVAILABLE:
            logging.error("‚ùå –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ schedule –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ó–∞–ø—É—Å–∫ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ.")
            return False
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∑–∞–ø—É—Å–∫ –≤ 08:00
        schedule.every().day.at("08:00").do(self.run_daily_pipeline)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
        schedule.every(6).hours.do(self.update_data)
        
        # –ü–æ–∏—Å–∫ —Å—Ç–∞–≤–æ–∫ –∫–∞–∂–¥—ã–µ 2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å –º–∞—Ç—á–µ–π
        schedule.every(2).hours.do(self.find_daily_bets)
        
        logging.info("‚è∞ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return True
    
    def run_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not SCHEDULE_AVAILABLE:
            logging.error("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –±–µ–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ schedule")
            logging.info("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ: pip install schedule")
            return
        
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
        self.run_daily_pipeline()
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        while True:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except KeyboardInterrupt:
                logging.info("‚èπÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    
    def run_manual_mode(self):
        """–†—É—á–Ω–æ–π —Ä–µ–∂–∏–º –±–µ–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logging.info("üîÑ –ó–∞–ø—É—Å–∫ –≤ —Ä—É—á–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
        
        while True:
            try:
                print("\n" + "="*50)
                print("üéæ TENNIS PIPELINE - –†–£–ß–ù–û–ô –†–ï–ñ–ò–ú")
                print("="*50)
                print("1. –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                print("2. –û–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")
                print("3. –ù–∞–π—Ç–∏ —Ü–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏")
                print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π pipeline")
                print("5. –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
                print("0. –í—ã—Ö–æ–¥")
                
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-5): ").strip()
                
                if choice == "0":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == "1":
                    self.update_data(force=True)
                elif choice == "2":
                    self.train_models(force=True)
                elif choice == "3":
                    self.find_daily_bets()
                elif choice == "4":
                    self.run_daily_pipeline()
                elif choice == "5":
                    self.show_statistics()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                break
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    def show_statistics(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê PIPELINE")
        print("-" * 30)
        
        if self.last_data_update:
            print(f"üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö: {self.last_data_update.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("üìÖ –î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å")
        
        if self.last_model_training:
            print(f"üß† –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏: {self.last_model_training.strftime('%Y-%m-%d %H:%M')}")
        else:
            print("üß† –ú–æ–¥–µ–ª–∏ –µ—â–µ –Ω–µ –æ–±—É—á–∞–ª–∏—Å—å")
        
        if self.model_performance:
            print("\nüéØ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π:")
            for model_name, metrics in self.model_performance.items():
                print(f"  {model_name}: AUC = {metrics['auc']:.3f}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        print(f"\nüìÅ –°—Ç–∞—Ç—É—Å —Ñ–∞–π–ª–æ–≤:")
        data_file = os.path.join(self.data_collector.data_dir, 'enhanced_tennis_dataset.csv')
        print(f"  –î–∞–Ω–Ω—ã–µ: {'‚úÖ' if os.path.exists(data_file) else '‚ùå'}")
        
        models_file = os.path.join(self.predictor.models_dir, 'ensemble_models.pkl')
        print(f"  –ú–æ–¥–µ–ª–∏: {'‚úÖ' if os.path.exists(models_file) else '‚ùå'}")

def create_sample_config():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    config = TennisPipelineConfig()
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    config.config['betting_system']['bankroll'] = 5000
    config.config['model_training']['min_model_performance'] = 0.60
    config.config['notifications']['telegram_bot_token'] = "YOUR_BOT_TOKEN_HERE"
    config.config['notifications']['telegram_chat_id'] = "YOUR_CHAT_ID_HERE"
    
    config.save_config()
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª config.json —Å –ø—Ä–∏–º–µ—Ä–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ pipeline"""
    parser = argparse.ArgumentParser(description='üéæ Tennis Prediction & Betting Pipeline')
    
    parser.add_argument('--mode', choices=['setup', 'train', 'predict', 'backtest', 'run', 'manual'], 
                       default='manual', help='–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã')
    parser.add_argument('--config', default='config.json', help='–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    parser.add_argument('--force-update', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö')
    parser.add_argument('--force-train', action='store_true', help='–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ')
    
    args = parser.parse_args()
    
    print("üéæ TENNIS PREDICTION & BETTING PIPELINE")
    print("=" * 70)
    print("üöÄ –ü–æ–ª–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è:")
    print("‚Ä¢ –°–±–æ—Ä–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –û–±—É—á–µ–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è ML –º–æ–¥–µ–ª–µ–π")
    print("‚Ä¢ –ü–æ–∏—Å–∫–∞ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
    print("‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 70)
    
    if args.mode == 'setup':
        print("\nüîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        create_sample_config()
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        for directory in ['tennis_data_enhanced', 'tennis_models', 'betting_data']:
            if not os.path.exists(directory):
                os.makedirs(directory)
                print(f"üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        
        print("\n‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("üìù –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ config.json –¥–ª—è –≤–∞—à–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tennis_pipeline.py --mode train")
        return
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pipeline
    pipeline = TennisPipeline(args.config)
    
    if args.mode == 'train':
        print("\nüèãÔ∏è‚Äç‚ôÇÔ∏è –†–µ–∂–∏–º –æ–±—É—á–µ–Ω–∏—è...")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö...")
        pipeline.update_data(force=args.force_update)
        
        # –û–±—É—á–∞–µ–º –º–æ–¥–µ–ª–∏
        print("üß† –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π...")
        success = pipeline.train_models(force=args.force_train)
        
        if success:
            print("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
            print("üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tennis_pipeline.py --mode predict")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
    
    elif args.mode == 'predict':
        print("\nüîç –†–µ–∂–∏–º –ø–æ–∏—Å–∫–∞ —Å—Ç–∞–≤–æ–∫...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            pipeline.predictor.load_models()
            bankroll = pipeline.config.get('betting_system.bankroll', 10000)
            pipeline.betting_system = EnhancedTennisBettingSystem(pipeline.predictor, bankroll)
            
            # –ò—â–µ–º —Å—Ç–∞–≤–∫–∏
            value_bets = pipeline.find_daily_bets()
            
            if value_bets:
                print(f"\n‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(value_bets)} —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫:")
                for i, bet in enumerate(value_bets, 1):
                    print(f"{i}. {bet.player_name} vs {bet.opponent_name}")
                    print(f"   üí∞ {bet.odds:.2f} | EV: {bet.expected_value:.3f} | ${bet.recommended_stake:.2f}")
            else:
                print("üìä –¶–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    elif args.mode == 'backtest':
        print("\nüé≤ –†–µ–∂–∏–º –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞...")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
            pipeline.predictor.load_models()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±—ç–∫—Ç–µ—Å—Ç
            metrics = backtest_betting_strategy(pipeline.predictor, '2024-01-01', '2024-06-30')
            
            print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞:")
            print(f"‚Ä¢ –°—Ç–∞–≤–æ–∫: {metrics.total_bets}")
            print(f"‚Ä¢ –ü—Ä–∏–±—ã–ª—å: ${metrics.total_profit:.2f}")
            print(f"‚Ä¢ ROI: {metrics.roi:.2f}%")
            print(f"‚Ä¢ –í–∏–Ω—Ä–µ–π—Ç: {metrics.win_rate:.1%}")
            print(f"‚Ä¢ Sharpe Ratio: {metrics.sharpe_ratio:.2f}")
            print(f"‚Ä¢ –ú–∞–∫—Å. –ø—Ä–æ—Å–∞–¥–∫–∞: {metrics.max_drawdown:.2f}%")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –±—ç–∫—Ç–µ—Å—Ç–∏–Ω–≥–∞: {e}")
    
    elif args.mode == 'run':
        print("\nüîÑ –†–µ–∂–∏–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞...")
        
        if pipeline.setup_scheduler():
            print("‚è∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
            print("üöÄ Pipeline –∑–∞–ø—É—â–µ–Ω!")
            print("üì± –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–∏ —Ü–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫")
            print("‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            try:
                pipeline.run_scheduler()
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è Pipeline –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∂–∏–º --mode manual")
    
    elif args.mode == 'manual':
        print("\nüîÑ –†—É—á–Ω–æ–π —Ä–µ–∂–∏–º...")
        pipeline.run_manual_mode()

def run_web_interface():
    """–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""
    try:
        from flask import Flask, render_template, jsonify
        import json
        
        app = Flask(__name__)
        
        @app.route('/')
        def index():
            return """
            <!DOCTYPE html>
            <html>
            <head>
                <title>Tennis Pipeline Dashboard</title>
                <meta charset="utf-8">
                <style>
                    body { font-family: Arial, sans-serif; margin: 40px; }
                    .card { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; }
                    .status { font-size: 18px; }
                </style>
            </head>
            <body>
                <h1>üéæ Tennis Pipeline Dashboard</h1>
                <div class="card">
                    <h2>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</h2>
                    <div id="status" class="status">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                </div>
                <script>
                    function updateStatus() {
                        fetch('/api/status')
                            .then(response => response.json())
                            .then(data => {
                                document.getElementById('status').innerHTML = 
                                    '<p>üìÖ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ' + data.last_update + '</p>' +
                                    '<p>üß† –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: ' + data.model_performance + '</p>' +
                                    '<p>üí∞ –¶–µ–Ω–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ —Å–µ–≥–æ–¥–Ω—è: ' + data.today_bets + '</p>' +
                                    '<p>üìä ROI: ' + data.roi + '%</p>';
                            })
                            .catch(error => {
                                document.getElementById('status').innerHTML = 
                                    '<p style="color: red;">‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>';
                            });
                    }
                    
                    updateStatus();
                    setInterval(updateStatus, 30000); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                </script>
            </body>
            </html>
            """
        
        @app.route('/api/status')
        def api_status():
            return jsonify({
                'last_update': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
                'model_performance': 'AUC: 0.72',
                'today_bets': 3,
                'roi': 7.5
            })
        
        print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:5000")
        app.run(host='0.0.0.0', port=5000, debug=False)
        
    except ImportError:
        print("‚ùå Flask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install flask")

if __name__ == "__main__":
    main()