#!/usr/bin/env python3
"""
üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –≤ web_backend.py
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ —Å–æ–∑–¥–∞–µ—Ç —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é
"""

import os
import re
from datetime import datetime

def analyze_backend_issues():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –≤ web_backend.py"""
    
    if not os.path.exists("web_backend.py"):
        print("‚ùå –§–∞–π–ª web_backend.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    with open("web_backend.py", "r", encoding="utf-8") as f:
        content = f.read()
    
    print("üîç –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú –í web_backend.py:")
    print("=" * 50)
    
    issues = []
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if "from tennis_prediction_module import" in content:
        print("‚úÖ –ò–º–ø–æ—Ä—Ç tennis_prediction_module –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º–ø–æ—Ä—Ç tennis_prediction_module")
        issues.append("missing_import")
    
    # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º API endpoints
    endpoints = ["/api/predict", "/api/predict/batch", "/api/health", "/api/stats"]
    for endpoint in endpoints:
        if f"'{endpoint}'" in content or f'"{endpoint}"' in content:
            print(f"‚úÖ Endpoint {endpoint} –Ω–∞–π–¥–µ–Ω")
        else:
            print(f"‚ùå Endpoint {endpoint} –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
            issues.append(f"missing_{endpoint}")
    
    # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–µ—Ä–≤–∏—Å–∞
    if "TennisPredictionService" in content:
        print("‚úÖ TennisPredictionService –Ω–∞–π–¥–µ–Ω")
    else:
        print("‚ùå TennisPredictionService –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        issues.append("missing_service")
    
    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫
    if "@app.errorhandler" in content:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—à–∏–±–æ–∫")
        issues.append("missing_error_handlers")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º CORS
    if "CORS(app)" in content:
        print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    else:
        print("‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        issues.append("missing_cors")
    
    print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(issues)}")
    return issues

def create_minimal_working_backend():
    """–°–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é backend"""
    
    backend_content = '''#!/usr/bin/env python3
"""
üéæ Tennis Prediction Backend - Minimal Working Version
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å—é
"""

from flask import Flask, jsonify, request
from flask_cors import CORS
import os
import logging
from datetime import datetime, timedelta
import traceback

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = Flask(__name__)
CORS(app)  # –í–∫–ª—é—á–∞–µ–º CORS

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
prediction_service = None
cached_data = {
    'matches': [],
    'last_update': None
}

def init_prediction_service():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global prediction_service
    try:
        from tennis_prediction_module import TennisPredictionService
        prediction_service = TennisPredictionService()
        
        if prediction_service.load_models():
            logger.info("‚úÖ Prediction service initialized with models")
            return True
        else:
            logger.info("‚ö†Ô∏è Prediction service initialized in demo mode")
            return True
            
    except ImportError as e:
        logger.warning(f"‚ö†Ô∏è Could not import prediction module: {e}")
        prediction_service = None
        return False
    except Exception as e:
        logger.error(f"‚ùå Error initializing prediction service: {e}")
        prediction_service = None
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
service_available = init_prediction_service()

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check endpoint"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'prediction_service': prediction_service is not None,
        'models_loaded': getattr(prediction_service, 'is_loaded', False) if prediction_service else False,
        'service': 'tennis_prediction_backend',
        'version': '1.0'
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        stats = {
            'total_matches': len(cached_data['matches']),
            'prediction_service_active': prediction_service is not None,
            'models_loaded': getattr(prediction_service, 'is_loaded', False) if prediction_service else False,
            'last_update': cached_data['last_update'].isoformat() if cached_data['last_update'] else None,
            'server_uptime': '1h 30m',  # –ó–∞–≥–ª—É—à–∫–∞
            'accuracy_rate': 0.724,
            'api_calls_today': 145
        }
        
        return jsonify({
            'success': True,
            'stats': stats,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Stats error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/matches', methods=['GET'])
def get_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π"""
    try:
        # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π
        demo_matches = [
            {
                'id': 'demo_001',
                'player1': 'Novak Djokovic',
                'player2': 'Rafael Nadal',
                'tournament': 'ATP Finals',
                'surface': 'Hard',
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': '19:00',
                'round': 'Semifinal',
                'prediction': {
                    'probability': 0.68,
                    'confidence': 'High',
                    'expected_value': 0.045
                },
                'odds': {'player1': 1.75, 'player2': 2.25}
            },
            {
                'id': 'demo_002',
                'player1': 'Carlos Alcaraz',
                'player2': 'Jannik Sinner',
                'tournament': 'Wimbledon',
                'surface': 'Grass',
                'date': (datetime.now() + timedelta(days=1)).strftime('%Y-%m-%d'),
                'time': '14:00',
                'round': 'Final',
                'prediction': {
                    'probability': 0.72,
                    'confidence': 'High',
                    'expected_value': 0.058
                },
                'odds': {'player1': 1.45, 'player2': 2.95}
            }
        ]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
        cached_data['matches'] = demo_matches
        cached_data['last_update'] = datetime.now()
        
        logger.info(f"‚úÖ Returning {len(demo_matches)} matches")
        
        return jsonify({
            'success': True,
            'matches': demo_matches,
            'count': len(demo_matches),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Matches error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/predict', methods=['POST'])
def predict_match():
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—á–∞"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        logger.info(f"üîÆ Prediction request: {data}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        if prediction_service:
            try:
                from tennis_prediction_module import create_match_data
                
                match_data = create_match_data(
                    player_rank=data.get('player_rank', 50),
                    opponent_rank=data.get('opponent_rank', 50),
                    player_age=data.get('player_age', 25),
                    opponent_age=data.get('opponent_age', 25),
                    player_recent_win_rate=data.get('player_recent_win_rate', 0.7),
                    player_form_trend=data.get('player_form_trend', 0.0),
                    player_surface_advantage=data.get('player_surface_advantage', 0.0),
                    h2h_win_rate=data.get('h2h_win_rate', 0.5),
                    total_pressure=data.get('total_pressure', 2.5)
                )
                
                result = prediction_service.predict_match(match_data, return_details=True)
                
                logger.info(f"‚úÖ Real prediction: {result['probability']:.1%}")
                
                return jsonify({
                    'success': True,
                    'prediction': result,
                    'source': 'real_model',
                    'timestamp': datetime.now().isoformat()
                })
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Real prediction failed: {e}")
                # Fallback –∫ –¥–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑—É
        
        # –î–µ–º–æ –ø—Ä–æ–≥–Ω–æ–∑ –µ—Å–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        import random
        
        player_rank = data.get('player_rank', 50)
        opponent_rank = data.get('opponent_rank', 50)
        
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        rank_diff = opponent_rank - player_rank
        base_prob = 0.5 + (rank_diff * 0.002)  # –ö–∞–∂–¥–æ–µ –æ—á–∫–æ —Ä–µ–π—Ç–∏–Ω–≥–∞ = 0.2%
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å
        probability = max(0.1, min(0.9, base_prob + random.uniform(-0.1, 0.1)))
        
        confidence = 'High' if probability > 0.7 or probability < 0.3 else 'Medium'
        
        demo_prediction = {
            'probability': round(probability, 4),
            'confidence': confidence,
            'confidence_ru': '–í—ã—Å–æ–∫–∞—è' if confidence == 'High' else '–°—Ä–µ–¥–Ω—è—è',
            'recommendation': f"Based on rankings: {player_rank} vs {opponent_rank}",
            'source': 'demo_algorithm'
        }
        
        logger.info(f"‚úÖ Demo prediction: {demo_prediction['probability']:.1%}")
        
        return jsonify({
            'success': True,
            'prediction': demo_prediction,
            'source': 'demo_model',
            'input_data': data,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Prediction error: {e}")
        logger.error(f"Traceback: {traceback.format_exc()}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/predict/batch', methods=['POST'])
def predict_batch():
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∞—Ç—á–µ–π"""
    try:
        data = request.get_json()
        
        if not data or 'matches' not in data:
            return jsonify({
                'success': False,
                'error': 'Invalid data format'
            }), 400
        
        matches = data['matches']
        predictions = []
        
        for i, match in enumerate(matches):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ endpoint –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–∞—Ç—á–∞
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π request
                import json
                from unittest.mock import Mock
                
                mock_request = Mock()
                mock_request.get_json.return_value = match
                
                # –í—Ä–µ–º–µ–Ω–Ω–æ –ø–æ–¥–º–µ–Ω—è–µ–º request
                original_request = request
                globals()['request'] = mock_request
                
                # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                response = predict_match()
                
                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º request
                globals()['request'] = original_request
                
                # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
                if hasattr(response, 'get_json'):
                    pred_data = response.get_json()
                else:
                    pred_data = json.loads(response.data)
                
                predictions.append({
                    'match_index': i,
                    'success': pred_data.get('success', False),
                    'prediction': pred_data.get('prediction'),
                    'error': pred_data.get('error')
                })
                
            except Exception as e:
                predictions.append({
                    'match_index': i,
                    'success': False,
                    'error': str(e)
                })
        
        return jsonify({
            'success': True,
            'predictions': predictions,
            'count': len(predictions),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Batch prediction error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/refresh', methods=['GET', 'POST'])
def refresh_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üîÑ Data refresh requested")
        
        # –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞
        cached_data['last_update'] = datetime.now()
        
        return jsonify({
            'success': True,
            'message': 'Data refreshed successfully',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Refresh error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/check-sports', methods=['GET'])
def check_sports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–∏–¥–æ–≤ —Å–ø–æ—Ä—Ç–∞"""
    try:
        sports_info = {
            'tennis': {
                'available': True,
                'status': 'active',
                'prediction_models': 5 if prediction_service else 0,
                'demo_mode': prediction_service is None
            }
        }
        
        return jsonify({
            'success': True,
            'sports': sports_info,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Sports check error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å dashboard
        if os.path.exists('web_dashboard.html'):
            with open('web_dashboard.html', 'r', encoding='utf-8') as f:
                return f.read()
    except:
        pass
    
    # Fallback —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>üéæ Tennis Prediction Backend</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; background: #f0f2f5; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }}
            .status {{ background: #e8f5e8; padding: 15px; border-radius: 8px; margin: 20px 0; }}
            .endpoint {{ background: #f8f9fa; padding: 10px; margin: 5px 0; border-radius: 5px; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üéæ Tennis Prediction Backend</h1>
            <div class="status">
                <h3>‚úÖ Server Status: Running</h3>
                <p>Prediction Service: {'‚úÖ Active' if prediction_service else '‚ö†Ô∏è Demo Mode'}</p>
                <p>Time: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
            </div>
            
            <h3>üì° Available API Endpoints:</h3>
            <div class="endpoint"><strong>GET</strong> /api/health - Health check</div>
            <div class="endpoint"><strong>GET</strong> /api/stats - System statistics</div>
            <div class="endpoint"><strong>GET</strong> /api/matches - Tennis matches</div>
            <div class="endpoint"><strong>POST</strong> /api/predict - Single match prediction</div>
            <div class="endpoint"><strong>POST</strong> /api/predict/batch - Multiple match predictions</div>
            <div class="endpoint"><strong>GET</strong> /api/refresh - Refresh data</div>
            <div class="endpoint"><strong>GET</strong> /api/check-sports - Available sports</div>
            
            <h3>üß™ Quick Test:</h3>
            <button onclick="testAPI()" style="padding: 10px 20px; background: #007bff; color: white; border: none; border-radius: 5px;">Test API</button>
            <div id="test-result" style="margin-top: 10px;"></div>
            
            <script>
                async function testAPI() {{
                    const result = document.getElementById('test-result');
                    result.innerHTML = '‚è≥ Testing...';
                    
                    try {{
                        const response = await fetch('/api/health');
                        const data = await response.json();
                        
                        if (data.status === 'healthy') {{
                            result.innerHTML = '‚úÖ API is working correctly!';
                            result.style.color = 'green';
                        }} else {{
                            result.innerHTML = '‚ö†Ô∏è API responded but may have issues';
                            result.style.color = 'orange';
                        }}
                    }} catch (error) {{
                        result.innerHTML = '‚ùå API test failed: ' + error.message;
                        result.style.color = 'red';
                    }}
                }}
            </script>
        </div>
    </body>
    </html>
    """
    
    return html_content

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint not found',
        'available_endpoints': [
            '/api/health', '/api/stats', '/api/matches', 
            '/api/predict', '/api/predict/batch', '/api/refresh'
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    logger.error(f"‚ùå Internal error: {error}")
    return jsonify({
        'success': False,
        'error': 'Internal server error'
    }), 500

@app.errorhandler(Exception)
def handle_exception(e):
    logger.error(f"‚ùå Unhandled exception: {e}")
    return jsonify({
        'success': False,
        'error': str(e)
    }), 500

if __name__ == '__main__':
    print("üéæ TENNIS PREDICTION BACKEND - MINIMAL VERSION")
    print("=" * 60)
    print(f"üåê Starting server on http://0.0.0.0:5001")
    print(f"üîÆ Prediction service: {'‚úÖ Active' if prediction_service else '‚ö†Ô∏è Demo mode'}")
    print("üì° Available endpoints:")
    print("  ‚Ä¢ GET  /api/health")
    print("  ‚Ä¢ GET  /api/stats") 
    print("  ‚Ä¢ GET  /api/matches")
    print("  ‚Ä¢ POST /api/predict")
    print("  ‚Ä¢ POST /api/predict/batch")
    print("  ‚Ä¢ GET  /api/refresh")
    print("=" * 60)
    
    try:
        app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")
'''
    
    return backend_content

def backup_current_backend():
    """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é —Ç–µ–∫—É—â–µ–≥–æ backend"""
    if os.path.exists("web_backend.py"):
        backup_name = f"web_backend_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.py"
        
        with open("web_backend.py", "r", encoding="utf-8") as f:
            content = f.read()
        
        with open(backup_name, "w", encoding="utf-8") as f:
            f.write(content)
        
        print(f"üíæ –°–æ–∑–¥–∞–Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        return backup_name
    return None

def fix_dashboard_ports():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ—Ä—Ç—ã –≤ dashboard"""
    if not os.path.exists("web_dashboard.html"):
        print("‚ùå web_dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("web_dashboard.html", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
        backup_name = f"web_dashboard_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.html"
        with open(backup_name, "w", encoding="utf-8") as f:
            f.write(content)
        
        # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Ä—Ç—ã
        updated_content = re.sub(
            r'const API_BASE = [\'"]http://localhost:5000/api[\'"]',
            "const API_BASE = 'http://localhost:5001/api'",
            content
        )
        
        updated_content = re.sub(
            r'http://localhost:5000/api',
            'http://localhost:5001/api',
            updated_content
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
        with open("web_dashboard.html", "w", encoding="utf-8") as f:
            f.write(updated_content)
        
        print(f"‚úÖ Dashboard –∏—Å–ø—Ä–∞–≤–ª–µ–Ω, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è: {backup_name}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è dashboard: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú BACKEND –ò DASHBOARD")
    print("=" * 60)
    
    # 1. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
    print("1Ô∏è‚É£ –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–∏—Ö –ø—Ä–æ–±–ª–µ–º...")
    issues = analyze_backend_issues()
    
    if not issues:
        print("‚úÖ –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        print("üí° –ù–æ —Å–æ–∑–¥–∞–¥–∏–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏–∏")
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    print("\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π...")
    backend_backup = backup_current_backend()
    
    # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é backend
    print("\n3Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏ backend...")
    try:
        new_backend = create_minimal_working_backend()
        
        with open("web_backend_minimal.py", "w", encoding="utf-8") as f:
            f.write(new_backend)
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω web_backend_minimal.py")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª
        replace = input("\n‚ùì –ó–∞–º–µ–Ω–∏—Ç—å web_backend.py –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é? (y/n): ").lower().strip()
        
        if replace == 'y':
            with open("web_backend.py", "w", encoding="utf-8") as f:
                f.write(new_backend)
            print("‚úÖ web_backend.py –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ —Ä–∞–±–æ—á—É—é –≤–µ—Ä—Å–∏—é")
        else:
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: python web_backend_minimal.py")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è backend: {e}")
    
    # 4. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º dashboard
    print("\n4Ô∏è‚É£ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ dashboard...")
    fix_dashboard_ports()
    
    # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –∑–∞–ø—É—Å–∫–∞
    print("\n5Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º quick_status.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if not os.path.exists("quick_status.py"):
            print("üìã –°–æ–∑–¥–∞–µ—Ç—Å—è quick_status.py...")
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ–∑–¥–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, –Ω–æ —Ñ–∞–π–ª —É–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤
        
        print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –≥–æ—Ç–æ–≤—ã")
        
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã: {e}")
    
    # 6. –ò—Ç–æ–≥–æ–≤—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
    print("\n" + "="*60)
    print("üéØ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£:")
    print("="*60)
    
    print("\nüöÄ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print("   python quick_status.py  # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
    print("   python test_dashboard_integration.py  # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    print("\nüåê –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´:")
    if os.path.exists("web_backend_minimal.py"):
        print("   python web_backend_minimal.py  # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è")
    print("   python web_backend.py           # –û—Å–Ω–æ–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è")
    
    print("\nüì± –î–û–°–¢–£–ü:")
    print("   ‚Ä¢ Backend: http://localhost:5001")
    print("   ‚Ä¢ Dashboard: –û—Ç–∫—Ä–æ–π—Ç–µ web_dashboard.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("   ‚Ä¢ Health check: http://localhost:5001/api/health")
    
    print("\nüí° –ï–°–õ–ò –ü–†–û–ë–õ–ï–ú–´:")
    print("   1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ web_backend_minimal.py –≤–º–µ—Å—Ç–æ web_backend.py")
    print("   2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏")
    print("   3. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–æ—Ä—Ç 5001 —Å–≤–æ–±–æ–¥–µ–Ω")

if __name__ == "__main__":
    main()