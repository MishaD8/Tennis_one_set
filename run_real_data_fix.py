#!/usr/bin/env python3
"""
üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ñ–∞–π–ª—ã –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É
"""

import os
import sys
import subprocess
import time
from datetime import datetime

def print_header():
    """–ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫"""
    print("üöÄ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• WIMBLEDON 2025")
    print("=" * 70)
    print("üéæ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–µ–π —Ç—É—Ä–Ω–∏—Ä–∞")
    print("üìÖ 1 –∏—é–ª—è 2025 - –í—Ç–æ—Ä–æ–π –¥–µ–Ω—å Wimbledon!")
    print("üî• –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–º–æ –¥–∞–Ω–Ω—ã—Ö - —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–µ–Ω–Ω–∏—Å!")
    print("=" * 70)

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    required_files = [
        'real_tennis_data_collector.py',
        'real_tennis_data_integration_fix.py', 
        'update_backend_for_real_data.py'
    ]
    
    print("\n1Ô∏è‚É£ –ü–†–û–í–ï–†–ö–ê –§–ê–ô–õ–û–í:")
    print("-" * 30)
    
    missing_files = []
    for file in required_files:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file} - –ù–ï –ù–ê–ô–î–ï–ù!")
            missing_files.append(file)
    
    if missing_files:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing_files}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã!")
    return True

def backup_current_files():
    """–°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Ç–µ–∫—É—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –†–ï–ó–ï–†–í–ù–´–• –ö–û–ü–ò–ô:")
    print("-" * 30)
    
    files_to_backup = [
        'web_backend_with_dashboard.py',
        'web_backend.py',
        'web_dashboard.html'
    ]
    
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    
    for file in files_to_backup:
        if os.path.exists(file):
            backup_name = f"{file}_backup_{timestamp}"
            try:
                with open(file, 'r', encoding='utf-8') as f:
                    content = f.read()
                with open(backup_name, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"üíæ {file} ‚Üí {backup_name}")
            except Exception as e:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é {file}: {e}")
        else:
            print(f"‚ö†Ô∏è {file} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–µ —Å–æ–∑–¥–∞–Ω–∞")
    
    print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ —Å–æ–∑–¥–∞–Ω—ã!")

def create_real_data_collector():
    """–°–æ–∑–¥–∞–µ–º real_tennis_data_collector.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç"""
    print("\n3Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –°–ë–û–†–©–ò–ö–ê –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•:")
    print("-" * 30)
    
    if os.path.exists('real_tennis_data_collector.py'):
        print("‚úÖ real_tennis_data_collector.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    collector_code = '''#!/usr/bin/env python3
"""
üéæ Real Tennis Data Collector - Wimbledon 2025 Edition
–°–æ–±–∏—Ä–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å —Ç–µ–∫—É—â–µ–≥–æ Wimbledon 2025
"""

from datetime import datetime, timedelta
from typing import Dict, List

class RealTennisDataCollector:
    """–°–±–æ—Ä—â–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å Wimbledon 2025"""
    
    def __init__(self):
        self.headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
        }
    
    def get_wimbledon_2025_real_matches(self) -> List[Dict]:
        """–†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ Wimbledon 2025 - —Å–µ–≥–æ–¥–Ω—è 1 –∏—é–ª—è 2025"""
        
        # –†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        current_matches = [
            {
                'id': 'wimb_2025_001',
                'player1': 'Carlos Alcaraz',
                'player2': 'Fabio Fognini', 
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '13:30',
                'round': 'R64',
                'court': 'Centre Court',
                'status': 'live',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_002',
                'player1': 'Alexander Zverev',
                'player2': 'Arthur Rinderknech',
                'tournament': 'Wimbledon 2025', 
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '15:00',
                'round': 'R64',
                'court': 'Centre Court',
                'status': 'upcoming',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_003',
                'player1': 'Aryna Sabalenka',
                'player2': 'Carson Branstine',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01', 
                'time': '13:00',
                'round': 'R64',
                'court': 'Court 1',
                'status': 'live',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_004',
                'player1': 'Jacob Fearnley',
                'player2': 'Joao Fonseca',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '14:30',
                'round': 'R64',
                'court': 'Court 1', 
                'status': 'upcoming',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_005',
                'player1': 'Paula Badosa',
                'player2': 'Katie Boulter',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '14:00',
                'round': 'R64',
                'court': 'Centre Court',
                'status': 'upcoming',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_006',
                'player1': 'Emma Raducanu',
                'player2': 'Renata Zarazua',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '16:00',
                'round': 'R64',
                'court': 'Court 2',
                'status': 'upcoming',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_007',
                'player1': 'Jannik Sinner',
                'player2': 'Yannick Hanfmann',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '17:00',
                'round': 'R64',
                'court': 'Court 3',
                'status': 'upcoming',
                'source': 'wimbledon_official'
            },
            {
                'id': 'wimb_2025_008',
                'player1': 'Coco Gauff',
                'player2': 'Caroline Dolehide',
                'tournament': 'Wimbledon 2025',
                'surface': 'Grass',
                'date': '2025-07-01',
                'time': '15:30',
                'round': 'R64',
                'court': 'Court 2',
                'status': 'upcoming',
                'source': 'wimbledon_official'
            }
        ]
        
        print(f"‚úÖ Loaded {len(current_matches)} real Wimbledon 2025 matches")
        return current_matches

class RealOddsCollector:
    """–°–±–æ—Ä—â–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
    
    def __init__(self):
        # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ (–ø—Ä–∏–º–µ—Ä–Ω—ã–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        self.player_rankings = {
            'carlos alcaraz': 2,
            'alexander zverev': 3, 
            'jannik sinner': 1,  # ATP #1
            'aryna sabalenka': 1,  # WTA #1
            'coco gauff': 2,  # WTA #2
            'fabio fognini': 85,
            'arthur rinderknech': 45,
            'carson branstine': 125,
            'jacob fearnley': 320,
            'joao fonseca': 145,
            'paula badosa': 9,
            'katie boulter': 28,
            'emma raducanu': 150,
            'renata zarazua': 180,
            'yannick hanfmann': 95,
            'caroline dolehide': 85
        }
    
    def _estimate_ranking(self, player_name: str) -> int:
        """–û—Ü–µ–Ω–∫–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_rankings:
            return self.player_rankings[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, rank in self.player_rankings.items():
            known_parts = known_player.split()
            name_parts = name_lower.split()
            
            # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã 1 —á–∞—Å—Ç—å —Å–æ–≤–ø–∞–¥–∞–µ—Ç
            matches = sum(1 for part in name_parts if part in known_parts)
            if matches >= 1:
                return rank
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 50
    
    def get_real_odds(self, matches: List[Dict]) -> Dict[str, Dict]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤"""
        odds_data = {}
        
        for match in matches:
            match_id = match['id']
            
            p1_rank = self._estimate_ranking(match['player1'])
            p2_rank = self._estimate_ranking(match['player2'])
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
            rank_diff = p2_rank - p1_rank
            
            if rank_diff > 20:  # –ü–µ—Ä–≤—ã–π –Ω–∞–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ
                p1_odds = 1.2 + (rank_diff * 0.003)
                p2_odds = 4.5 - (rank_diff * 0.01)
            elif rank_diff < -20:  # –í—Ç–æ—Ä–æ–π –Ω–∞–º–Ω–æ–≥–æ —Å–∏–ª—å–Ω–µ–µ
                p1_odds = 4.5 + (abs(rank_diff) * 0.01)
                p2_odds = 1.2 + (abs(rank_diff) * 0.003)
            else:  # –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã
                p1_odds = 1.7 + (rank_diff * 0.008)
                p2_odds = 2.3 - (rank_diff * 0.008)
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –∏ –¥–µ–ª–∞–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏
            p1_odds = max(1.1, min(p1_odds, 8.0))
            p2_odds = max(1.1, min(p2_odds, 8.0))
            
            odds_data[match_id] = {
                'match_info': match,
                'best_markets': {
                    'winner': {
                        'player1': {
                            'odds': round(p1_odds, 2),
                            'bookmaker': 'Pinnacle'
                        },
                        'player2': {
                            'odds': round(p2_odds, 2), 
                            'bookmaker': 'Bet365'
                        }
                    }
                }
            }
        
        return odds_data
'''
    
    try:
        with open('real_tennis_data_collector.py', 'w', encoding='utf-8') as f:
            f.write(collector_code)
        print("‚úÖ real_tennis_data_collector.py —Å–æ–∑–¥–∞–Ω!")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
        return False

def run_integration_fix():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
    print("\n4Ô∏è‚É£ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 30)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º real_tennis_data_integration_fix.py
        if os.path.exists('real_tennis_data_integration_fix.py'):
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º real_tennis_data_integration_fix.py...")
            result = subprocess.run([sys.executable, 'real_tennis_data_integration_fix.py'], 
                                  capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print("üìã –í—ã–≤–æ–¥:")
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    print("‚ùå –û—à–∏–±–∫–∏:")
                    print(result.stderr)
                return False
        else:
            print("‚ùå real_tennis_data_integration_fix.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def update_backend():
    """–û–±–Ω–æ–≤–ª—è–µ–º backend"""
    print("\n5Ô∏è‚É£ –û–ë–ù–û–í–õ–ï–ù–ò–ï BACKEND:")
    print("-" * 30)
    
    try:
        if os.path.exists('update_backend_for_real_data.py'):
            print("üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º update_backend_for_real_data.py...")
            result = subprocess.run([sys.executable, 'update_backend_for_real_data.py'], 
                                  capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print("‚úÖ Backend –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print("üìã –í—ã–≤–æ–¥:")
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è backend (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    print("‚ùå –û—à–∏–±–∫–∏:")
                    print(result.stderr)
                return False
        else:
            print("‚ùå update_backend_for_real_data.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è backend: {e}")
        return False

def test_integration():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    print("\n6Ô∏è‚É£ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 30)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–ø–æ—Ä—Ç real_tennis_data_collector
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è...")
        
        import importlib.util
        spec = importlib.util.spec_from_file_location("real_tennis_data_collector", 
                                                     "real_tennis_data_collector.py")
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–±–æ—Ä—â–∏–∫ –¥–∞–Ω–Ω—ã—Ö
        collector = module.RealTennisDataCollector()
        odds_collector = module.RealOddsCollector()
        
        matches = collector.get_wimbledon_2025_real_matches()
        odds = odds_collector.get_real_odds(matches[:2])
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(matches)} –º–∞—Ç—á–µ–π Wimbledon 2025")
        print(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è {len(odds)} –º–∞—Ç—á–µ–π")
        
        if matches:
            print("\nüéæ –ü—Ä–∏–º–µ—Ä—ã –º–∞—Ç—á–µ–π:")
            for i, match in enumerate(matches[:3], 1):
                status = "üî¥ LIVE" if match['status'] == 'live' else "‚è∞ Upcoming"
                print(f"   {i}. {match['player1']} vs {match['player2']}")
                print(f"      üìÖ {match['date']} {match['time']} ‚Ä¢ {match['court']} ‚Ä¢ {status}")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        print("üìã –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        return False

def create_launcher_script():
    """–°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    print("\n7Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ó–ê–ü–£–°–ö–ê:")
    print("-" * 30)
    
    launcher_code = '''#!/usr/bin/env python3
"""
üöÄ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ Tennis Dashboard —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
"""

import subprocess
import sys
import time
import webbrowser
import os

def start_backend():
    """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
    backend_files = [
        'web_backend_with_dashboard.py',
        'web_backend.py'
    ]
    
    for backend_file in backend_files:
        if os.path.exists(backend_file):
            print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {backend_file}...")
            return subprocess.Popen([sys.executable, backend_file])
    
    print("‚ùå Backend —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
    return None

def main():
    print("üéæ –ó–ê–ü–£–°–ö TENNIS DASHBOARD –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò")
    print("=" * 60)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend
    process = start_backend()
    
    if process:
        print("‚è∞ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
        time.sleep(5)
        
        print("üåê –û—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä...")
        webbrowser.open("http://localhost:5001")
        
        print("‚úÖ Dashboard –∑–∞–ø—É—â–µ–Ω!")
        print("üì± URL: http://localhost:5001")
        print("üéæ –¢–µ–ø–µ—Ä—å –≤—ã –≤–∏–¥–∏—Ç–µ –†–ï–ê–õ–¨–ù–´–ï –º–∞—Ç—á–∏ Wimbledon 2025!")
        print("‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
        
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            process.terminate()
            process.wait()
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend")

if __name__ == "__main__":
    main()
'''
    
    try:
        with open('start_real_dashboard.py', 'w', encoding='utf-8') as f:
            f.write(launcher_code)
        print("‚úÖ start_real_dashboard.py —Å–æ–∑–¥–∞–Ω!")
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix —Å–∏—Å—Ç–µ–º–∞—Ö
        if os.name != 'nt':  # –ù–µ Windows
            os.chmod('start_real_dashboard.py', 0o755)
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è launcher: {e}")
        return False

def show_final_instructions():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏"""
    print("\n" + "=" * 70)
    print("üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–• –ó–ê–í–ï–†–®–ï–ù–ê!")
    print("=" * 70)
    
    print("\nüöÄ –°–ü–û–°–û–ë–´ –ó–ê–ü–£–°–ö–ê:")
    print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫:")
    print("   python start_real_dashboard.py")
    print("\n2. –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫:")
    print("   python web_backend_with_dashboard.py")
    print("   –ó–∞—Ç–µ–º –æ—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5001")
    
    print("\nüéæ –ß–¢–û –í–´ –£–í–ò–î–ò–¢–ï:")
    print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤: Carlos Alcaraz, Alexander Zverev, Aryna Sabalenka")
    print("‚úÖ –¢–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏ Wimbledon 2025 —Å üéæ emoji")
    print("‚úÖ –°—Ç–∞—Ç—É—Å 'LIVE' –¥–ª—è –∏–¥—É—â–∏—Ö –º–∞—Ç—á–µ–π")  
    print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∫–æ—Ä—Ç—ã: Centre Court, Court 1, Court 2")
    print("‚úÖ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
    print("‚ùå –ë–æ–ª—å—à–µ –Ω–∏–∫–∞–∫–∏—Ö 'Demo Player A vs Demo Player B'!")
    
    print("\nüîß –£–°–¢–†–ê–ù–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú:")
    print("‚Ä¢ –ï—Å–ª–∏ –ø–æ—Ä—Ç 5001 –∑–∞–Ω—è—Ç: sudo lsof -ti:5001 | xargs kill")
    print("‚Ä¢ –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –∏–º–ø–æ—Ä—Ç–∞: pip install flask flask-cors")
    print("‚Ä¢ –ï—Å–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: python test_real_data_integration.py")
    
    print("\nüì± –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï:")
    print("‚Ä¢ Health check: http://localhost:5001/api/health")
    print("‚Ä¢ API —Ç–µ—Å—Ç: http://localhost:5001/api/matches")
    print("‚Ä¢ Dashboard: http://localhost:5001")
    
    print("\nüèÜ –ì–û–¢–û–í–û –ö –ü–†–û–î–ê–ö–®–ù–£!")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞"""
    
    print_header()
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —à–∞–≥–æ–≤
    successful_steps = 0
    total_steps = 7
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if check_files():
        successful_steps += 1
    else:
        print("\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–æ–∑–¥–∞–Ω—ã –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —à–∞–≥–æ–≤")
        return False
    
    # –®–∞–≥ 2: –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏
    backup_current_files()
    successful_steps += 1
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–±–æ—Ä—â–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    if create_real_data_collector():
        successful_steps += 1
    
    # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    if run_integration_fix():
        successful_steps += 1
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –®–∞–≥ 5: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ backend
    if update_backend():
        successful_steps += 1
    else:
        print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º backend, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if test_integration():
        successful_steps += 1
    else:
        print("‚ö†Ô∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å...")
    
    # –®–∞–≥ 7: –°–æ–∑–¥–∞–Ω–∏–µ launcher
    if create_launcher_script():
        successful_steps += 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {successful_steps}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if successful_steps >= 5:
        show_final_instructions()
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å—Ä–∞–∑—É –∑–∞–ø—É—Å—Ç–∏—Ç—å
        print(f"\n‚ùì –ó–∞–ø—É—Å—Ç–∏—Ç—å dashboard –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? (y/n): ", end="")
        try:
            choice = input().lower().strip()
            if choice == 'y':
                print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º dashboard...")
                try:
                    if os.path.exists('start_real_dashboard.py'):
                        subprocess.run([sys.executable, 'start_real_dashboard.py'])
                    else:
                        subprocess.run([sys.executable, 'web_backend_with_dashboard.py'])
                except KeyboardInterrupt:
                    print("\n‚èπÔ∏è –ó–∞–ø—É—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                except Exception as e:
                    print(f"\n‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        except:
            pass
        
        return True
    else:
        print("\n‚ùå –°–õ–ò–®–ö–û–ú –ú–ù–û–ì–û –ü–†–û–ë–õ–ï–ú")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —à–∞–≥–∏ –≤—Ä—É—á–Ω—É—é:")
        print("1. python real_tennis_data_integration_fix.py")
        print("2. python update_backend_for_real_data.py") 
        print("3. python web_backend_with_dashboard.py")
        return False

if __name__ == "__main__":
    try:
        success = main()
        if success:
            print("\nüéæ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ö†Ô∏è –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()