#!/usr/bin/env python3
"""
üß™ ML SYSTEM TESTER
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—Å—é ML —Å–∏—Å—Ç–µ–º—É –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
"""

import os
import sys
from datetime import datetime

def test_ml_predictor():
    """–¢–µ—Å—Ç ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞"""
    print("ü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä...")
    
    try:
        from real_tennis_predictor_integration import RealTennisPredictor
        
        predictor = RealTennisPredictor()
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
        test_matches = [
            {
                'player1': 'Carlos Alcaraz',
                'player2': 'Novak Djokovic', 
                'tournament': 'Wimbledon',
                'surface': 'Grass',
                'round': 'F'
            },
            {
                'player1': 'Brandon Nakashima',
                'player2': 'Bu Yunchaokete',
                'tournament': 'Wimbledon', 
                'surface': 'Grass',
                'round': 'R64'
            }
        ]
        
        for i, match in enumerate(test_matches, 1):
            print(f"\nüéæ –¢–µ—Å—Ç {i}: {match['player1']} vs {match['player2']}")
            
            result = predictor.predict_match(
                match['player1'], match['player2'],
                match['tournament'], match['surface'], match['round']
            )
            
            print(f"   üìä –ü—Ä–æ–≥–Ω–æ–∑: {result['probability']:.1%}")
            print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']}")
            print(f"   üî¨ –¢–∏–ø: {result['prediction_type']}")
            
            if result['key_factors']:
                print(f"   üîç –§–∞–∫—Ç–æ—Ä—ã: {len(result['key_factors'])} –Ω–∞–π–¥–µ–Ω–æ")
        
        print("\n‚úÖ ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞: {e}")
        return False

def test_tennis_prediction_module():
    """–¢–µ—Å—Ç –º–æ–¥—É–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        from tennis_prediction_module import TennisPredictionService, create_match_data
        
        service = TennisPredictionService()
        info = service.get_model_info()
        
        print(f"   üìä –°—Ç–∞—Ç—É—Å: {info['status']}")
        print(f"   ü§ñ –ú–æ–¥–µ–ª–∏: {info.get('models_count', 0)}")
        
        if info['status'] == 'loaded':
            # –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
            test_data = create_match_data(
                player_rank=1,
                opponent_rank=45,
                player_recent_win_rate=0.85,
                player_surface_advantage=0.12
            )
            
            result = service.predict_match(test_data)
            print(f"   üéØ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑: {result['probability']:.1%}")
            print(f"   ‚úÖ –ú–æ–¥—É–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç!")
        else:
            print(f"   ‚ö†Ô∏è –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è demo —Ä–µ–∂–∏–º")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥—É–ª—è: {e}")
        return False

def test_api_endpoints():
    """–¢–µ—Å—Ç API endpoints"""
    print("\nüì° –¢–µ—Å—Ç–∏—Ä—É–µ–º API endpoints...")
    
    try:
        import requests
        
        base_url = "http://localhost:5001/api"
        endpoints = [
            ('/health', 'Health check'),
            ('/stats', '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
            ('/matches', '–ú–∞—Ç—á–∏')
        ]
        
        for endpoint, description in endpoints:
            try:
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get('success'):
                        print(f"   ‚úÖ {description}: OK")
                    else:
                        print(f"   ‚ö†Ô∏è {description}: –û—Ç–≤–µ—Ç –±–µ–∑ success")
                else:
                    print(f"   ‚ùå {description}: HTTP {response.status_code}")
                    
            except requests.RequestException as e:
                print(f"   ‚ùå {description}: {e}")
        
        return True
        
    except ImportError:
        print("‚ùå requests –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API: {e}")
        return False

def test_prediction_api():
    """–¢–µ—Å—Ç API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\nüîÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        import requests
        
        test_data = {
            'player_rank': 1,
            'opponent_rank': 45,
            'player_recent_win_rate': 0.85,
            'player_surface_advantage': 0.12,
            'h2h_win_rate': 0.75
        }
        
        response = requests.post(
            'http://localhost:5001/api/predict',
            json=test_data,
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                pred = data['prediction']
                print(f"   üéØ –ü—Ä–æ–≥–Ω–æ–∑: {pred['probability']:.1%}")
                print(f"   üî¨ –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', 'unknown')}")
                print(f"   ‚úÖ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                return True
            else:
                print(f"   ‚ùå API –æ—à–∏–±–∫–∞: {data.get('error', 'unknown')}")
        else:
            print(f"   ‚ùå HTTP –æ—à–∏–±–∫–∞: {response.status_code}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_data_quality():
    """–¢–µ—Å—Ç –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüìä –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        import requests
        
        response = requests.get('http://localhost:5001/api/matches', timeout=10)
        
        if response.status_code == 200:
            data = response.json()
            
            if data.get('success') and data.get('matches'):
                matches = data['matches']
                print(f"   üìã –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π –º–∞—Ç—á
                if matches:
                    match = matches[0]
                    source = match.get('source', 'unknown')
                    quality = match.get('data_quality', 'unknown')
                    
                    print(f"   üîç –ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: {source}")
                    print(f"   üíé –ö–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö: {quality}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º ML –ø—Ä–æ–≥–Ω–æ–∑
                    prediction = match.get('prediction', {})
                    prob = prediction.get('probability', 0)
                    
                    if 0.1 <= prob <= 0.9:
                        print(f"   üéØ ML –ø—Ä–æ–≥–Ω–æ–∑: {prob:.1%} (—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ)")
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –ø—Ä–æ—Å—Ç–æ–µ 1/odds
                        odds = match.get('odds', {})
                        p1_odds = odds.get('player1', 2.0)
                        
                        simple_prob = 1.0 / p1_odds / (1.0 / p1_odds + 1.0 / 2.0)
                        
                        if abs(prob - simple_prob) > 0.05:
                            print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ô ML, –Ω–µ 1/odds!")
                        else:
                            print(f"   ‚ö†Ô∏è –ü–æ—Ö–æ–∂–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–µ 1/odds –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ")
                    else:
                        print(f"   ‚ö†Ô∏è –ù–µ—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {prob:.1%}")
                
                return True
            else:
                print(f"   ‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞—Ç—á–µ–π: {response.status_code}")
        
        return False
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ ML SYSTEM COMPREHENSIVE TEST")
    print("=" * 50)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 50)
    
    tests = [
        ("ML Predictor", test_ml_predictor),
        ("Prediction Module", test_tennis_prediction_module), 
        ("API Endpoints", test_api_endpoints),
        ("Prediction API", test_prediction_api),
        ("Data Quality", test_data_quality)
    ]
    
    results = {}
    
    for test_name, test_func in tests:
        print(f"\nüìã –¢–ï–°–¢: {test_name}")
        print("-" * 30)
        try:
            result = test_func()
            results[test_name] = result
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results[test_name] = False
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results.items():
        status = "‚úÖ –ü–†–û–®–ï–õ" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status:12} {test_name}")
        if result:
            passed += 1
    
    print(f"\nüìà –†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏")
    
    if passed == total:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        return True
    elif passed >= total * 0.8:
        print("‚ö° –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏. –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        return True
    elif passed >= total * 0.5:
        print("‚ö†Ô∏è –ü–æ–ª–æ–≤–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏. –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False
    else:
        print("‚ùå –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º. –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)