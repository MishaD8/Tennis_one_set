#!/usr/bin/env python3
"""
üöÄ TENNIS SYSTEM LAUNCHER
–ü—Ä–æ—Å—Ç–æ–π launcher –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
"""

import subprocess
import sys
import time
import webbrowser
import os
from datetime import datetime
import signal

class TennisSystemLauncher:
    """Launcher –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.backend_process = None
        self.current_backend = None
        
    def check_files(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã...")
        
        required_files = {
            'Backend files': [
                'web_backend_fixed_ml.py',
                'backend_integration_fix.py', 
                'web_backend_with_dashboard.py'
            ],
            'ML Integration': [
                'real_tennis_predictor_integration.py',
                'tennis_prediction_module.py'
            ],
            'Test files': [
                'test_ml_system.py'
            ],
            'Config': [
                'config.json'
            ]
        }
        
        all_files_status = {}
        for category, files in required_files.items():
            print(f"\nüìÇ {category}:")
            category_status = {}
            
            for file in files:
                exists = os.path.exists(file)
                status = "‚úÖ" if exists else "‚ùå"
                print(f"  {status} {file}")
                category_status[file] = exists
            
            all_files_status[category] = category_status
        
        return all_files_status
    
    def run_integration_fix(self):
        """–ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        print("\nüîß –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ backend...")
        
        if not os.path.exists('backend_integration_fix.py'):
            print("‚ùå backend_integration_fix.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        try:
            result = subprocess.run(
                [sys.executable, 'backend_integration_fix.py'],
                capture_output=True,
                text=True,
                timeout=30
            )
            
            if result.returncode == 0:
                print("‚úÖ Backend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                    print(result.stdout)
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    print("‚ùå –û—à–∏–±–∫–∏:")
                    print(result.stderr)
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {e}")
            return False
    
    def test_ml_system(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º ML —Å–∏—Å—Ç–µ–º—É...")
        
        if not os.path.exists('test_ml_system.py'):
            print("‚ùå test_ml_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
        
        try:
            result = subprocess.run(
                [sys.executable, 'test_ml_system.py'],
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                print("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
                print(result.stdout)
                return True
            else:
                print(f"‚ö†Ô∏è –¢–µ—Å—Ç ML —Å–∏—Å—Ç–µ–º—ã –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    print("‚ö†Ô∏è –î–µ—Ç–∞–ª–∏:")
                    print(result.stderr)
                return False
                
        except subprocess.TimeoutExpired:
            print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞")
            return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
            return False
    
    def find_best_backend(self):
        """–ü–æ–∏—Å–∫ –ª—É—á—à–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ backend"""
        backends = [
            ('web_backend_fixed_ml.py', '–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π ML backend'),
            ('web_backend_with_dashboard.py', 'Backend —Å dashboard'),
            ('web_backend_minimal.py', '–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π backend'),
            ('web_backend.py', '–ë–∞–∑–æ–≤—ã–π backend')
        ]
        
        for backend_file, description in backends:
            if os.path.exists(backend_file):
                print(f"üéØ –ù–∞–π–¥–µ–Ω: {description}")
                return backend_file, description
        
        print("‚ùå –ù–∏ –æ–¥–∏–Ω backend –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None, None
    
    def start_backend(self, backend_file=None):
        """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
        if backend_file is None:
            backend_file, description = self.find_best_backend()
            if backend_file is None:
                return False
        else:
            description = backend_file
        
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º {description}...")
        
        try:
            self.backend_process = subprocess.Popen(
                [sys.executable, backend_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            self.current_backend = backend_file
            print(f"‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: {self.backend_process.pid})")
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
            return False
    
    def wait_for_backend(self, timeout=15):
        """–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend"""
        print("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ backend...")
        
        import requests
        
        for i in range(timeout):
            try:
                response = requests.get('http://localhost:5001/api/health', timeout=2)
                if response.status_code == 200:
                    print("‚úÖ Backend –≥–æ—Ç–æ–≤!")
                    return True
            except:
                pass
            
            print(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ... {i+1}/{timeout}")
            time.sleep(1)
        
        print("‚ö†Ô∏è Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        return False
    
    def open_dashboard(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ dashboard –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
        print("\nüåê –û—Ç–∫—Ä—ã–≤–∞–µ–º dashboard...")
        try:
            webbrowser.open('http://localhost:5001')
            print("‚úÖ Dashboard –æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
            print("üåê –û—Ç–∫—Ä–æ–π—Ç–µ –≤—Ä—É—á–Ω—É—é: http://localhost:5001")
            return False
    
    def show_status(self):
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:")
        print("-" * 40)
        
        if self.backend_process:
            if self.backend_process.poll() is None:
                print(f"üü¢ Backend: –†–∞–±–æ—Ç–∞–µ—Ç ({self.current_backend})")
                print(f"üÜî PID: {self.backend_process.pid}")
            else:
                print(f"üî¥ Backend: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–∫–æ–¥ {self.backend_process.returncode})")
        else:
            print("üî¥ Backend: –ù–µ –∑–∞–ø—É—â–µ–Ω")
        
        print(f"üåê Dashboard: http://localhost:5001")
        print(f"üì° API: http://localhost:5001/api/*")
        print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    
    def stop_backend(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ backend"""
        if self.backend_process:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º backend...")
            try:
                self.backend_process.terminate()
                self.backend_process.wait(timeout=10)
                print("‚úÖ Backend –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except subprocess.TimeoutExpired:
                print("‚ö†Ô∏è –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...")
                self.backend_process.kill()
                self.backend_process.wait()
                print("‚úÖ Backend –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: {e}")
            finally:
                self.backend_process = None
                self.current_backend = None
    
    def interactive_menu(self):
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        while True:
            print("\n" + "="*50)
            print("üéæ TENNIS SYSTEM LAUNCHER - –ú–ï–ù–Æ")
            print("="*50)
            print("1. üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã")
            print("2. üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å backend")
            print("3. üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å ML —Å–∏—Å—Ç–µ–º—É")
            print("4. üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å backend")
            print("5. üåê –û—Ç–∫—Ä—ã—Ç—å dashboard")
            print("6. üìä –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å")
            print("7. ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å backend")
            print("8. üîÑ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
            print("0. üëã –í—ã—Ö–æ–¥")
            
            try:
                choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-8): ").strip()
                
                if choice == '0':
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif choice == '1':
                    self.check_files()
                elif choice == '2':
                    self.run_integration_fix()
                elif choice == '3':
                    self.test_ml_system()
                elif choice == '4':
                    self.start_backend()
                    self.wait_for_backend()
                elif choice == '5':
                    self.open_dashboard()
                elif choice == '6':
                    self.show_status()
                elif choice == '7':
                    self.stop_backend()
                elif choice == '8':
                    self.stop_backend()
                    time.sleep(2)
                    self.start_backend()
                    self.wait_for_backend()
                    self.open_dashboard()
                else:
                    print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
                
                if choice != '0':
                    input("\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
                    
            except KeyboardInterrupt:
                print("\n\n‚èπÔ∏è –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ...")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                input("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
    
    def auto_launch(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã"""
        print("üéæ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ó–ê–ü–£–°–ö TENNIS SYSTEM")
        print("=" * 50)
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        files_status = self.check_files()
        
        # 2. –ò—Å–ø—Ä–∞–≤–ª—è–µ–º backend –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if os.path.exists('backend_integration_fix.py'):
            if self.run_integration_fix():
                print("‚úÖ Backend –∏—Å–ø—Ä–∞–≤–ª–µ–Ω")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º ML —Å–∏—Å—Ç–µ–º—É
        if os.path.exists('test_ml_system.py'):
            if self.test_ml_system():
                print("‚úÖ ML —Å–∏—Å—Ç–µ–º–∞ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∞")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å ML —Å–∏—Å—Ç–µ–º–æ–π, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        
        # 4. –ó–∞–ø—É—Å–∫–∞–µ–º backend
        if self.start_backend():
            print("‚úÖ Backend –∑–∞–ø—É—â–µ–Ω")
            
            # 5. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
            self.wait_for_backend()
            
            # 6. –û—Ç–∫—Ä—ã–≤–∞–µ–º dashboard
            self.open_dashboard()
            
            # 7. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            self.show_status()
            
            print("\nüéâ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê –£–°–ü–ï–®–ù–û!")
            print("\nüí° –ß—Ç–æ –¥–æ—Å—Ç—É–ø–Ω–æ:")
            print("  ‚Ä¢ üåê Dashboard: http://localhost:5001")
            print("  ‚Ä¢ üì° API: http://localhost:5001/api/health")
            print("  ‚Ä¢ üéæ ML –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
            print("  ‚Ä¢ üéØ Value betting –∞–Ω–∞–ª–∏–∑")
            
            print("\n‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–ª–∏ Enter –¥–ª—è –º–µ–Ω—é")
            
            try:
                input()
                self.interactive_menu()
            except KeyboardInterrupt:
                print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
            finally:
                self.stop_backend()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend")
            print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é")
            self.interactive_menu()
    
    def __del__(self):
        """Cleanup –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
        self.stop_backend()


def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    print("\n‚èπÔ∏è –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    sys.exit(0)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    launcher = TennisSystemLauncher()
    
    print("üéæ TENNIS SYSTEM LAUNCHER")
    print("=" * 50)
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")
    print("ü§ñ ML –ø—Ä–æ–≥–Ω–æ–∑—ã –≤–º–µ—Å—Ç–æ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
    print("üéØ –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        arg = sys.argv[1].lower()
        
        if arg in ['auto', 'start', 'run']:
            launcher.auto_launch()
        elif arg == 'menu':
            launcher.interactive_menu()
        elif arg == 'test':
            launcher.check_files()
            launcher.test_ml_system()
        elif arg == 'fix':
            launcher.run_integration_fix()
        else:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: {arg}")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: auto, menu, test, fix")
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞
        print("\nüîß –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∑–∞–ø—É—Å–∫–∞:")
        print("1. üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)")
        print("2. üìã –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é") 
        print("3. üß™ –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        try:
            choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ").strip()
            
            if choice == '1':
                launcher.auto_launch()
            elif choice == '2':
                launcher.interactive_menu()
            elif choice == '3':
                launcher.check_files()
                launcher.test_ml_system()
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º")
                launcher.auto_launch()
                
        except KeyboardInterrupt:
            print("\nüëã –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    main()