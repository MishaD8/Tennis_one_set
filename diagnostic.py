#!/usr/bin/env python3
"""
üéæ TENNIS BACKEND –° –ü–û–î–†–û–ë–ù–û–ô –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô
–ü–æ–∫–∞–∂–µ—Ç –≥–¥–µ –∏–º–µ–Ω–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ—à–∏–±–∫–∞
"""

import sys
import traceback
from datetime import datetime

print("üéæ –ó–ê–ü–£–°–ö TENNIS BACKEND –° –î–ò–ê–ì–ù–û–°–¢–ò–ö–û–ô")
print("=" * 50)
print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now()}")
print(f"üêç Python: {sys.version}")
print("=" * 50)

try:
    print("üì¶ –ò–º–ø–æ—Ä—Ç Flask...")
    from flask import Flask, jsonify, request
    print("‚úÖ Flask –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    
    print("üì¶ –ò–º–ø–æ—Ä—Ç CORS...")
    try:
        from flask_cors import CORS
        CORS_AVAILABLE = True
        print("‚úÖ Flask-CORS –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
    except ImportError:
        CORS_AVAILABLE = False
        print("‚ö†Ô∏è Flask-CORS –Ω–µ –Ω–∞–π–¥–µ–Ω (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
    
    print("üì¶ –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –º–æ–¥—É–ª–µ–π...")
    import logging
    import random
    import json
    print("‚úÖ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    print("üì¶ –ò–º–ø–æ—Ä—Ç API Economy...")
    try:
        from api_economy_patch import (
            init_api_economy, 
            economical_tennis_request, 
            get_api_usage, 
            trigger_manual_update,
            clear_api_cache
        )
        print("‚úÖ API Economy –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        API_ECONOMY_AVAILABLE = True
    except ImportError as e:
        print(f"‚ö†Ô∏è API Economy –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        API_ECONOMY_AVAILABLE = False
    
    print("\nüîß –°–æ–∑–¥–∞–Ω–∏–µ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    app = Flask(__name__)
    
    if CORS_AVAILABLE:
        CORS(app)
        print("‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
    
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    logging.basicConfig(level=logging.INFO)
    logger = logging.getLogger(__name__)
    print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
    
    if API_ECONOMY_AVAILABLE:
        print("üí∞ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è API Economy...")
        try:
            init_api_economy(
                api_key="a1b20d709d4bacb2d95ddab880f91009",
                max_per_hour=30,
                cache_minutes=20
            )
            print("‚úÖ API Economy –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ API Economy: {e}")
    
    # –ü—Ä–æ—Å—Ç—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
    DEMO_MATCHES = [
        {
            'id': 'match_1',
            'player1': 'üéæ Marin Cilic',
            'player2': 'üéæ Flavio Cobolli',
            'tournament': 'üèÜ ATP Tournament',
            'surface': 'Hard',
            'round': 'R32',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': '14:00',
            'odds': {'player1': 1.99, 'player2': 2.00},
            'underdog_analysis': {
                'underdog': 'Flavio Cobolli',
                'favorite': 'Marin Cilic',
                'underdog_odds': 2.00,
                'prediction': {
                    'probability': 0.78,
                    'confidence': 'High',
                    'key_factors': [
                        'üéØ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã',
                        '‚öñÔ∏è –†–∞–≤–Ω—ã–µ —Å–∏–ª—ã –∏–≥—Ä–æ–∫–æ–≤',
                        'üí™ –•–æ—Ä–æ—à–∏–µ —à–∞–Ω—Å—ã –≤–∑—è—Ç—å —Å–µ—Ç'
                    ]
                },
                'quality_rating': 'HIGH'
            },
            'focus': 'üíé Flavio Cobolli –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç',
            'recommendation': '78% —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç',
            'data_source': 'DEMO_SYSTEM'
        }
    ]
    
    print("üé® –°–æ–∑–¥–∞–Ω–∏–µ HTML dashboard...")
    
    @app.route('/')
    def dashboard():
        """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π dashboard"""
        return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéæ Tennis Dashboard</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white; min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1000px; margin: 0 auto; }
        .header { 
            background: rgba(255, 255, 255, 0.1); backdrop-filter: blur(10px);
            border-radius: 20px; padding: 30px; margin-bottom: 30px; text-align: center;
        }
        .title { font-size: 2.5rem; margin-bottom: 10px; }
        .btn { 
            background: rgba(255,255,255,0.2); border: 2px solid rgba(255,255,255,0.3);
            color: white; padding: 15px 30px; border-radius: 25px; font-size: 1.1rem;
            cursor: pointer; margin: 10px; transition: all 0.3s ease;
        }
        .btn:hover { background: rgba(255,255,255,0.3); transform: translateY(-2px); }
        .status { margin: 20px 0; padding: 15px; background: rgba(39, 174, 96, 0.2); border-radius: 10px; }
        .matches { display: grid; gap: 20px; margin-top: 20px; }
        .match { 
            background: rgba(255,255,255,0.1); border-radius: 15px; padding: 20px;
            border-left: 4px solid #27ae60;
        }
        .loading { text-align: center; padding: 40px; font-size: 1.2rem; }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="title">üéæ Tennis Dashboard</div>
            <div class="status">
                ‚úÖ <strong>–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!</strong><br>
                Flask —Ä–∞–±–æ—Ç–∞–µ—Ç, dashboard –∑–∞–≥—Ä—É–∂–µ–Ω, API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ
            </div>
            <button class="btn" onclick="loadMatches()">üíé –ó–∞–≥—Ä—É–∑–∏—Ç—å –º–∞—Ç—á–∏</button>
            <button class="btn" onclick="testAPI()">üß™ –¢–µ—Å—Ç API</button>
            <button class="btn" onclick="showStatus()">üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã</button>
        </div>
        
        <div id="content" class="loading">
            üíé Dashboard —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!<br>
            <small>–ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</small>
        </div>
    </div>

    <script>
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ JavaScript —Ä–∞–±–æ—Ç–∞–µ—Ç
        console.log('‚úÖ JavaScript –∑–∞–≥—Ä—É–∂–µ–Ω');
        
        async function loadMatches() {
            document.getElementById('content').innerHTML = '<div class="loading">üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—á–µ–π...</div>';
            
            try {
                const response = await fetch('/api/matches');
                const data = await response.json();
                
                if (data.success) {
                    displayMatches(data.matches);
                } else {
                    document.getElementById('content').innerHTML = '<div class="loading">‚ùå –û—à–∏–±–∫–∞: ' + data.error + '</div>';
                }
            } catch (error) {
                document.getElementById('content').innerHTML = '<div class="loading">‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ' + error + '</div>';
            }
        }
        
        function displayMatches(matches) {
            let html = '<div class="matches">';
            html += '<h2 style="text-align: center; margin-bottom: 20px;">üíé –ù–∞–π–¥–µ–Ω—ã –º–∞—Ç—á–∏!</h2>';
            
            matches.forEach(match => {
                const analysis = match.underdog_analysis;
                const prediction = analysis.prediction;
                
                html += `
                    <div class="match">
                        <div style="font-size: 1.3rem; font-weight: bold; margin-bottom: 10px;">
                            ${match.player1} vs ${match.player2}
                        </div>
                        <div style="margin: 10px 0;">
                            üèÜ ${match.tournament} ‚Ä¢ ${match.surface} ‚Ä¢ ${match.round}
                        </div>
                        <div style="background: rgba(255, 217, 61, 0.2); padding: 15px; border-radius: 10px; margin: 15px 0;">
                            <strong>${match.focus}</strong><br>
                            ${match.recommendation}
                        </div>
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 15px;">
                            <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                                <div>${match.player1.replace('üéæ ', '')}</div>
                                <div style="font-size: 1.2rem; font-weight: bold;">${match.odds.player1}</div>
                            </div>
                            <div style="text-align: center; padding: 10px; background: rgba(255,255,255,0.1); border-radius: 8px;">
                                <div>${match.player2.replace('üéæ ', '')}</div>
                                <div style="font-size: 1.2rem; font-weight: bold;">${match.odds.player2}</div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            html += '</div>';
            document.getElementById('content').innerHTML = html;
        }
        
        async function testAPI() {
            try {
                const response = await fetch('/api/health');
                const data = await response.json();
                
                alert(`üß™ API –¢–ï–°–¢:\\n\\n` +
                      `–°—Ç–∞—Ç—É—Å: ${data.status}\\n` +
                      `–°–∏—Å—Ç–µ–º–∞: ${data.system}\\n` +
                      `–í—Ä–µ–º—è: ${data.timestamp}\\n\\n` +
                      `‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!`);
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞ API: ' + error);
            }
        }
        
        async function showStatus() {
            try {
                const response = await fetch('/api/stats');
                const data = await response.json();
                
                if (data.success) {
                    alert(`üìä –°–¢–ê–¢–£–° –°–ò–°–¢–ï–ú–´:\\n\\n` +
                          `–ú–∞—Ç—á–µ–π: ${data.count}\\n` +
                          `API Economy: ${data.api_economy ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω'}\\n` +
                          `–ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}\\n` +
                          `–í—Ä–µ–º—è: ${data.timestamp}\\n\\n` +
                          `‚úÖ –í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç!`);
                } else {
                    alert('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞');
                }
            } catch (error) {
                alert('‚ùå –û—à–∏–±–∫–∞: ' + error);
            }
        }
        
        // –ê–≤—Ç–æ—Ç–µ—Å—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
        document.addEventListener('DOMContentLoaded', function() {
            console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω');
            setTimeout(() => {
                console.log('‚úÖ –ê–≤—Ç–æ—Ç–µ—Å—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
            }, 2000);
        });
    </script>
</body>
</html>'''
    
    print("üì° –°–æ–∑–¥–∞–Ω–∏–µ API endpoints...")
    
    @app.route('/api/matches')
    def get_matches():
        try:
            logger.info("üíé API: –ó–∞–ø—Ä–æ—Å –º–∞—Ç—á–µ–π")
            return jsonify({
                'success': True,
                'matches': DEMO_MATCHES,
                'count': len(DEMO_MATCHES),
                'source': 'DEMO_WITH_DEBUG',
                'timestamp': datetime.now().isoformat()
            })
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ API matches: {e}")
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    @app.route('/api/health')
    def health_check():
        return jsonify({
            'status': 'healthy',
            'system': 'debug_tennis_backend',
            'api_economy': API_ECONOMY_AVAILABLE,
            'timestamp': datetime.now().isoformat()
        })
    
    @app.route('/api/stats')
    def get_stats():
        try:
            stats_data = {
                'success': True,
                'count': len(DEMO_MATCHES),
                'api_economy': API_ECONOMY_AVAILABLE,
                'source': 'DEBUG_SYSTEM',
                'timestamp': datetime.now().isoformat()
            }
            
            if API_ECONOMY_AVAILABLE:
                try:
                    usage = get_api_usage()
                    stats_data['api_usage'] = usage
                except:
                    stats_data['api_usage'] = 'error'
            
            return jsonify(stats_data)
        except Exception as e:
            return jsonify({
                'success': False,
                'error': str(e)
            }), 500
    
    print("\nüöÄ –í–°–ï –ö–û–ú–ü–û–ù–ï–ù–¢–´ –ó–ê–ì–†–£–ñ–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 50)
    print("üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    
    if __name__ == '__main__':
        try:
            print("üîÑ –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ –Ω–∞ –ø–æ—Ä—Ç—É 5001...")
            app.run(
                host='0.0.0.0',
                port=5001,
                debug=True,
                use_reloader=False
            )
        except OSError as e:
            if "Address already in use" in str(e):
                print("‚ö†Ô∏è –ü–æ—Ä—Ç 5001 –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º 8080...")
                app.run(
                    host='0.0.0.0', 
                    port=8080,
                    debug=True,
                    use_reloader=False
                )
            else:
                raise e

except ImportError as e:
    print(f"‚ùå –û–®–ò–ë–ö–ê –ò–ú–ü–û–†–¢–ê: {e}")
    print("üí° –†–µ—à–µ–Ω–∏–µ: pip install flask flask-cors")
    traceback.print_exc()

except Exception as e:
    print(f"‚ùå –ù–ï–û–ñ–ò–î–ê–ù–ù–ê–Ø –û–®–ò–ë–ö–ê: {e}")
    print("\nüîç –ü–û–õ–ù–ê–Ø –¢–†–ê–°–°–ò–†–û–í–ö–ê –û–®–ò–ë–ö–ò:")
    traceback.print_exc()
    print("\nüí° –û–ë–†–ê–¢–ò–¢–ï–°–¨ –ó–ê –ü–û–ú–û–©–¨–Æ –° –≠–¢–û–ô –ò–ù–§–û–†–ú–ê–¶–ò–ï–ô")