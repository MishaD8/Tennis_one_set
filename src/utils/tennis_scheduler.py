#!/usr/bin/env python3
"""
‚è∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö API –û–ë–ù–û–í–õ–ï–ù–ò–ô
3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å: —É—Ç—Ä–æ–º, –≤ –æ–±–µ–¥, –≤–µ—á–µ—Ä–æ–º
"""

import schedule
import time
import threading
from datetime import datetime, timedelta
import json
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('scheduler.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

class TennisDataScheduler:
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–∞–Ω–Ω—ã—Ö"""
    
    def __init__(self):
        self.running = False
        self.scheduler_thread = None
        self.last_update_times = {
            'morning': None,
            'afternoon': None, 
            'evening': None
        }
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –º–æ–¥—É–ª–∏
        try:
            from api_economy_patch import trigger_manual_update, get_api_usage
            from prediction_logging_system import PredictionLoggerIntegration
            from real_tennis_predictor_integration import RealTennisPredictor
            
            self.api_available = True
            self.trigger_update = trigger_manual_update
            self.get_usage = get_api_usage
            self.logger_integration = PredictionLoggerIntegration()
            self.predictor = RealTennisPredictor()
            
        except ImportError as e:
            logger.warning(f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–¥—É–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: {e}")
            self.api_available = False
    
    def morning_update(self):
        """üåÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (08:00)"""
        logger.info("üåÖ –£–¢–†–ï–ù–ù–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - 08:00")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏
            if self.api_available:
                logger.info("üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ API...")
                self.trigger_update()
                time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            
            # 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –Ω–æ–≤—ã–µ –º–∞—Ç—á–∏
            self._generate_predictions_for_new_matches()
            
            # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._log_daily_statistics("morning")
            
            self.last_update_times['morning'] = datetime.now()
            logger.info("‚úÖ –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def afternoon_update(self):
        """‚òÄÔ∏è –î–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (14:00)"""
        logger.info("‚òÄÔ∏è –î–ù–ï–í–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - 14:00")
        
        try:
            # 1. –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö
            if self.api_available:
                logger.info("üì° –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–∏—Ö –º–∞—Ç—á–∞—Ö...")
                self.trigger_update()
                time.sleep(2)
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —É—Ç—Ä–µ–Ω–Ω–∏–µ –º–∞—Ç—á–∏
            self._update_morning_results()
            
            # 3. –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –¥–Ω–µ–≤–Ω—ã–µ –º–∞—Ç—á–∏
            self._generate_predictions_for_new_matches()
            
            self.last_update_times['afternoon'] = datetime.now()
            logger.info("‚úÖ –î–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def evening_update(self):
        """üåÜ –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (20:00)"""
        logger.info("üåÜ –í–ï–ß–ï–†–ù–ï–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï - 20:00")
        
        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–Ω—è
            if self.api_available:
                logger.info("üì° –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
                self.trigger_update()
                time.sleep(2)
            
            # 2. –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –¥–Ω–µ–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π
            self._update_all_daily_results()
            
            # 3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._generate_daily_report()
            
            # 4. –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –º–∞—Ç—á–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            self._generate_predictions_for_new_matches()
            
            self.last_update_times['evening'] = datetime.now()
            logger.info("‚úÖ –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–µ—á–µ—Ä–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    
    def _generate_predictions_for_new_matches(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π"""
        try:
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
            # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É
            
            logger.info("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–∞—Ç—á–µ–π...")
            
            # –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏ –∏–∑ API –∏–ª–∏ Universal Collector
            new_matches_count = 3  # –ó–∞–≥–ª—É—à–∫–∞
            predictions_made = 0
            
            for i in range(new_matches_count):
                # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
                logger.info(f"   üìä –ú–∞—Ç—á {i+1}: –ü—Ä–æ–≥–Ω–æ–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω")
                predictions_made += 1
            
            logger.info(f"‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {predictions_made} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
    
    def _update_morning_results(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–∞—Ç—á–µ–π"""
        logger.info("üìà –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–∞—Ç—á–µ–π...")
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —É—Ç—Ä–µ–Ω–Ω–∏—Ö –º–∞—Ç—á–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _update_all_daily_results(self):
        """–û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–µ–Ω—å"""
        logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞ –¥–µ–Ω—å...")
        # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        logger.info("‚úÖ –í—Å–µ –¥–Ω–µ–≤–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    
    def _generate_daily_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"""
        try:
            today = datetime.now().strftime('%Y-%m-%d')
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å
            daily_stats = {
                'date': today,
                'predictions_made': 8,  # –ó–∞–≥–ª—É—à–∫–∞
                'results_updated': 5,   # –ó–∞–≥–ª—É—à–∫–∞  
                'accuracy': 0.75,       # –ó–∞–≥–ª—É—à–∫–∞
                'api_requests_used': 3,
                'update_times': self.last_update_times
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
            report_file = f"daily_reports/report_{today}.json"
            os.makedirs("daily_reports", exist_ok=True)
            
            with open(report_file, 'w') as f:
                json.dump(daily_stats, f, indent=2, default=str)
            
            logger.info(f"üìã –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–Ω—è: {daily_stats['predictions_made']} –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, —Ç–æ—á–Ω–æ—Å—Ç—å {daily_stats['accuracy']:.1%}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    def _log_daily_statistics(self, update_type):
        """–õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        if self.api_available:
            try:
                usage = self.get_usage()
                logger.info(f"üìä API Usage: {usage.get('requests_this_hour', 0)}/{usage.get('max_per_hour', 30)}")
            except:
                logger.info("üìä API —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def start_scheduler(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if self.running:
            logger.warning("‚ö†Ô∏è –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        logger.info("üöÄ –ó–ê–ü–£–°–ö –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ì–û –ü–õ–ê–ù–ò–†–û–í–©–ò–ö–ê")
        logger.info("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        logger.info("   üåÖ 08:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        logger.info("   ‚òÄÔ∏è 14:00 - –î–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ") 
        logger.info("   üåÜ 20:00 - –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule.clear()
        schedule.every().day.at("08:00").do(self.morning_update)
        schedule.every().day.at("14:00").do(self.afternoon_update)
        schedule.every().day.at("20:00").do(self.evening_update)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        schedule.every().sunday.at("22:00").do(self.weekly_retrain)
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scheduler_thread = threading.Thread(target=self._run_scheduler, daemon=True)
        self.scheduler_thread.start()
        
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
    
    def _run_scheduler(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
                time.sleep(300)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º 5 –º–∏–Ω—É—Ç
    
    def stop_scheduler(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        logger.info("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞...")
        self.running = False
        if self.scheduler_thread:
            self.scheduler_thread.join(timeout=5)
        schedule.clear()
        logger.info("‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    def weekly_retrain(self):
        """üß† –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ (–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 22:00)"""
        logger.info("üß† –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–û–ï –ü–ï–†–ï–û–ë–£–ß–ï–ù–ò–ï - –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 22:00")
        
        try:
            # –õ–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìö –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ–¥–µ–ª—é...")
            logger.info("üîÑ –ü–µ—Ä–µ–æ–±—É—á–∞–µ–º ML –º–æ–¥–µ–ª–∏...")
            logger.info("üìä –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –∞–Ω—Å–∞–º–±–ª—è...")
            logger.info("‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
    
    def manual_update_now(self):
        """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ–π—á–∞—Å"""
        logger.info("üîÑ –†–£–ß–ù–û–ï –û–ë–ù–û–í–õ–ï–ù–ò–ï")
        current_hour = datetime.now().hour
        
        if 6 <= current_hour < 12:
            self.morning_update()
        elif 12 <= current_hour < 18:
            self.afternoon_update()
        else:
            self.evening_update()
    
    def get_status(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        return {
            'running': self.running,
            'last_updates': self.last_update_times,
            'next_scheduled': [
                str(job) for job in schedule.jobs
            ],
            'api_available': self.api_available
        }

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Ç–∏–ª–∏—Ç—ã

def install_as_service():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–∞–∫ —Å–∏—Å—Ç–µ–º–Ω–∞—è —Å–ª—É–∂–±–∞ (Linux)"""
    service_content = f'''[Unit]
Description=Tennis Data Scheduler
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory={os.getcwd()}
Environment=PATH={os.getcwd()}/tennis_env/bin
ExecStart={os.getcwd()}/tennis_env/bin/python scheduler.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
'''
    
    with open('/tmp/tennis-scheduler.service', 'w') as f:
        f.write(service_content)
    
    print("üìã –§–∞–π–ª —Å–ª—É–∂–±—ã —Å–æ–∑–¥–∞–Ω: /tmp/tennis-scheduler.service")
    print("üîß –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   sudo cp /tmp/tennis-scheduler.service /etc/systemd/system/")
    print("   sudo systemctl daemon-reload")
    print("   sudo systemctl enable tennis-scheduler")
    print("   sudo systemctl start tennis-scheduler")

def create_cron_job():
    """–°–æ–∑–¥–∞–Ω–∏–µ cron –∑–∞–¥–∞—á –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞"""
    cron_content = f'''# Tennis Data Scheduler - 3 times daily
0 8 * * * cd {os.getcwd()} && python3 -c "from scheduler import TennisDataScheduler; s=TennisDataScheduler(); s.morning_update()"
0 14 * * * cd {os.getcwd()} && python3 -c "from scheduler import TennisDataScheduler; s=TennisDataScheduler(); s.afternoon_update()"  
0 20 * * * cd {os.getcwd()} && python3 -c "from scheduler import TennisDataScheduler; s=TennisDataScheduler(); s.evening_update()"
0 22 * * 0 cd {os.getcwd()} && python3 -c "from scheduler import TennisDataScheduler; s=TennisDataScheduler(); s.weekly_retrain()"
'''
    
    with open('/tmp/tennis_cron.txt', 'w') as f:
        f.write(cron_content)
    
    print("üìã Cron –∑–∞–¥–∞—á–∏ —Å–æ–∑–¥–∞–Ω—ã: /tmp/tennis_cron.txt")
    print("üîß –î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:")
    print("   crontab /tmp/tennis_cron.txt")
    print("   crontab -l  # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å")

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
if __name__ == "__main__":
    import sys
    
    scheduler = TennisDataScheduler()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        
        if command == "start":
            scheduler.start_scheduler()
            print("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
            try:
                while True:
                    time.sleep(1)
            except KeyboardInterrupt:
                scheduler.stop_scheduler()
                
        elif command == "test":
            print("üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ...")
            scheduler.manual_update_now()
            
        elif command == "status":
            status = scheduler.get_status()
            print(f"üìä –°—Ç–∞—Ç—É—Å: {json.dumps(status, indent=2, default=str)}")
            
        elif command == "install-service":
            install_as_service()
            
        elif command == "install-cron":
            create_cron_job()
            
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
            
    else:
        print("‚è∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ô –ü–õ–ê–ù–ò–†–û–í–©–ò–ö –¢–ï–ù–ù–ò–°–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python scheduler.py start           # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print("  python scheduler.py test            # –¢–µ—Å—Ç–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ")
        print("  python scheduler.py status          # –°—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
        print("  python scheduler.py install-service # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ —Å–ª—É–∂–±—É")
        print("  python scheduler.py install-cron    # –°–æ–∑–¥–∞—Ç—å cron –∑–∞–¥–∞—á–∏")
        print("")
        print("üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:")
        print("  üåÖ 08:00 - –£—Ç—Ä–µ–Ω–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–Ω–æ–≤—ã–µ –º–∞—Ç—á–∏)")
        print("  ‚òÄÔ∏è 14:00 - –î–Ω–µ–≤–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏)")
        print("  üåÜ 20:00 - –í–µ—á–µ—Ä–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã)")
        print("  üß† –í–æ—Å–∫—Ä 22:00 - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ")