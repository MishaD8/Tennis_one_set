#!/usr/bin/env python3
"""
üìä –ó–ê–í–ï–†–®–ï–ù–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø –†–ï–ó–£–õ–¨–¢–ê–¢–û–í
–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏
"""

import os
import json
import csv
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
import numpy as np

class CompletePredictionLogger:
    """–ü–æ–ª–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    
    def __init__(self, data_dir="prediction_logs"):
        self.data_dir = data_dir
        self.db_path = os.path.join(data_dir, "predictions.db")
        self.csv_path = os.path.join(data_dir, "predictions.csv")
        self.stats_file = os.path.join(data_dir, "accuracy_stats.json")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if not os.path.exists(data_dir):
            os.makedirs(data_dir)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self._init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSV
        self._init_csv()
        
    def _init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
                # –í–ê–ñ–ù–û: —Å–æ–∑–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
            self.conn = sqlite3.connect(self.db_path)
            
            self.conn.execute('''
            CREATE TABLE IF NOT EXISTS predictions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp TEXT NOT NULL,
                match_date TEXT NOT NULL,
                player1 TEXT NOT NULL,
                player2 TEXT NOT NULL,
                tournament TEXT,
                surface TEXT,
                round_name TEXT,
                our_probability REAL NOT NULL,
                confidence TEXT,
                ml_system TEXT,
                prediction_type TEXT,
                key_factors TEXT,
                
                -- –ë—É–∫–º–µ–∫–µ—Ä—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
                bookmaker_odds REAL,
                bookmaker_probability REAL,
                edge REAL,
                recommendation TEXT,
                
                -- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–∑–∞–ø–æ–ª–Ω—è—é—Ç—Å—è –ø–æ–∑–∂–µ)
                actual_result TEXT,
                actual_winner TEXT,
                sets_won_p1 INTEGER,
                sets_won_p2 INTEGER,
                match_score TEXT,
                
                -- –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                correct_prediction INTEGER,
                profit_loss REAL,
                logged_result INTEGER DEFAULT 0,
                
                -- –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
            ''')
            
            # –ò–Ω–¥–µ–∫—Å—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            self.conn.execute('CREATE INDEX IF NOT EXISTS idx_match_date ON predictions(match_date)')
            self.conn.execute('CREATE INDEX IF NOT EXISTS idx_players ON predictions(player1, player2)')
            self.conn.execute('CREATE INDEX IF NOT EXISTS idx_logged ON predictions(logged_result)')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.conn.commit()
            
            print(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")

    # –¢–ê–ö–ñ–ï —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ __init__ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è _init_database:
    def __init__(self, data_dir="prediction_logs"):
        self.data_dir = data_dir
        self.db_path = os.path.join(data_dir, "predictions.db")
        self.csv_path = os.path.join(data_dir, "predictions.csv")
        self.stats_file = os.path.join(data_dir, "accuracy_stats.json")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
        if not os.path.exists(data_dir):
            os.makedirs(data_dir)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {data_dir}")
        
        # –í–ê–ñ–ù–û: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (—Å–æ–∑–¥–∞–µ—Ç self.conn)
        self._init_database()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º CSV
        self._init_csv()
    
    def _init_csv(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CSV —Ñ–∞–π–ª–∞"""
        if not os.path.exists(self.csv_path):
            headers = [
                'id', 'timestamp', 'match_date', 'player1', 'player2',
                'tournament', 'surface', 'round_name', 
                'our_probability', 'confidence', 'ml_system', 'prediction_type',
                'bookmaker_odds', 'edge', 'recommendation',
                'actual_result', 'actual_winner', 'sets_won_p1', 'sets_won_p2',
                'correct_prediction', 'profit_loss', 'logged_result'
            ]
            
            with open(self.csv_path, 'w', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow(headers)
            
            print(f"‚úÖ CSV —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω: {self.csv_path}")
    
    def log_prediction(self, prediction_data):
        """–õ–æ–≥–∏—Ä—É–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–∞—Ç—á –≤ –ë–î –∏ CSV"""
        timestamp = datetime.now().isoformat()
        prediction_id = f"pred_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        player1 = prediction_data.get('player1', '')
        player2 = prediction_data.get('player2', '')
        tournament = prediction_data.get('tournament', '')
        surface = prediction_data.get('surface', '')
        round_name = prediction_data.get('round', 'R64')
        
        our_prob = prediction_data.get('our_probability', 0.5)
        confidence = prediction_data.get('confidence', 'Medium')
        ml_system = prediction_data.get('ml_system', 'Unknown')
        prediction_type = prediction_data.get('prediction_type', 'ML_PREDICTION')
        key_factors = json.dumps(prediction_data.get('key_factors', []))
        
        # –ë—É–∫–º–µ–∫–µ—Ä—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
        bookmaker_odds = prediction_data.get('bookmaker_odds', 2.0)
        bookmaker_prob = 1 / bookmaker_odds if bookmaker_odds else 0.5
        edge = our_prob - bookmaker_prob
        recommendation = 'BET' if edge > 0.05 else 'PASS'
        
        try:
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º cursor –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è lastrowid
            cursor = self.conn.cursor()
            cursor.execute('''
                INSERT INTO predictions (
                    timestamp, match_date, player1, player2, tournament, surface, round_name,
                    our_probability, confidence, ml_system, prediction_type, key_factors,
                    bookmaker_odds, bookmaker_probability, edge, recommendation
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                timestamp, prediction_data.get('match_date', datetime.now().date().isoformat()),
                player1, player2, tournament, surface, round_name,
                our_prob, confidence, ml_system, prediction_type, key_factors,
                bookmaker_odds, bookmaker_prob, edge, recommendation
            ))
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: cursor.lastrowid –≤–º–µ—Å—Ç–æ conn.lastrowid
            row_id = cursor.lastrowid
            self.conn.commit()
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ CSV
            with open(self.csv_path, 'a', newline='', encoding='utf-8') as f:
                writer = csv.writer(f)
                writer.writerow([
                    row_id, timestamp, prediction_data.get('match_date', datetime.now().date().isoformat()),
                    player1, player2, tournament, surface, round_name,
                    our_prob, confidence, ml_system, prediction_type,
                    bookmaker_odds, edge, recommendation,
                    '', '', '', '', '', '', 0  # –ü—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                ])
            
            print(f"üìù –ü—Ä–æ–≥–Ω–æ–∑ –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω: {player1} vs {player2}")
            print(f"   –ù–∞—à –ø—Ä–æ–≥–Ω–æ–∑: {our_prob:.1%} vs –ë—É–∫–º–µ–∫–µ—Ä—ã: {bookmaker_prob:.1%}")
            print(f"   –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ: {edge:+.1%} ‚Üí {recommendation}")
            print(f"   ID –≤ –ë–î: {row_id}")
            
            return str(row_id)
            
        except Exception as e:
            self.conn.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            return None
    
    def update_result(self, player1: str, player2: str, match_date: str,
                     actual_winner: str, match_score: str = "") -> bool:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞"""
        try:
            # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç
            sets_p1, sets_p2 = self._parse_score(match_score)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            with sqlite3.connect(self.db_path) as conn:
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–ø–∏—Å—å
                cursor = conn.execute('''
                SELECT id, our_probability, bookmaker_odds, recommendation 
                FROM predictions 
                WHERE player1 = ? AND player2 = ? AND match_date = ? AND logged_result = 0
                LIMIT 1
                ''', (player1, player2, match_date))
                
                row = cursor.fetchone()
                if not row:
                    print(f"‚ùå –ú–∞—Ç—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {player1} vs {player2} –Ω–∞ {match_date}")
                    return False
                
                db_id, our_prob, bookmaker_odds, recommendation = row
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–∞
                predicted_winner = player1 if our_prob > 0.5 else player2
                correct = 1 if predicted_winner == actual_winner else 0
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫
                if recommendation == 'BET':
                    stake = 100  # –£—Å–ª–æ–≤–Ω–∞—è —Å—Ç–∞–≤–∫–∞ $100
                    if actual_winner == player1:  # –í—ã–∏–≥—Ä–∞–ª–∏
                        profit = stake * (bookmaker_odds - 1)
                    else:  # –ü—Ä–æ–∏–≥—Ä–∞–ª–∏
                        profit = -stake
                else:
                    profit = 0.0  # –ù–µ —Å—Ç–∞–≤–∏–ª–∏
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                conn.execute('''
                UPDATE predictions SET 
                    actual_result = 'COMPLETED',
                    actual_winner = ?,
                    sets_won_p1 = ?,
                    sets_won_p2 = ?,
                    match_score = ?,
                    correct_prediction = ?,
                    profit_loss = ?,
                    logged_result = 1
                WHERE id = ?
                ''', (actual_winner, sets_p1, sets_p2, match_score, correct, profit, db_id))
            
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω: {actual_winner} –ø–æ–±–µ–¥–∏–ª")
            print(f"   –ü—Ä–æ–≥–Ω–æ–∑ {'–í–ï–†–ù–´–ô' if correct else '–ù–ï–í–ï–†–ù–´–ô'}")
            if recommendation == 'BET':
                print(f"   –ü—Ä–∏–±—ã–ª—å/—É–±—ã—Ç–æ–∫: ${profit:.2f}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_accuracy_stats()
            
            return True
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
            return False
    
    def _parse_score(self, score: str) -> tuple:
        """–ü–∞—Ä—Å–∏—Ç —Å—á–µ—Ç –º–∞—Ç—á–∞ –ø–æ —Å–µ—Ç–∞–º"""
        try:
            if not score:
                return (0, 0)
            
            # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å–µ—Ç—ã
            clean_score = score.replace('(', '').replace(')', '').replace('[', '').replace(']', '')
            sets = clean_score.split(',') if ',' in clean_score else clean_score.split()
            
            p1_sets = 0
            p2_sets = 0
            
            for set_score in sets:
                set_score = set_score.strip()
                if '-' in set_score:
                    games = set_score.split('-')
                    if len(games) == 2:
                        try:
                            g1, g2 = int(games[0]), int(games[1])
                            if g1 > g2:
                                p1_sets += 1
                            else:
                                p2_sets += 1
                        except ValueError:
                            continue
            
            return (p1_sets, p2_sets)
            
        except Exception:
            return (0, 0)
    
    def _update_accuracy_stats(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                # –ß–∏—Ç–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏
                df = pd.read_sql_query('''
                SELECT * FROM predictions WHERE logged_result = 1
                ''', conn)
            
            if len(df) == 0:
                return
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_predictions = len(df)
            correct_predictions = df['correct_prediction'].sum()
            accuracy = correct_predictions / total_predictions
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º
            bet_predictions = df[df['recommendation'] == 'BET']
            bet_count = len(bet_predictions)
            
            if bet_count > 0:
                bet_correct = bet_predictions['correct_prediction'].sum()
                bet_accuracy = bet_correct / bet_count
                total_profit = bet_predictions['profit_loss'].sum()
                avg_profit = total_profit / bet_count
                roi = (total_profit / (bet_count * 100)) * 100  # ROI –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
            else:
                bet_accuracy = 0
                total_profit = 0
                avg_profit = 0
                roi = 0
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            confidence_stats = {}
            for conf in ['High', 'Medium', 'Low']:
                conf_df = df[df['confidence'] == conf]
                if len(conf_df) > 0:
                    confidence_stats[conf] = {
                        'count': len(conf_df),
                        'accuracy': conf_df['correct_prediction'].mean(),
                        'avg_probability': conf_df['our_probability'].mean()
                    }
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–µ—Ä–∏–æ–¥–∞–º
            df['match_date'] = pd.to_datetime(df['match_date'])
            last_30_days = df[df['match_date'] >= datetime.now() - timedelta(days=30)]
            last_7_days = df[df['match_date'] >= datetime.now() - timedelta(days=7)]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = {
                'updated': datetime.now().isoformat(),
                'total_predictions': int(total_predictions),
                'correct_predictions': int(correct_predictions),
                'overall_accuracy': float(accuracy),
                
                'bet_recommendations': int(bet_count),
                'bet_accuracy': float(bet_accuracy),
                'total_profit': float(total_profit),
                'average_profit_per_bet': float(avg_profit),
                'roi_percentage': float(roi),
                
                'confidence_breakdown': confidence_stats,
                
                'recent_performance': {
                    'last_30_days': {
                        'count': len(last_30_days),
                        'accuracy': float(last_30_days['correct_prediction'].mean()) if len(last_30_days) > 0 else 0
                    },
                    'last_7_days': {
                        'count': len(last_7_days),
                        'accuracy': float(last_7_days['correct_prediction'].mean()) if len(last_7_days) > 0 else 0
                    }
                }
            }
            
            with open(self.stats_file, 'w', encoding='utf-8') as f:
                json.dump(stats, f, indent=2)
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:")
            print(f"   –û–±—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%} ({correct_predictions}/{total_predictions})")
            if bet_count > 0:
                print(f"   –¢–æ—á–Ω–æ—Å—Ç—å —Å—Ç–∞–≤–æ–∫: {bet_accuracy:.1%} ({bet_count} —Å—Ç–∞–≤–æ–∫)")
                print(f"   ROI: {roi:.1f}%")
            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
    
    def get_accuracy_report(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        try:
            if os.path.exists(self.stats_file):
                with open(self.stats_file, 'r', encoding='utf-8') as f:
                    stats = json.load(f)
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–µ–Ω–¥—ã
                with sqlite3.connect(self.db_path) as conn:
                    df = pd.read_sql_query('''
                    SELECT match_date, correct_prediction, our_probability, confidence
                    FROM predictions WHERE logged_result = 1
                    ORDER BY match_date
                    ''', conn)
                
                if len(df) > 0:
                    df['match_date'] = pd.to_datetime(df['match_date'])
                    
                    # –¢—Ä–µ–Ω–¥ —Ç–æ—á–Ω–æ—Å—Ç–∏ (—Å–∫–æ–ª—å–∑—è—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –ø–æ 10 –º–∞—Ç—á–∞–º)
                    df['accuracy_trend'] = df['correct_prediction'].rolling(window=10, min_periods=1).mean()
                    
                    # –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ (–Ω–∞—Å–∫–æ–ª—å–∫–æ –Ω–∞—à–∏ –ø—Ä–æ—Ü–µ–Ω—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏)
                    prob_bins = pd.cut(df['our_probability'], bins=[0, 0.5, 0.7, 0.9, 1.0], 
                                     labels=['Low', 'Medium', 'High', 'Very High'])
                    calibration = df.groupby(prob_bins)['correct_prediction'].agg(['count', 'mean']).to_dict()
                    
                    stats['trends'] = {
                        'latest_accuracy_trend': float(df['accuracy_trend'].iloc[-1]) if len(df) > 0 else 0,
                        'calibration': calibration
                    }
                
                return stats
            else:
                return {"message": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"}
                
        except Exception as e:
            return {"error": str(e)}
    
    def export_data(self, format='csv') -> str:
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            
            with sqlite3.connect(self.db_path) as conn:
                df = pd.read_sql_query('SELECT * FROM predictions', conn)
            
            if format == 'csv':
                export_file = os.path.join(self.data_dir, f'predictions_export_{timestamp}.csv')
                df.to_csv(export_file, index=False)
            elif format == 'excel':
                export_file = os.path.join(self.data_dir, f'predictions_export_{timestamp}.xlsx')
                df.to_excel(export_file, index=False)
            else:
                export_file = os.path.join(self.data_dir, f'predictions_export_{timestamp}.json')
                df.to_json(export_file, orient='records', indent=2)
            
            print(f"üìÅ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã: {export_file}")
            return export_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            return ""
    
    def get_pending_predictions(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑—ã –æ–∂–∏–¥–∞—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        try:
            with sqlite3.connect(self.db_path) as conn:
                cursor = conn.execute('''
                SELECT id, player1, player2, match_date, tournament, our_probability, confidence
                FROM predictions 
                WHERE logged_result = 0 
                ORDER BY match_date DESC
                ''')
                
                pending = []
                for row in cursor.fetchall():
                    pending.append({
                        'id': row[0],
                        'player1': row[1],
                        'player2': row[2],
                        'match_date': row[3],
                        'tournament': row[4],
                        'our_probability': row[5],
                        'confidence': row[6]
                    })
                
                return pending
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {e}")
            return []


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    print("üìä –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
    logger = CompletePredictionLogger()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑–∞
    test_prediction = {
        'player1': 'Flavio Cobolli',
        'player2': 'Novak Djokovic',
        'tournament': 'Wimbledon',
        'surface': 'Grass',
        'round': 'R64',
        'match_date': '2025-07-10',
        'our_probability': 0.25,
        'confidence': 'Medium',
        'ml_system': 'REAL_ML_MODEL',
        'prediction_type': 'UNDERDOG_ANALYSIS',
        'key_factors': ['Grass advantage', 'Underdog potential', 'Recent form'],
        'bookmaker_odds': 4.5
    }
    
    # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑
    print("1Ô∏è‚É£ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
    prediction_id = logger.log_prediction(test_prediction)
    
    # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Ç—á–∞
    print("\n2Ô∏è‚É£ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...")
    logger.update_result(
        player1='Flavio Cobolli',
        player2='Novak Djokovic', 
        match_date='2025-07-10',
        actual_winner='Novak Djokovic',
        match_score='6-4, 6-2, 6-3'
    )
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç
    print("\n3Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ —Ç–æ—á–Ω–æ—Å—Ç–∏...")
    report = logger.get_accuracy_report()
    print(f"üìä –û—Ç—á–µ—Ç: {json.dumps(report, indent=2, default=str)}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    print("\n4Ô∏è‚É£ –û–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≥–Ω–æ–∑—ã...")
    pending = logger.get_pending_predictions()
    print(f"üìã –û–∂–∏–¥–∞—é—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {len(pending)}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    print("\n5Ô∏è‚É£ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö...")
    export_file = logger.export_data('csv')
    
    print("\n‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print(f"üìÅ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {logger.db_path}")
    print(f"üìÑ CSV —Ñ–∞–π–ª: {logger.csv_path}")
    print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {logger.stats_file}")


class PredictionLoggerIntegration:
    """–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞ —Å –≤–∞—à–µ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π"""
    
    def __init__(self):
        self.logger = CompletePredictionLogger()
    
    def log_match_prediction(self, match_result: Dict) -> str:
        """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –≤–∞—à–∏–º underdog analyzer"""
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ underdog_analysis –∫ —Ñ–æ—Ä–º–∞—Ç—É –ª–æ–≥–≥–µ—Ä–∞
        if 'underdog_analysis' in match_result:
            analysis = match_result['underdog_analysis']
            scenario = analysis.get('underdog_scenario', {})
            
            match_data = {
                'player1': match_result.get('player1', '').replace('üéæ ', ''),
                'player2': match_result.get('player2', '').replace('üéæ ', ''),
                'tournament': match_result.get('tournament', '').replace('üèÜ ', ''),
                'surface': match_result.get('surface', 'Hard'),
                'round': match_result.get('round', 'R64'),
                'match_date': match_result.get('date', datetime.now().date().isoformat()),
                'our_probability': analysis.get('underdog_probability', 0.5),
                'confidence': analysis.get('confidence', 'Medium'),
                'ml_system': analysis.get('ml_system_used', 'Unknown'),
                'prediction_type': analysis.get('prediction_type', 'UNDERDOG_ANALYSIS'),
                'key_factors': analysis.get('key_factors', []),
                'bookmaker_odds': match_result.get('odds', {}).get('player1', 2.0)
            }
            
            return self.logger.log_prediction(match_data)
        
        return ""
    
    def bulk_log_matches(self, matches_list: List[Dict]) -> List[str]:
        """–õ–æ–≥–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∞—Ç—á–µ–π —Å—Ä–∞–∑—É"""
        logged_ids = []
        
        for match in matches_list:
            try:
                prediction_id = self.log_match_prediction(match)
                if prediction_id:
                    logged_ids.append(prediction_id)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–∞—Ç—á–∞: {e}")
                continue
        
        print(f"üìù –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ {len(logged_ids)} –∏–∑ {len(matches_list)} –º–∞—Ç—á–µ–π")
        return logged_ids
    
    def update_match_results_from_api(self, api_results: List[Dict]) -> int:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π –∏–∑ –≤–Ω–µ—à–Ω–µ–≥–æ API"""
        updated_count = 0
        
        for result in api_results:
            try:
                success = self.logger.update_result(
                    player1=result.get('player1'),
                    player2=result.get('player2'),
                    match_date=result.get('match_date'),
                    actual_winner=result.get('winner'),
                    match_score=result.get('score', '')
                )
                
                if success:
                    updated_count += 1
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {e}")
                continue
        
        print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ {updated_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        return updated_count
    
    def get_system_performance(self) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏—Å—Ç–µ–º—ã"""
        report = self.logger.get_accuracy_report()
        
        if 'error' in report:
            return {'status': 'error', 'message': report['error']}
        
        # –ê–¥–∞–ø—Ç–∏—Ä—É–µ–º –¥–ª—è –≤–∞—à–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        performance = {
            'status': 'active',
            'total_predictions': report.get('total_predictions', 0),
            'accuracy': report.get('overall_accuracy', 0),
            'bet_performance': {
                'total_bets': report.get('bet_recommendations', 0),
                'bet_accuracy': report.get('bet_accuracy', 0),
                'roi': report.get('roi_percentage', 0),
                'profit': report.get('total_profit', 0)
            },
            'recent_performance': report.get('recent_performance', {}),
            'confidence_breakdown': report.get('confidence_breakdown', {}),
            'last_updated': report.get('updated', datetime.now().isoformat())
        }
        
        return performance


# –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å tennis_backend.py
def integrate_with_tennis_backend():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å –≤–∞—à–∏–º tennis_backend.py"""
    
    integration_code = '''
# –î–æ–±–∞–≤—å—Ç–µ –≤ tennis_backend.py –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞:

from complete_logging_system import PredictionLoggerIntegration

# –°–æ–∑–¥–∞–π—Ç–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
prediction_logger = PredictionLoggerIntegration()

# –í —Ñ—É–Ω–∫—Ü–∏–∏ get_live_matches_with_underdog_focus() –¥–æ–±–∞–≤—å—Ç–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Ç—á–µ–π:

def get_live_matches_with_underdog_focus():
    # ... –≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ ...
    
    # –í –∫–æ–Ω—Ü–µ —Ñ—É–Ω–∫—Ü–∏–∏, –ø–µ—Ä–µ–¥ return:
    if processed_matches:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
        logged_ids = prediction_logger.bulk_log_matches(processed_matches)
        print(f"üìù –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {len(logged_ids)}")
    
    return {
        'matches': processed_matches,
        'source': f"LIVE_API_{api_result['status']}",
        'success': True,
        'logged_predictions': len(logged_ids) if processed_matches else 0
    }

# –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π API endpoint:

@app.route('/api/prediction-stats', methods=['GET'])
def get_prediction_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    try:
        stats = prediction_logger.get_system_performance()
        return jsonify({
            'success': True,
            'stats': stats,
            'timestamp': datetime.now().isoformat()
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/update-result', methods=['POST'])
def update_match_result():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –º–∞—Ç—á–∞"""
    try:
        data = request.get_json()
        
        success = prediction_logger.logger.update_result(
            player1=data.get('player1'),
            player2=data.get('player2'),
            match_date=data.get('match_date'),
            actual_winner=data.get('actual_winner'),
            match_score=data.get('match_score', '')
        )
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Result updated successfully'
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Match not found or already updated'
            }), 404
            
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
'''
    
    print("üîó –ö–û–î –î–õ–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –° tennis_backend.py:")
    print("=" * 50)
    print(integration_code)


if __name__ == "__main__":
    integrate_with_tennis_backend()