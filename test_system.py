#!/usr/bin/env python3
"""
üéæ –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–ù–ù–ò–°–ù–û–ô –°–ò–°–¢–ï–ú–´
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –≤—ã–¥–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Ä–∞–±–æ—Ç–µ
–í–∫–ª—é—á–∞–µ—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, ML –º–æ–¥–µ–ª–µ–π –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞
"""

import os
import json
import sys
import time
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import pandas as pd
import traceback
import importlib.util
import numpy as np

class ComprehensiveTennisSystemAnalyzer:
    """–ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Ç–µ–Ω–Ω–∏—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.report = {
            'analysis_time': datetime.now().isoformat(),
            'system_components': {},
            'ml_performance': {},
            'data_integration': {},
            'learning_capability': {},
            'real_data_flow': {},
            'overall_assessment': {}
        }
        self.test_results = []
        
    def analyze_file_structure(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        print("üìÅ –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í")
        print("=" * 50)
        
        critical_files = {
            'main_backend': 'tennis_backend.py',
            'ml_predictor': 'real_tennis_predictor_integration.py', 
            'prediction_service': 'tennis_prediction_module.py',
            'api_economy': 'api_economy_patch.py',
            'odds_integration': 'correct_odds_api_integration.py',
            'universal_collector': 'universal_tennis_data_collector.py',
            'advanced_ml': 'advanced_tennis_ml_predictor_fixed.py',
            'set_predictor': 'tennis_set_predictor.py',
            'logging_system': 'prediction_logging_system.py',
            'config': 'config.json',
            'models_dir': 'tennis_models/',
            'data_dir': 'tennis_data_enhanced/',
            'logs_dir': 'prediction_logs/',
            'cache_file': 'api_cache.json',
            'usage_file': 'api_usage.json'
        }
        
        file_status = {}
        total_files = len(critical_files)
        found_files = 0
        
        for component, filename in critical_files.items():
            exists = os.path.exists(filename)
            if exists:
                found_files += 1
                if os.path.isfile(filename):
                    size = os.path.getsize(filename)
                    status = f"‚úÖ {size:,} bytes"
                elif os.path.isdir(filename):
                    try:
                        items = len(os.listdir(filename))
                        status = f"‚úÖ {items} items"
                    except:
                        status = "‚úÖ Directory (access denied)"
                else:
                    status = "‚úÖ Exists"
            else:
                status = "‚ùå Missing"
            
            file_status[component] = {
                'path': filename,
                'exists': exists,
                'status': status
            }
            
            print(f"{component:20}: {status}")
        
        print(f"\nüìä –§–∞–π–ª–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {found_files}/{total_files} ({found_files/total_files*100:.1f}%)")
        
        return {
            'files': file_status,
            'completeness': found_files / total_files,
            'critical_missing': [comp for comp, info in file_status.items() if not info['exists']]
        }
    
    def test_imports_and_modules(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π"""
        print("\nüîß –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ú–ü–û–†–¢–û–í –ò –ú–û–î–£–õ–ï–ô")
        print("=" * 50)
        
        modules_to_test = {
            'real_tennis_predictor_integration': 'RealTennisPredictor',
            'tennis_prediction_module': 'TennisPredictionService', 
            'api_economy_patch': 'economical_tennis_request',
            'correct_odds_api_integration': 'TennisOddsIntegrator',
            'universal_tennis_data_collector': 'UniversalTennisDataCollector',
            'prediction_logging_system': 'CompletePredictionLogger',
            'tennis_set_predictor': 'EnhancedTennisPredictor'
        }
        
        import_results = {}
        successful_imports = 0
        
        for module_name, class_name in modules_to_test.items():
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                module = importlib.import_module(module_name)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª–∞—Å—Å–∞
                if hasattr(module, class_name):
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä
                    cls = getattr(module, class_name)
                    if class_name == 'economical_tennis_request':
                        # –≠—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è, –Ω–µ –∫–ª–∞—Å—Å
                        status = "‚úÖ Function available"
                        working = True
                        error = None
                    else:
                        instance = cls()
                        status = "‚úÖ Working"
                        working = True
                        error = None
                    successful_imports += 1
                else:
                    status = f"‚ö†Ô∏è Class {class_name} not found"
                    working = False
                    error = f"Class {class_name} missing"
                    
            except Exception as e:
                status = f"‚ùå Error: {str(e)[:50]}..."
                working = False
                error = str(e)
            
            import_results[module_name] = {
                'status': status,
                'working': working,
                'class_name': class_name,
                'error': error
            }
            
            print(f"{module_name:35}: {status}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤: {successful_imports}/{len(modules_to_test)}")
        
        return {
            'results': import_results,
            'success_rate': successful_imports / len(modules_to_test),
            'working_modules': [name for name, info in import_results.items() if info['working']]
        }
    
    def test_ml_models_comprehensive(self) -> Dict:
        """–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π"""
        print("\nü§ñ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï ML –ú–û–î–ï–õ–ï–ô")
        print("=" * 50)
        
        ml_results = {}
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º TennisPredictionService
        try:
            from tennis_prediction_module import TennisPredictionService
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º TennisPredictionService...")
            service = TennisPredictionService()
            
            if service.load_models():
                print("  ‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
                
                # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞
                test_data = {
                    'player_rank': 5.0,
                    'opponent_rank': 1.0,
                    'player_age': 27.0,
                    'opponent_age': 23.0,
                    'player_recent_win_rate': 0.75,
                    'player_form_trend': 0.05,
                    'player_surface_advantage': 0.02,
                    'h2h_win_rate': 0.6,
                    'total_pressure': 3.5
                }
                
                prediction = service.predict_match(test_data, return_details=True)
                
                print(f"  üéØ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑: {prediction['probability']:.1%}")
                print(f"  üîß –ú–æ–¥–µ–ª–∏: {', '.join(prediction.get('individual_predictions', {}).keys())}")
                print(f"  üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤: {len(prediction.get('input_data', {}))}")
                
                ml_results['prediction_service'] = {
                    'available': True,
                    'models_loaded': True,
                    'models_count': len(prediction.get('individual_predictions', {})),
                    'test_probability': prediction['probability'],
                    'confidence': prediction['confidence']
                }
            else:
                print("  ‚ùå –ú–æ–¥–µ–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
                ml_results['prediction_service'] = {'available': False, 'error': 'Models not loaded'}
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ TennisPredictionService: {e}")
            ml_results['prediction_service'] = {'available': False, 'error': str(e)}
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º RealTennisPredictor
        try:
            from real_tennis_predictor_integration import RealTennisPredictor
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º RealTennisPredictor...")
            predictor = RealTennisPredictor()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
            result = predictor.predict_match(
                'Carlos Alcaraz', 'Novak Djokovic', 
                'US Open', 'Hard', 'SF'
            )
            
            print(f"  üéØ –¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑: {result['probability']:.1%}")
            print(f"  üé™ –¢–∏–ø: {result['prediction_type']}")
            print(f"  üîç –§–∞–∫—Ç–æ—Ä–æ–≤: {len(result.get('key_factors', []))}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Ä–µ–∞–ª—å–Ω—ã–µ ML –º–æ–¥–µ–ª–∏
            uses_real_ml = hasattr(predictor, 'prediction_service') and predictor.prediction_service is not None
            
            ml_results['real_predictor'] = {
                'available': True,
                'uses_real_ml': uses_real_ml,
                'prediction_type': result['prediction_type'],
                'test_probability': result['probability'],
                'confidence': result['confidence']
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ RealTennisPredictor: {e}")
            ml_results['real_predictor'] = {'available': False, 'error': str(e)}
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º EnhancedTennisPredictor
        try:
            from tennis_set_predictor import EnhancedTennisPredictor
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º EnhancedTennisPredictor...")
            enhanced = EnhancedTennisPredictor()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            test_data = pd.DataFrame({
                'player_rank': [10.0],
                'opponent_rank': [1.0],
                'player_age': [25.0],
                'opponent_age': [23.0],
                'player_recent_win_rate': [0.8],
                'player_form_trend': [0.1],
                'player_surface_advantage': [0.05],
                'h2h_win_rate': [0.4],
                'total_pressure': [4.0],
                'won_at_least_one_set': [1]
            })
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏
            features = enhanced.prepare_features(test_data)
            print(f"  üìä –ü—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ: {len(features.columns)}")
            
            ml_results['enhanced_predictor'] = {
                'available': True,
                'features_count': len(features.columns),
                'can_process_data': True
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ EnhancedTennisPredictor: {e}")
            ml_results['enhanced_predictor'] = {'available': False, 'error': str(e)}
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É ML —Å–∏—Å—Ç–µ–º—ã
        working_ml = sum(1 for result in ml_results.values() if result.get('available', False))
        total_ml = len(ml_results)
        
        print(f"\nüìä ML –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: {working_ml}/{total_ml}")
        
        return {
            'components': ml_results,
            'ml_score': working_ml / total_ml if total_ml > 0 else 0,
            'has_real_ml': ml_results.get('prediction_service', {}).get('available', False),
            'integration_quality': 'High' if working_ml >= 2 else 'Medium' if working_ml >= 1 else 'Low'
        }
    
    def test_real_data_integration(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        print("\nüåç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –†–ï–ê–õ–¨–ù–´–• –î–ê–ù–ù–´–•")
        print("=" * 50)
        
        data_results = {}
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º Universal Data Collector
        try:
            from universal_tennis_data_collector import UniversalTennisDataCollector, UniversalOddsCollector
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º Universal Data Collector...")
            collector = UniversalTennisDataCollector()
            odds_collector = UniversalOddsCollector()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É
            summary = collector.get_summary()
            print(f"  üìÖ –î–∞—Ç–∞: {summary['current_date']}")
            print(f"  üåç –°–µ–∑–æ–Ω: {summary['season_context']}")
            print(f"  üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {summary['active_tournaments']}")
            print(f"  üìã –ù–∞–∑–≤–∞–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–æ–≤: {summary['active_tournament_names']}")
            print(f"  üîú –°–ª–µ–¥—É—é—â–∏–π Grand Slam: {summary['next_major']}")
            
            # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
            matches = collector.get_current_matches()
            print(f"  üéæ –î–æ—Å—Ç—É–ø–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            if matches:
                odds = odds_collector.generate_realistic_odds(matches[:3])
                print(f"  üí∞ –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(odds)}")
            else:
                odds = {}
            
            data_results['universal_collector'] = {
                'working': True,
                'season_context': summary['season_context'],
                'active_tournaments': summary['active_tournaments'],
                'matches_available': len(matches),
                'odds_generation': len(odds) > 0,
                'next_major': summary['next_major']
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ Universal Collector: {e}")
            data_results['universal_collector'] = {'working': False, 'error': str(e)}
        
        # 2. –¢–µ—Å—Ç–∏—Ä—É–µ–º API Economy
        try:
            from api_economy_patch import init_api_economy, economical_tennis_request, get_api_usage
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º API Economy...")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å —Ç–µ—Å—Ç–æ–≤—ã–º –∫–ª—é—á–æ–º
            init_api_economy("test_key", max_per_hour=30, cache_minutes=10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            usage = get_api_usage()
            print(f"  üìä –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {usage['requests_this_hour']}/{usage['max_per_hour']}")
            print(f"  üíæ –í –∫–µ—à–µ: {usage['cache_items']} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            print(f"  üîÑ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {usage['manual_update_status']}")
            
            data_results['api_economy'] = {
                'working': True,
                'requests_available': usage['remaining_hour'],
                'cache_items': usage['cache_items'],
                'manual_update_support': 'manual_update_status' in usage
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ API Economy: {e}")
            data_results['api_economy'] = {'working': False, 'error': str(e)}
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        try:
            from real_tennis_predictor_integration import RealPlayerDataCollector
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤...")
            player_collector = RealPlayerDataCollector()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
            test_players = ['Carlos Alcaraz', 'Novak Djokovic', 'Iga Swiatek', 'Flavio Cobolli']
            known_players = 0
            
            for player in test_players:
                data = player_collector.get_player_data(player)
                if data['rank'] != 100:  # –ù–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    known_players += 1
                print(f"    {player}: Rank #{data['rank']}, Tour: {data['tour']}")
            
            data_results['player_data'] = {
                'working': True,
                'known_players': known_players,
                'total_tested': len(test_players),
                'coverage': known_players / len(test_players)
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤: {e}")
            data_results['player_data'] = {'working': False, 'error': str(e)}
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–µ—à
        try:
            if os.path.exists('api_cache.json'):
                with open('api_cache.json', 'r', encoding='utf-8') as f:
                    cache_data = json.load(f)
                
                matches_in_cache = len(cache_data.get('data', []))
                cache_size = os.path.getsize('api_cache.json')
                
                print(f"üî∏ API –∫–µ—à: {matches_in_cache} –º–∞—Ç—á–µ–π, {cache_size:,} bytes")
                
                data_results['api_cache'] = {
                    'exists': True,
                    'matches_count': matches_in_cache,
                    'size_bytes': cache_size,
                    'has_data': matches_in_cache > 0
                }
            else:
                print("üî∏ API –∫–µ—à: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                data_results['api_cache'] = {'exists': False}
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–µ—à–∞: {e}")
            data_results['api_cache'] = {'exists': False, 'error': str(e)}
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        working_components = sum(1 for result in data_results.values() if result.get('working', False))
        total_components = len(data_results)
        
        print(f"\nüìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç: {working_components}/{total_components}")
        
        return {
            'components': data_results,
            'integration_score': working_components / total_components if total_components > 0 else 0,
            'real_data_available': data_results.get('universal_collector', {}).get('matches_available', 0) > 0,
            'player_data_quality': data_results.get('player_data', {}).get('coverage', 0)
        }
    
    def test_learning_and_accumulation(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±—É—á–µ–Ω–∏—è"""
        print("\nüß† –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–ê–ö–û–ü–õ–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ò –û–ë–£–ß–ï–ù–ò–Ø")
        print("=" * 50)
        
        learning_results = {}
        
        # 1. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        try:
            from prediction_logging_system import CompletePredictionLogger, PredictionLoggerIntegration
            
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
            logger = CompletePredictionLogger()
            integration = PredictionLoggerIntegration()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î
            db_exists = os.path.exists(logger.db_path)
            csv_exists = os.path.exists(logger.csv_path)
            
            print(f"  üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {'‚úÖ' if db_exists else '‚ùå'}")
            print(f"  üìÑ CSV —Ñ–∞–π–ª: {'‚úÖ' if csv_exists else '‚ùå'}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
            test_prediction = {
                'player1': 'Test Player A',
                'player2': 'Test Player B',
                'tournament': 'Test Tournament',
                'surface': 'Hard',
                'match_date': datetime.now().date().isoformat(),
                'our_probability': 0.7,
                'confidence': 'High',
                'ml_system': 'TEST_SYSTEM',
                'prediction_type': 'TEST',
                'key_factors': ['Factor 1', 'Factor 2'],
                'bookmaker_odds': 1.8
            }
            
            pred_id = logger.log_prediction(test_prediction)
            logging_works = pred_id is not None and pred_id != ""
            
            print(f"  üìù –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: {'‚úÖ' if logging_works else '‚ùå'}")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats = integration.get_system_performance()
            print(f"  üìä –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {stats['total_predictions']}")
            print(f"  üéØ –¢–æ—á–Ω–æ—Å—Ç—å: {stats['accuracy']:.1%}")
            
            learning_results['logging_system'] = {
                'working': True,
                'db_exists': db_exists,
                'csv_exists': csv_exists,
                'can_log': logging_works,
                'total_predictions': stats['total_predictions'],
                'accuracy': stats['accuracy']
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            learning_results['logging_system'] = {'working': False, 'error': str(e)}
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        try:
            print("üî∏ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ...")
            
            data_dirs = ['prediction_logs', 'tennis_data_enhanced', 'tennis_models']
            accumulated_data = {}
            
            for dir_name in data_dirs:
                if os.path.exists(dir_name):
                    files = os.listdir(dir_name)
                    total_size = sum(os.path.getsize(os.path.join(dir_name, f)) 
                                   for f in files if os.path.isfile(os.path.join(dir_name, f)))
                    
                    accumulated_data[dir_name] = {
                        'files_count': len(files),
                        'total_size': total_size
                    }
                    
                    print(f"  üìÅ {dir_name}: {len(files)} —Ñ–∞–π–ª–æ–≤, {total_size:,} bytes")
                else:
                    accumulated_data[dir_name] = {'exists': False}
                    print(f"  üìÅ {dir_name}: ‚ùå –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            learning_results['data_accumulation'] = {
                'working': any(info.get('files_count', 0) > 0 for info in accumulated_data.values()),
                'directories': accumulated_data
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {e}")
            learning_results['data_accumulation'] = {'working': False, 'error': str(e)}
        
        # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
        try:
            print("üî∏ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å EnhancedTennisPredictor –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
            from tennis_set_predictor import EnhancedTennisPredictor
            
            predictor = EnhancedTennisPredictor()
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ–±–æ–ª—å—à—É—é —Ç–µ—Å—Ç–æ–≤—É—é –≤—ã–±–æ—Ä–∫—É
            np.random.seed(42)
            n_samples = 100
            
            test_data = pd.DataFrame({
                'player_rank': np.random.randint(1, 100, n_samples),
                'opponent_rank': np.random.randint(1, 100, n_samples),
                'player_age': np.random.randint(18, 35, n_samples),
                'opponent_age': np.random.randint(18, 35, n_samples),
                'player_recent_win_rate': np.random.random(n_samples),
                'player_form_trend': np.random.normal(0, 0.1, n_samples),
                'player_surface_advantage': np.random.normal(0, 0.1, n_samples),
                'h2h_win_rate': np.random.random(n_samples),
                'total_pressure': np.random.uniform(1, 4, n_samples),
                'won_at_least_one_set': np.random.binomial(1, 0.6, n_samples)
            })
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            X = predictor.prepare_features(test_data)
            y = test_data['won_at_least_one_set']
            
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ train/val
            from sklearn.model_selection import train_test_split
            X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.3, random_state=42)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ–±—É—á–∏—Ç—å (—Ç–æ–ª—å–∫–æ –±—ã—Å—Ç—Ä—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞)
            try:
                from sklearn.ensemble import RandomForestClassifier
                from sklearn.linear_model import LogisticRegression
                from sklearn.metrics import roc_auc_score
                
                # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ RF
                rf = RandomForestClassifier(n_estimators=10, random_state=42)
                rf.fit(X_train, y_train)
                rf_pred = rf.predict_proba(X_val)[:, 1]
                rf_auc = roc_auc_score(y_val, rf_pred)
                
                # –ë—ã—Å—Ç—Ä–æ–µ –æ–±—É—á–µ–Ω–∏–µ LR
                lr = LogisticRegression(random_state=42, max_iter=100)
                lr.fit(X_train, y_train)
                lr_pred = lr.predict_proba(X_val)[:, 1]
                lr_auc = roc_auc_score(y_val, lr_pred)
                
                can_retrain = True
                best_auc = max(rf_auc, lr_auc)
                
                print(f"  üèãÔ∏è –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: ‚úÖ (AUC: {best_auc:.3f})")
                
            except Exception as train_e:
                can_retrain = False
                best_auc = 0
                print(f"  üèãÔ∏è –ü–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ: ‚ùå ({str(train_e)[:50]}...)")
            
            learning_results['retraining_capability'] = {
                'working': can_retrain,
                'test_auc': best_auc,
                'data_preparable': True
            }
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è: {e}")
            learning_results['retraining_capability'] = {'working': False, 'error': str(e)}
        
        # –û—Ü–µ–Ω–∫–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é
        learning_score = sum(1 for result in learning_results.values() if result.get('working', False))
        total_learning = len(learning_results)
        
        print(f"\nüìä –ö–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç: {learning_score}/{total_learning}")
        
        return {
            'components': learning_results,
            'learning_score': learning_score / total_learning if total_learning > 0 else 0,
            'can_accumulate_data': learning_results.get('logging_system', {}).get('working', False),
            'can_retrain': learning_results.get('retraining_capability', {}).get('working', False)
        }
    
    def test_end_to_end_workflow(self) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ä–∞–±–æ—á–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞"""
        print("\nüîÑ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ù–û–ì–û –†–ê–ë–û–ß–ï–ì–û –ü–†–û–¶–ï–°–°–ê")
        print("=" * 50)
        
        workflow_results = {}
        
        try:
            print("üî∏ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞: –¥–∞–Ω–Ω—ã–µ ‚Üí ML ‚Üí –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            
            # 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            print("  1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö...")
            from universal_tennis_data_collector import UniversalTennisDataCollector, UniversalOddsCollector
            
            collector = UniversalTennisDataCollector()
            odds_collector = UniversalOddsCollector()
            
            matches = collector.get_current_matches()
            if not matches:
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
                matches = [{
                    'id': 'test_workflow_match',
                    'player1': 'Carlos Alcaraz',
                    'player2': 'Novak Djokovic',
                    'tournament': 'Test Tournament',
                    'surface': 'Hard',
                    'date': datetime.now().strftime('%Y-%m-%d'),
                    'time': '14:00',
                    'round': 'SF'
                }]
            
            print(f"    ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
            
            # 2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            print("  2Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤...")
            odds_data = odds_collector.generate_realistic_odds(matches)
            print(f"    ‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {len(odds_data)}")
            
            # 3. ML –∞–Ω–∞–ª–∏–∑
            print("  3Ô∏è‚É£ ML –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π...")
            from real_tennis_predictor_integration import RealTennisPredictor
            
            predictor = RealTennisPredictor()
            predictions = []
            
            for match in matches[:3]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3 –º–∞—Ç—á–∞
                try:
                    prediction = predictor.predict_match(
                        match['player1'], match['player2'],
                        match['tournament'], match.get('surface', 'Hard'), match.get('round', 'R32')
                    )
                    predictions.append({
                        'match_id': match['id'],
                        'probability': prediction['probability'],
                        'confidence': prediction['confidence'],
                        'prediction_type': prediction['prediction_type'],
                        'key_factors': prediction.get('key_factors', [])
                    })
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –¥–ª—è {match['player1']}: {e}")
            
            print(f"    ‚úÖ –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –º–∞—Ç—á–µ–π: {len(predictions)}")
            
            # 4. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            print("  4Ô∏è‚É£ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...")
            from prediction_logging_system import PredictionLoggerIntegration
            
            logger_integration = PredictionLoggerIntegration()
            
            logged_count = 0
            for i, prediction in enumerate(predictions):
                try:
                    match = matches[i]
                    match_result = {
                        'player1': match['player1'],
                        'player2': match['player2'],
                        'tournament': match['tournament'],
                        'surface': match.get('surface', 'Hard'),
                        'date': match['date'],
                        'prediction': prediction,
                        'underdog_analysis': {
                            'underdog_probability': prediction['probability'],
                            'confidence': prediction['confidence'],
                            'prediction_type': prediction['prediction_type'],
                            'key_factors': prediction['key_factors']
                        }
                    }
                    
                    logged_id = logger_integration.log_match_prediction(match_result)
                    if logged_id:
                        logged_count += 1
                        
                except Exception as e:
                    print(f"      ‚ö†Ô∏è –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            
            print(f"    ‚úÖ –ó–∞–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {logged_count}")
            
            # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã
            print("  5Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º—ã...")
            performance = logger_integration.get_system_performance()
            
            print(f"    üìä –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {performance['total_predictions']}")
            print(f"    üéØ –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {performance['accuracy']:.1%}")
            
            workflow_results = {
                'working': True,
                'steps_completed': 5,
                'matches_processed': len(matches),
                'odds_generated': len(odds_data),
                'predictions_made': len(predictions),
                'predictions_logged': logged_count,
                'system_accuracy': performance['accuracy'],
                'total_predictions_in_system': performance['total_predictions']
            }
            
            print(f"  ‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–æ—Ü–µ—Å—Å–µ: {e}")
            traceback.print_exc()
            workflow_results = {
                'working': False,
                'error': str(e),
                'error_details': traceback.format_exc()
            }
        
        return workflow_results
    
    def analyze_system_intelligence(self) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ '—É–º–Ω–æ—Å—Ç–∏' —Å–∏—Å—Ç–µ–º—ã - —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–∏ –æ–Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ"""
        print("\nüß† –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–õ–õ–ï–ö–¢–ê –°–ò–°–¢–ï–ú–´")
        print("=" * 50)
        
        intelligence_results = {}
        
        # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
        try:
            print("üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤...")
            from real_tennis_predictor_integration import RealPlayerDataCollector
            
            collector = RealPlayerDataCollector()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –≤ —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
            test_cases = [
                ('Jannik Sinner', 1),    # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å #1
                ('Carlos Alcaraz', 2),   # –î–æ–ª–∂–µ–Ω –±—ã—Ç—å #2  
                ('Flavio Cobolli', 32),  # –ö–†–ò–¢–ò–ß–ù–û: –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å #32, –Ω–µ #100
                ('Jacob Fearnley', 320), # –ù–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            ]
            
            accurate_rankings = 0
            for player, expected_rank in test_cases:
                actual_data = collector.get_player_data(player)
                actual_rank = actual_data['rank']
                
                # –î–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–æ–≥—Ä–µ—à–Ω–æ—Å—Ç—å –¥–ª—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤
                tolerance = 2 if expected_rank <= 10 else 10 if expected_rank <= 50 else 20
                
                if abs(actual_rank - expected_rank) <= tolerance:
                    accurate_rankings += 1
                    status = "‚úÖ"
                else:
                    status = "‚ùå"
                
                print(f"    {status} {player}: –æ–∂–∏–¥–∞–ª—Å—è #{expected_rank}, –ø–æ–ª—É—á–µ–Ω #{actual_rank}")
            
            ranking_accuracy = accurate_rankings / len(test_cases)
            print(f"    üìä –¢–æ—á–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {ranking_accuracy:.1%}")
            
            intelligence_results['ranking_quality'] = {
                'accurate_count': accurate_rankings,
                'total_tested': len(test_cases),
                'accuracy': ranking_accuracy,
                'uses_real_rankings': ranking_accuracy > 0.5
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {e}")
            intelligence_results['ranking_quality'] = {'working': False, 'error': str(e)}
        
        # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å ML –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
        try:
            print("üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å ML –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
            from real_tennis_predictor_integration import RealTennisPredictor
            
            predictor = RealTennisPredictor()
            
            # –¢–µ—Å—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏
            test_scenarios = [
                {
                    'name': '–¢–æ–ø –ø—Ä–æ—Ç–∏–≤ –Ω–æ–≤–∏—á–∫–∞',
                    'player1': 'Jannik Sinner',     # #1
                    'player2': 'Jacob Fearnley',    # #320
                    'expected_p1_favored': True
                },
                {
                    'name': '–ë–ª–∏–∑–∫–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∏',
                    'player1': 'Carlos Alcaraz',    # #2
                    'player2': 'Alexander Zverev',  # #3
                    'expected_close': True
                },
                {
                    'name': 'Underdog —Å—Ü–µ–Ω–∞—Ä–∏–π',
                    'player1': 'Flavio Cobolli',   # #32
                    'player2': 'Novak Djokovic',   # #5
                    'expected_p1_favored': False
                }
            ]
            
            logical_predictions = 0
            for scenario in test_scenarios:
                try:
                    result = predictor.predict_match(
                        scenario['player1'], scenario['player2'],
                        'Test Tournament', 'Hard', 'R32'
                    )
                    
                    probability = result['probability']
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏–∫—É
                    if scenario.get('expected_p1_favored') == True:
                        logical = probability > 0.55  # –ü–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º
                    elif scenario.get('expected_p1_favored') == False:
                        logical = probability < 0.45  # –ü–µ—Ä–≤—ã–π –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞—É—Ç—Å–∞–π–¥–µ—Ä–æ–º
                    elif scenario.get('expected_close') == True:
                        logical = 0.4 <= probability <= 0.6  # –î–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–ª–∏–∑–∫–æ –∫ 50/50
                    else:
                        logical = True
                    
                    if logical:
                        logical_predictions += 1
                        status = "‚úÖ"
                    else:
                        status = "‚ùå"
                    
                    print(f"    {status} {scenario['name']}: {probability:.1%}")
                    
                except Exception as e:
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ü–µ–Ω–∞—Ä–∏–∏ '{scenario['name']}': {e}")
            
            logic_score = logical_predictions / len(test_scenarios)
            print(f"    üìä –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤: {logic_score:.1%}")
            
            intelligence_results['prediction_logic'] = {
                'logical_count': logical_predictions,
                'total_tested': len(test_scenarios),
                'logic_score': logic_score,
                'makes_sense': logic_score > 0.6
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–∫–∏: {e}")
            intelligence_results['prediction_logic'] = {'working': False, 'error': str(e)}
        
        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∫ —Å–µ–∑–æ–Ω–∞–º
        try:
            print("üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∑–æ–Ω–Ω—É—é –∞–¥–∞–ø—Ç–∞—Ü–∏—é...")
            from universal_tennis_data_collector import UniversalTennisDataCollector
            
            collector = UniversalTennisDataCollector()
            summary = collector.get_summary()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–Ω–∏–º–∞–µ—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ —Ç–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω
            season_context = summary['season_context']
            current_month = datetime.now().month
            
            # –õ–æ–≥–∏–∫–∞ —Å–µ–∑–æ–Ω–æ–≤
            expected_seasons = {
                (1, 2): "Hard Court Season",
                (3, 4, 5): "Clay Court Season", 
                (6, 7): "Grass Court Season",
                (8, 9): "Hard Court Season",
                (10, 11): "Indoor Season",
                (12,): "Off Season"
            }
            
            season_correct = False
            for months, expected in expected_seasons.items():
                if current_month in months and expected in season_context:
                    season_correct = True
                    break
            
            print(f"    üìÖ –¢–µ–∫—É—â–∏–π —Å–µ–∑–æ–Ω: {season_context}")
            print(f"    ‚úÖ –°–µ–∑–æ–Ω –æ–ø—Ä–µ–¥–µ–ª–µ–Ω {'–ø—Ä–∞–≤–∏–ª—å–Ω–æ' if season_correct else '–Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥–∞–ø—Ç–∞—Ü–∏—é –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º
            active_tournaments = summary['active_tournaments']
            next_major = summary['next_major']
            
            print(f"    üèÜ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: {active_tournaments}")
            print(f"    üîú –°–ª–µ–¥—É—é—â–∏–π major: {next_major}")
            
            intelligence_results['seasonal_adaptation'] = {
                'understands_season': season_correct,
                'season_context': season_context,
                'tracks_tournaments': active_tournaments >= 0,
                'knows_next_major': next_major != "Unknown"
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–∑–æ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏: {e}")
            intelligence_results['seasonal_adaptation'] = {'working': False, 'error': str(e)}
        
        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
        try:
            print("üî∏ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Ç–µ—Ç –ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º
            from prediction_logging_system import PredictionLoggerIntegration
            
            logger_integration = PredictionLoggerIntegration()
            performance = logger_integration.get_system_performance()
            
            total_predictions = performance['total_predictions']
            accuracy = performance['accuracy']
            
            print(f"    üìä –í—Å–µ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —Å–∏—Å—Ç–µ–º–µ: {total_predictions}")
            print(f"    üéØ –¢–µ–∫—É—â–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: {accuracy:.1%}")
            
            # –°–∏—Å—Ç–µ–º–∞ —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—É—á–∞—é—â–µ–π—Å—è –µ—Å–ª–∏:
            # 1. –ï—Å—Ç—å –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
            # 2. –ï—Å—Ç—å —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏
            # 3. –¢–æ—á–Ω–æ—Å—Ç—å —Ä–∞–∑—É–º–Ω–∞—è (–Ω–µ —Å–ª—É—á–∞–π–Ω–∞—è)
            
            is_learning = (
                total_predictions > 0 and
                0.4 <= accuracy <= 0.9  # –†–∞–∑—É–º–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–æ—á–Ω–æ—Å—Ç–∏
            )
            
            print(f"    üß† –°–∏—Å—Ç–µ–º–∞ {'–æ–±—É—á–∞–µ—Ç—Å—è' if is_learning else '–Ω–µ –æ–±—É—á–∞–µ—Ç—Å—è'}")
            
            intelligence_results['experience_accumulation'] = {
                'total_predictions': total_predictions,
                'accuracy': accuracy,
                'is_learning': is_learning,
                'has_memory': total_predictions > 0
            }
            
        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è –æ–ø—ã—Ç–∞: {e}")
            intelligence_results['experience_accumulation'] = {'working': False, 'error': str(e)}
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Å–∏—Å—Ç–µ–º—ã
        intelligence_score = 0
        max_score = 0
        
        for component, results in intelligence_results.items():
            if isinstance(results, dict) and 'working' not in results:
                max_score += 1
                if component == 'ranking_quality':
                    if results.get('uses_real_rankings', False):
                        intelligence_score += 1
                elif component == 'prediction_logic':
                    if results.get('makes_sense', False):
                        intelligence_score += 1
                elif component == 'seasonal_adaptation':
                    if results.get('understands_season', False):
                        intelligence_score += 1
                elif component == 'experience_accumulation':
                    if results.get('is_learning', False):
                        intelligence_score += 1
        
        overall_intelligence = intelligence_score / max_score if max_score > 0 else 0
        
        print(f"\nüìä –û–±—â–∏–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∏—Å—Ç–µ–º—ã: {intelligence_score}/{max_score} ({overall_intelligence:.1%})")
        
        return {
            'components': intelligence_results,
            'intelligence_score': overall_intelligence,
            'uses_real_data': intelligence_results.get('ranking_quality', {}).get('uses_real_rankings', False),
            'logical_predictions': intelligence_results.get('prediction_logic', {}).get('makes_sense', False),
            'adapts_to_context': intelligence_results.get('seasonal_adaptation', {}).get('understands_season', False),
            'learns_from_experience': intelligence_results.get('experience_accumulation', {}).get('is_learning', False)
        }
    
    def generate_comprehensive_assessment(self) -> Dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–π –æ—Ü–µ–Ω–∫–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
        file_analysis = self.analyze_file_structure()
        import_analysis = self.test_imports_and_modules()
        ml_analysis = self.test_ml_models_comprehensive()
        data_analysis = self.test_real_data_integration()
        learning_analysis = self.test_learning_and_accumulation()
        workflow_analysis = self.test_end_to_end_workflow()
        intelligence_analysis = self.analyze_system_intelligence()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç—á–µ—Ç
        self.report.update({
            'file_structure': file_analysis,
            'imports_modules': import_analysis,
            'ml_performance': ml_analysis,
            'data_integration': data_analysis,
            'learning_capability': learning_analysis,
            'workflow_test': workflow_analysis,
            'system_intelligence': intelligence_analysis
        })
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –æ—Ü–µ–Ω–∫—É
        scores = {
            'file_completeness': file_analysis['completeness'],
            'imports_success': import_analysis['success_rate'],
            'ml_capability': ml_analysis['ml_score'],
            'data_integration': data_analysis['integration_score'],
            'learning_ability': learning_analysis['learning_score'],
            'workflow_success': 1.0 if workflow_analysis.get('working', False) else 0.0,
            'intelligence_level': intelligence_analysis['intelligence_score']
        }
        
        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∞—Å–ø–µ–∫—Ç—ã –≤–∞–∂–Ω–µ–µ)
        weights = {
            'file_completeness': 0.1,
            'imports_success': 0.15,
            'ml_capability': 0.25,
            'data_integration': 0.2,
            'learning_ability': 0.15,
            'workflow_success': 0.1,
            'intelligence_level': 0.05
        }
        
        overall_score = sum(scores[key] * weights[key] for key in scores.keys())
        overall_score *= 100  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º grade
        if overall_score >= 90:
            grade = "üèÜ –ü–†–ï–í–û–°–•–û–î–ù–û - –ü—Ä–æ–¥–∞–∫—à–Ω –≥–æ—Ç–æ–≤"
        elif overall_score >= 80:
            grade = "‚úÖ –û–¢–õ–ò–ß–ù–û - –ì–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"
        elif overall_score >= 70:
            grade = "üëç –•–û–†–û–®–û - –†–∞–±–æ—Ç–∞–µ—Ç —Å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–æ—Ä–∞–±–æ—Ç–∫–∞–º–∏"
        elif overall_score >= 60:
            grade = "‚ö†Ô∏è –£–î–û–í–õ–ï–¢–í–û–†–ò–¢–ï–õ–¨–ù–û - –¢—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏"
        elif overall_score >= 40:
            grade = "üîß –¢–†–ï–ë–£–ï–¢ –†–ê–ë–û–¢–´ - –ú–Ω–æ–≥–æ –ø—Ä–æ–±–ª–µ–º"
        else:
            grade = "‚ùå –ö–†–ò–¢–ò–ß–ù–û - –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–∞"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
        ready_for_production = (
            overall_score >= 75 and
            ml_analysis['has_real_ml'] and
            data_analysis['real_data_available'] and
            workflow_analysis.get('working', False) and
            intelligence_analysis['uses_real_data']
        )
        
        assessment = {
            'overall_score': overall_score,
            'grade': grade,
            'component_scores': scores,
            'ready_for_production': ready_for_production,
            'strengths': self._identify_strengths(),
            'weaknesses': self._identify_weaknesses(),
            'recommendations': self._generate_recommendations(),
            'next_steps': self._suggest_next_steps()
        }
        
        self.report['overall_assessment'] = assessment
        
        return assessment
    
    def _identify_strengths(self) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Å–∏—Å—Ç–µ–º—ã"""
        strengths = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        if self.report.get('file_structure', {}).get('completeness', 0) > 0.8:
            strengths.append("‚úÖ –ü–æ–ª–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ - –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞ –º–µ—Å—Ç–µ")
        
        if self.report.get('imports_modules', {}).get('success_rate', 0) > 0.7:
            strengths.append("‚úÖ –°—Ç–∞–±–∏–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã - –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –±–µ–∑ –æ—à–∏–±–æ–∫")
        
        if self.report.get('ml_performance', {}).get('has_real_ml', False):
            strengths.append("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ ML –º–æ–¥–µ–ª–∏ - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        
        if self.report.get('data_integration', {}).get('real_data_available', False):
            strengths.append("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        
        if self.report.get('learning_capability', {}).get('can_accumulate_data', False):
            strengths.append("‚úÖ –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞ - —Å–∏—Å—Ç–µ–º–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
        
        if self.report.get('system_intelligence', {}).get('uses_real_data', False):
            strengths.append("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤")
        
        if self.report.get('system_intelligence', {}).get('logical_predictions', False):
            strengths.append("‚úÖ –õ–æ–≥–∏—á–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã - —Å–∏—Å—Ç–µ–º–∞ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–∏–ª—É –∏–≥—Ä–æ–∫–æ–≤")
        
        if self.report.get('workflow_test', {}).get('working', False):
            strengths.append("‚úÖ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        
        return strengths
    
    def _identify_weaknesses(self) -> List[str]:
        """–í—ã—è–≤–ª–µ–Ω–∏–µ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Å–∏—Å—Ç–µ–º—ã"""
        weaknesses = []
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if self.report.get('file_structure', {}).get('completeness', 0) < 0.7:
            missing = self.report.get('file_structure', {}).get('critical_missing', [])
            weaknesses.append(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing[:3])}")
        
        if not self.report.get('ml_performance', {}).get('has_real_ml', False):
            weaknesses.append("‚ùå –ù–µ—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö ML –º–æ–¥–µ–ª–µ–π - —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ —Å–∏–º—É–ª—è—Ü–∏–∏")
        
        if not self.report.get('data_integration', {}).get('real_data_available', False):
            weaknesses.append("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –º–∞—Ç—á–∞–º - –Ω—É–∂–µ–Ω API –∫–ª—é—á")
        
        if not self.report.get('learning_capability', {}).get('can_retrain', False):
            weaknesses.append("‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        if not self.report.get('system_intelligence', {}).get('uses_real_data', False):
            weaknesses.append("‚ùå –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∏–ª–∏ –Ω–µ—Ç–æ—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
        total_predictions = self.report.get('system_intelligence', {}).get('components', {}).get('experience_accumulation', {}).get('total_predictions', 0)
        if total_predictions < 10:
            weaknesses.append("‚ùå –ú–∞–ª–æ –Ω–∞–∫–æ–ø–ª–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ - —Å–∏—Å—Ç–µ–º–∞ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—É—á–µ–Ω–∏–µ")
        
        return weaknesses
    
    def _generate_recommendations(self) -> List[str]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ —É–ª—É—á—à–µ–Ω–∏—é"""
        recommendations = []
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if not self.report.get('ml_performance', {}).get('has_real_ml', False):
            recommendations.append("ü§ñ –û–±—É—á–∏—Ç—å –∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ ML –º–æ–¥–µ–ª–∏ –≤ tennis_models/")
        
        if not self.report.get('data_integration', {}).get('real_data_available', False):
            recommendations.append("üîë –ù–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á –¥–ª—è The Odds API –≤ config.json")
        
        overall_score = self.report.get('overall_assessment', {}).get('overall_score', 0)
        if overall_score < 70:
            recommendations.append("üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º")
        
        if not self.report.get('learning_capability', {}).get('can_retrain', False):
            recommendations.append("üìö –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
        
        recommendations.extend([
            "üìä –ù–∞—á–∞—Ç—å –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∞—Ç—á–µ–π",
            "üéØ –ó–∞–ø—É—Å–∫–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤",
            "üìà –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏ ROI",
            "üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤"
        ])
        
        return recommendations
    
    def _suggest_next_steps(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        next_steps = []
        
        overall_score = self.report.get('overall_assessment', {}).get('overall_score', 0)
        
        if overall_score >= 80:
            next_steps = [
                "üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!",
                "üìÖ –î–æ–∂–¥–∞—Ç—å—Å—è –Ω–∞—á–∞–ª–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤",
                "üí∞ –ù–∞—á–∞—Ç—å —Å –Ω–µ–±–æ–ª—å—à–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å—Ç–∞–≤–æ–∫",
                "üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–µ—Ä–≤—ã–µ 2 –Ω–µ–¥–µ–ª–∏",
                "üìà –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ä—ã —Å—Ç–∞–≤–æ–∫ –ø—Ä–∏ —Ö–æ—Ä–æ—à–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö"
            ]
        elif overall_score >= 60:
            next_steps = [
                "üîß –ò—Å–ø—Ä–∞–≤–∏—Ç—å –≤—ã—è–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã",
                "üß™ –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "üìù –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è",
                "üéØ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"
            ]
        else:
            next_steps = [
                "üõ†Ô∏è –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã",
                "üìö –û–±—É—á–µ–Ω–∏–µ ML –º–æ–¥–µ–ª–µ–π –Ω–∞ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
                "üîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Å–µ—Ö API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π",
                "üèóÔ∏è –ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"
            ]
        
        return next_steps
    
    def save_full_report(self) -> str:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        report_file = f"tennis_system_comprehensive_analysis_{timestamp}.json"
        
        try:
            with open(report_file, 'w', encoding='utf-8') as f:
                json.dump(self.report, f, indent=2, default=str, ensure_ascii=False)
            
            print(f"\nüíæ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
            return report_file
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {e}")
            return ""
    
    def print_executive_summary(self, assessment: Dict):
        """–í—ã–≤–æ–¥ –∫—Ä–∞—Ç–∫–æ–≥–æ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–∞"""
        print("\n" + "="*70)
        print("üìã EXECUTIVE SUMMARY - –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ü–†–û–î–ê–ö–®–ï–ù–£?")
        print("="*70)
        
        score = assessment['overall_score']
        grade = assessment['grade']
        ready = assessment['ready_for_production']
        
        print(f"üéØ –ò–¢–û–ì–û–í–ê–Ø –û–¶–ï–ù–ö–ê: {score:.1f}/100")
        print(f"üèÜ –†–ï–ô–¢–ò–ù–ì: {grade}")
        print(f"üöÄ –ì–û–¢–û–í–ù–û–°–¢–¨ –ö –ü–†–û–î–ê–ö–®–ï–ù–£: {'‚úÖ –î–ê' if ready else '‚ùå –ù–ï–¢'}")
        
        print(f"\nüí™ –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´ ({len(assessment['strengths'])}):")
        for strength in assessment['strengths']:
            print(f"  {strength}")
        
        print(f"\n‚ö†Ô∏è –°–õ–ê–ë–´–ï –°–¢–û–†–û–ù–´ ({len(assessment['weaknesses'])}):")
        for weakness in assessment['weaknesses']:
            print(f"  {weakness}")
        
        print(f"\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        for step in assessment['next_steps']:
            print(f"  {step}")
        
        # –ö—Ä–∞—Ç–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏
        scores = assessment['component_scores']
        print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–´–ï –û–¶–ï–ù–ö–ò:")
        print(f"  üìÅ –§–∞–π–ª–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: {scores['file_completeness']:.1%}")
        print(f"  üîß –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π: {scores['imports_success']:.1%}")
        print(f"  ü§ñ ML –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏: {scores['ml_capability']:.1%}")
        print(f"  üåç –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: {scores['data_integration']:.1%}")
        print(f"  üß† –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –æ–±—É—á–µ–Ω–∏—é: {scores['learning_ability']:.1%}")
        print(f"  üîÑ –ü–æ–ª–Ω—ã–π —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å: {scores['workflow_success']:.1%}")
        print(f"  üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∏—Å—Ç–µ–º—ã: {scores['intelligence_level']:.1%}")
        
        if ready:
            print(f"\nüéâ –í–ï–†–î–ò–ö–¢: –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print(f"üí° –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ç–∞–≤–æ–∫ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ç—É—Ä–Ω–∏—Ä–µ.")
        else:
            print(f"\nüîß –í–ï–†–î–ò–ö–¢: –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
            print(f"üí° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.")
        
        print("="*70)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
    print("üéæ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –ê–ù–ê–õ–ò–ó –¢–ï–ù–ù–ò–°–ù–û–ô –°–ò–°–¢–ï–ú–´")
    print("=" * 70)
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –í–°–ï –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:")
    print("‚Ä¢ –§–∞–π–ª–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥—É–ª–µ–π")
    print("‚Ä¢ –†–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É ML –º–æ–¥–µ–ª–µ–π") 
    print("‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—é –æ–ø—ã—Ç–∞ –∏ –æ–±—É—á–µ–Ω–∏—é")
    print("‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ –∏ –ª–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print("‚Ä¢ –ü–æ–ª–Ω—ã–π end-to-end —Ä–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å")
    print("‚Ä¢ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —Ä–µ–∞–ª—å–Ω–æ–º—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
    print("=" * 70)
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = ComprehensiveTennisSystemAnalyzer()
    
    try:
        print(f"\nüïê –ù–∞—á–∞–ª–æ –∞–Ω–∞–ª–∏–∑–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        assessment = analyzer.generate_comprehensive_assessment()
        
        # –í—ã–≤–æ–¥–∏–º executive summary
        analyzer.print_executive_summary(assessment)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç
        report_file = analyzer.save_full_report()
        
        print(f"\nüìÑ –ü–æ–ª–Ω—ã–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        
        print(f"\nüéØ –†–ï–ó–Æ–ú–ï –ê–ù–ê–õ–ò–ó–ê:")
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        if assessment['overall_score'] >= 80:
            print("üü¢ –°–¢–ê–¢–£–°: –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ú–æ–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏")
        elif assessment['overall_score'] >= 60:
            print("üü° –°–¢–ê–¢–£–°: –°–ò–°–¢–ï–ú–ê –†–ê–ë–û–¢–ê–ï–¢, –ù–û –¢–†–ï–ë–£–ï–¢ –£–õ–£–ß–®–ï–ù–ò–ô")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ò—Å–ø—Ä–∞–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã, –∑–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å")
        else:
            print("üî¥ –°–¢–ê–¢–£–°: –°–ò–°–¢–ï–ú–ê –ù–ï –ì–û–¢–û–í–ê")
            print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º")
        
        print(f"üìä –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {assessment['overall_score']:.1f}/100")
        print(f"üéØ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É: {'–î–ê' if assessment['ready_for_production'] else '–ù–ï–¢'}")
        
        # –¢–æ–ø-3 –ø—Ä–æ–±–ª–µ–º—ã
        if assessment['weaknesses']:
            print(f"\nüö® –ü–†–ò–û–†–ò–¢–ï–¢–ù–´–ï –ü–†–û–ë–õ–ï–ú–´:")
            for i, weakness in enumerate(assessment['weaknesses'][:3], 1):
                print(f"  {i}. {weakness}")
        
        # –¢–æ–ø-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if assessment['recommendations']:
            print(f"\nüí° –ü–ï–†–í–û–û–ß–ï–†–ï–î–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø:")
            for i, rec in enumerate(assessment['recommendations'][:3], 1):
                print(f"  {i}. {rec}")
        
        print(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
        print(f"‚è∞ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"üïê –û–±—â–µ–µ –≤—Ä–µ–º—è: {(datetime.now() - datetime.fromisoformat(analyzer.report['analysis_time'])).total_seconds():.1f} —Å–µ–∫—É–Ω–¥")
        
        return assessment
        
    except Exception as e:
        print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ê–ù–ê–õ–ò–ó–ê: {e}")
        print("üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:")
        traceback.print_exc()
        
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç
        try:
            analyzer.report['error'] = {
                'message': str(e),
                'traceback': traceback.format_exc(),
                'timestamp': datetime.now().isoformat()
            }
            report_file = analyzer.save_full_report()
            print(f"üíæ –ß–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
        except:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–∂–µ —á–∞—Å—Ç–∏—á–Ω—ã–π –æ—Ç—á–µ—Ç")
        
        return None


def run_quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´")
    print("=" * 40)
    
    quick_tests = [
        ("üìÅ –§–∞–π–ª—ã", lambda: os.path.exists('tennis_backend.py')),
        ("ü§ñ ML –º–æ–¥—É–ª–∏", lambda: check_ml_imports()),
        ("üåç –°–±–æ—Ä—â–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö", lambda: check_data_collectors()),
        ("üíæ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ", lambda: check_logging_system()),
    ]
    
    results = []
    for test_name, test_func in quick_tests:
        try:
            result = test_func()
            status = "‚úÖ" if result else "‚ùå"
            results.append(result)
        except Exception as e:
            status = f"‚ùå ({str(e)[:20]}...)"
            results.append(False)
        
        print(f"{test_name}: {status}")
    
    success_rate = sum(results) / len(results)
    print(f"\nüìä –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç: {success_rate:.1%} –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    
    if success_rate > 0.7:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ–π - –∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        return True
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã - —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
        return False


def check_ml_imports():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ ML –∏–º–ø–æ—Ä—Ç–æ–≤"""
    try:
        import tennis_prediction_module
        import real_tennis_predictor_integration
        return True
    except ImportError:
        return False


def check_data_collectors():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä—â–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import universal_tennis_data_collector
        import api_economy_patch
        return True
    except ImportError:
        return False


def check_logging_system():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    try:
        import prediction_logging_system
        return True
    except ImportError:
        return False


def print_usage_help():
    """–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"""
    print("""
üéæ –ê–ù–ê–õ–ò–ó–ê–¢–û–† –¢–ï–ù–ù–ò–°–ù–û–ô –°–ò–°–¢–ï–ú–´ - –°–ü–†–ê–í–ö–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:
  python paste.py                    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
  python paste.py --quick            # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç
  python paste.py --help             # –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ß–¢–û –ü–†–û–í–ï–†–Ø–ï–¢–°–Ø:
  üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤              # –í—Å–µ –ª–∏ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ
  üîß –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π              # –ó–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
  ü§ñ ML –º–æ–¥–µ–ª–∏                    # –†–∞–±–æ—Ç–∞—é—Ç –ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
  üåç –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö            # –î–æ—Å—Ç—É–ø –∫ —Ç—É—Ä–Ω–∏—Ä–∞–º –∏ –º–∞—Ç—á–∞–º
  üß† –û–±—É—á–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã             # –ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
  üîÑ –†–∞–±–æ—á–∏–π –ø—Ä–æ—Ü–µ—Å—Å              # End-to-end —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
  üéØ –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç —Å–∏—Å—Ç–µ–º—ã            # –õ–æ–≥–∏—á–Ω–æ—Å—Ç—å –ø—Ä–æ–≥–Ω–æ–∑–æ–≤

–†–ï–ó–£–õ–¨–¢–ê–¢:
  ‚Ä¢ –û—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É (0-100)
  ‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  ‚Ä¢ –°–ø–∏—Å–æ–∫ –ø—Ä–æ–±–ª–µ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
  ‚Ä¢ JSON –æ—Ç—á–µ—Ç —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–∞–ª—è–º–∏

–¢–†–ï–ë–û–í–ê–ù–ò–Ø:
  ‚Ä¢ Python 3.8+
  ‚Ä¢ –í—Å–µ —Ñ–∞–π–ª—ã —Å–∏—Å—Ç–µ–º—ã –≤ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–µ
  ‚Ä¢ –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: API –∫–ª—é—á–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

–ü–†–ò–ú–ï–†–´ –ö–û–ú–ê–ù–î:
  python paste.py                    # –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)
  python paste.py --quick            # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞ 30 —Å–µ–∫
""")


if __name__ == "__main__":
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        if '--help' in sys.argv or '-h' in sys.argv:
            print_usage_help()
            sys.exit(0)
        elif '--quick' in sys.argv or '-q' in sys.argv:
            print("‚ö° –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞...")
            if run_quick_test():
                print("\nüéØ –•–æ—Ç–∏—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑? (y/N): ", end="")
                try:
                    if input().lower().startswith('y'):
                        main()
                except KeyboardInterrupt:
                    print("\nüëã –ê–Ω–∞–ª–∏–∑ –æ—Ç–º–µ–Ω–µ–Ω")
            sys.exit(0)
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
    print("üöÄ –ó–∞–ø—É—Å–∫ –ü–û–õ–ù–û–ì–û –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    print("‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç 2-5 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏—Å—Ç–µ–º—ã")
    print("üîç –ë—É–¥—É—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã –í–°–ï –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã")
    
    try:
        assessment = main()
        
        if assessment:
            # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            print(f"\nüéâ –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù!")
            
            if assessment['ready_for_production']:
                print("üöÄ –í–∞—à–∞ —Ç–µ–Ω–Ω–∏—Å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ì–û–¢–û–í–ê –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
                print("üí∞ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∏–Ω–∞—Ç—å –¥–µ–ª–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ç–∞–≤–∫–∏.")
                print("üìä –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.")
            elif assessment['overall_score'] >= 60:
                print("üîß –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π.")
                print("‚ö° –ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∞–Ω–∞–ª–∏–∑.")
            else:
                print("üõ†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Ç—Ä–µ–±—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ–π –¥–æ—Ä–∞–±–æ—Ç–∫–∏.")
                print("üìö –°–ª–µ–¥—É–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º.")
            
            print(f"\nüìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.")
            print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –µ–≥–æ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–ª—É—á—à–µ–Ω–∏–π.")
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è –ê–Ω–∞–ª–∏–∑ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    except Exception as e:
        print(f"\nüí• –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤")
    
    print(f"\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞!")