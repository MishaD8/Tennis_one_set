#!/usr/bin/env python3
"""
üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô
–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
"""

import sys
import os
from datetime import datetime

def test_logging_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        from prediction_logging_system import CompletePredictionLogger
        
        # –°–æ–∑–¥–∞–µ–º –ª–æ–≥–≥–µ—Ä
        logger = CompletePredictionLogger("test_logs")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_prediction = {
            'player1': 'Test Player 1',
            'player2': 'Test Player 2',
            'tournament': 'Test Tournament',
            'surface': 'Hard',
            'round': 'R32',
            'match_date': '2025-07-11',
            'our_probability': 0.65,
            'confidence': 'Medium',
            'ml_system': 'TEST_ML',
            'prediction_type': 'TEST',
            'key_factors': ['Test factor 1', 'Test factor 2'],
            'bookmaker_odds': 2.5
        }
        
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å
        result = logger.log_prediction(test_prediction)
        
        if result:
            print("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            print(f"   ID –∑–∞–ø–∏—Å–∏: {result}")
            return True
        else:
            print("‚ùå –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Ä–Ω—É–ª–æ None")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def test_ml_logic_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏ ML –¥–ª—è UNDERDOG –∞–Ω–∞–ª–∏–∑–∞"""
    print("\nü§ñ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML –ª–æ–≥–∏–∫–∏ (UNDERDOG)...")
    
    try:
        from real_tennis_predictor_integration import RealTennisPredictor
        
        predictor = RealTennisPredictor()
        
        # –¢–µ—Å—Ç —Ç–æ–ø –∏–≥—Ä–æ–∫ –ø—Ä–æ—Ç–∏–≤ –∞—É—Ç—Å–∞–π–¥–µ—Ä–∞
        print("   –¢–µ—Å—Ç–∏—Ä—É–µ–º: Jannik Sinner (#1) vs Jacob Fearnley (#320)")
        
        result = predictor.predict_match(
            'Jannik Sinner', 'Jacob Fearnley',
            'Wimbledon', 'Grass', 'R64'
        )
        
        probability = result['probability']
        underdog_player = result.get('underdog_player', 'Unknown')
        underdog_analysis = result.get('underdog_analysis', {})
        
        print(f"   Underdog: {underdog_player}")
        print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å underdog –≤–∑—è—Ç—å —Å–µ—Ç: {probability:.1%}")
        
        if 'underdog_analysis' in result:
            analysis = result['underdog_analysis']
            print(f"   Rank difference: {analysis.get('rank_difference', 0)}")
            print(f"   Original ML prediction: {analysis.get('original_prediction', 0):.1%}")
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞: –¥–ª—è underdog –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–∞–∑—É–º–Ω–æ–π, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–æ–π
        if 0.15 <= probability <= 0.40:  # Underdog –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —Å–µ—Ç, –Ω–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ
            print("‚úÖ UNDERDOG –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —à–∞–Ω—Å—ã –≤–∑—è—Ç—å —Å–µ—Ç!")
            return True
        elif probability > 0.40:
            print("‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è –¥–ª—è —Ç–∞–∫–æ–≥–æ underdog")
            return False
        else:
            print("‚ö†Ô∏è –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è - –¥–∞–∂–µ underdog –º–æ–∂–µ—Ç –≤–∑—è—Ç—å —Å–µ—Ç")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ML –ª–æ–≥–∏–∫–∏: {e}")
        return False

def test_odds_integrator_fix():
    """–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è OddsIntegrator"""
    print("\nüí∞ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OddsIntegrator...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ API –∫–ª—é—á –≤ config.json
        import json
        if os.path.exists('config.json'):
            with open('config.json', 'r') as f:
                config = json.load(f)
                api_key = config.get('data_sources', {}).get('the_odds_api', {}).get('api_key')
            
            if api_key and api_key != 'YOUR_API_KEY':
                print(f"   API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –≤ config.json: {api_key[:10]}...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
                from correct_odds_api_integration import TennisOddsIntegrator
                
                integrator = TennisOddsIntegrator()  # –î–æ–ª–∂–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–π—Ç–∏ –∫–ª—é—á
                print("‚úÖ TennisOddsIntegrator –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
            else:
                print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.json –∏–ª–∏ —Ä–∞–≤–µ–Ω 'YOUR_API_KEY'")
                print("   –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ, –µ—Å–ª–∏ –≤—ã –Ω–µ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
                return True
        else:
            print("‚ö†Ô∏è config.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è OddsIntegrator: {e}")
        return False

def test_system_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        modules_to_test = [
            'real_tennis_predictor_integration',
            'tennis_prediction_module', 
            'universal_tennis_data_collector',
            'api_economy_patch',
            'prediction_logging_system'
        ]
        
        success_count = 0
        
        for module in modules_to_test:
            try:
                __import__(module)
                print(f"   ‚úÖ {module}")
                success_count += 1
            except ImportError as e:
                print(f"   ‚ùå {module}: {e}")
        
        print(f"\nüìä –£—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {success_count}/{len(modules_to_test)} –º–æ–¥—É–ª–µ–π")
        
        if success_count == len(modules_to_test):
            print("‚úÖ –í—Å—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
            return True
        elif success_count >= len(modules_to_test) - 1:
            print("‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ –ø–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–∞, –æ–¥–∏–Ω –º–æ–¥—É–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print("‚ùå –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ë–´–°–¢–†–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô")
    print("=" * 60)
    print(f"üïê –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 60)
    
    tests = [
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", test_logging_fix),
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ML –ª–æ–≥–∏–∫–∏", test_ml_logic_fix), 
        ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ OddsIntegrator", test_odds_integrator_fix),
        ("–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã", test_system_integration)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ {test_name}: {e}")
            results.append((test_name, False))
    
    # –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\n" + "=" * 60)
    print("üìä –°–í–û–î–ö–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í")
    print("=" * 60)
    
    success_count = 0
    for test_name, result in results:
        status = "‚úÖ –£–°–ü–ï–®–ù–û" if result else "‚ùå –¢–†–ï–ë–£–ï–¢ –í–ù–ò–ú–ê–ù–ò–Ø"
        print(f"{test_name}: {status}")
        if result:
            success_count += 1
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {success_count}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if success_count == len(results):
        print("üéâ –í–°–ï –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É!")
        expected_score = 96.0
    elif success_count >= len(results) - 1:
        print("‚ö° –ü–û–ß–¢–ò –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –†–ê–ë–û–¢–ê–Æ–¢!")
        print("üîß –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞!")
        expected_score = 93.5
    else:
        print("‚ö†Ô∏è –¢–†–ï–ë–£–Æ–¢–°–Ø –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
        expected_score = 91.6  # –¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å
    
    print(f"\nüéØ –û–∂–∏–¥–∞–µ–º–∞—è –æ—Ü–µ–Ω–∫–∞ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {expected_score:.1f}/100")
    
    print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    if success_count == len(results):
        print("1. üéæ –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python tennis_backend.py")
        print("2. üåê –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:5001")
        print("3. üéØ –¢–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã")
        print("4. üìä –ù–∞—á–Ω–∏—Ç–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
    else:
        print("1. üîß –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –≤—ã—à–µ")
        print("2. üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —ç—Ç–æ—Ç —Ç–µ—Å—Ç")
        print("3. üìû –ï—Å–ª–∏ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è - —Å–æ–æ–±—â–∏—Ç–µ –¥–µ—Ç–∞–ª–∏")
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    return success_count == len(results)

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)