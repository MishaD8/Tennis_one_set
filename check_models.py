#!/usr/bin/env python3
"""
üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤, –Ω–∞ –∫–æ—Ç–æ—Ä—ã—Ö –±—ã–ª–∏ –æ–±—É—á–µ–Ω—ã –º–æ–¥–µ–ª–∏
"""

import json
import os
from tennis_set_predictor import EnhancedTennisPredictor

def check_model_features():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏"""
    
    print("üîç –ü–†–û–í–ï–†–ö–ê –ü–†–ò–ó–ù–ê–ö–û–í –û–ë–£–ß–ï–ù–ù–´–• –ú–û–î–ï–õ–ï–ô")
    print("=" * 60)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π
        metadata_path = os.path.join("tennis_models", "metadata.json")
        
        if os.path.exists(metadata_path):
            print("üìÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –º–æ–¥–µ–ª–µ–π...")
            with open(metadata_path, 'r') as f:
                metadata = json.load(f)
            
            feature_columns = metadata.get('feature_columns', [])
            ensemble_weights = metadata.get('ensemble_weights', {})
            validation_scores = metadata.get('validation_scores', {})
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(feature_columns)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
            print("-" * 40)
            
            for i, feature in enumerate(feature_columns, 1):
                print(f"{i:2d}. {feature}")
            
            print(f"\nüìä –í–µ—Å–∞ –º–æ–¥–µ–ª–µ–π –≤ –∞–Ω—Å–∞–º–±–ª–µ:")
            print("-" * 40)
            for model, weight in ensemble_weights.items():
                score = validation_scores.get(model, 'N/A')
                print(f"‚Ä¢ {model:20}: {weight:.3f} (AUC: {score})")
            
            return feature_columns
            
        else:
            print("‚ùå –§–∞–π–ª metadata.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ –µ–µ –æ–∂–∏–¥–∞–Ω–∏—è
            print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –Ω–∞–ø—Ä—è–º—É—é...")
            
            predictor = EnhancedTennisPredictor(model_dir="tennis_models")
            predictor.load_models()
            
            if hasattr(predictor, 'feature_columns'):
                print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏:")
                for i, feature in enumerate(predictor.feature_columns, 1):
                    print(f"{i:2d}. {feature}")
                return predictor.feature_columns
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")
                return []
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return []

def create_correct_demo_data(feature_columns):
    """–°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏"""
    
    if not feature_columns:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        return None
    
    print(f"\nüéØ –°–û–ó–î–ê–ù–ò–ï –î–ê–ù–ù–´–• –° –ü–†–ê–í–ò–õ–¨–ù–´–ú–ò –ü–†–ò–ó–ù–ê–ö–ê–ú–ò")
    print("=" * 60)
    
    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö (–Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–Ω—Ç–µ—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±—É—á–µ–Ω–∏—è)
    base_data = {
        'player_rank': 5,
        'opponent_rank': 45,  
        'player_age': 25,
        'opponent_age': 28,
        'player_recent_win_rate': 0.85,
        'player_surface_advantage': 0.12,
        'h2h_win_rate': 0.75,
        'total_pressure': 3.2,
        'player_form_trend': 0.08
    }
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
    match_data = {}
    
    for feature in feature_columns:
        if feature in base_data:
            match_data[feature] = base_data[feature]
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
            if 'rank' in feature:
                match_data[feature] = 25  # —Å—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥
            elif 'age' in feature:
                match_data[feature] = 26  # —Å—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç
            elif 'win_rate' in feature or 'advantage' in feature:
                match_data[feature] = 0.6  # —Å—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç
            elif 'pressure' in feature:
                match_data[feature] = 2.5  # —Å—Ä–µ–¥–Ω–µ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
            elif 'trend' in feature:
                match_data[feature] = 0.05  # –Ω–µ–±–æ–ª—å—à–æ–π —Ç—Ä–µ–Ω–¥
            elif 'count' in feature:
                match_data[feature] = 10  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π
            elif 'days' in feature:
                match_data[feature] = 30  # –¥–Ω–∏
            else:
                match_data[feature] = 0.5  # –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å {len(match_data)} –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –º—ã —Å–æ–∑–¥–∞–ª–∏
    print(f"\nüìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:")
    print("-" * 40)
    for feature, value in match_data.items():
        print(f"‚Ä¢ {feature:30}: {value}")
    
    return match_data

def test_prediction_with_correct_data(feature_columns):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    print(f"\nüéæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    match_data = create_correct_demo_data(feature_columns)
    
    if not match_data:
        return
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
        predictor = EnhancedTennisPredictor(model_dir="tennis_models")
        predictor.load_models()
        
        # –°–æ–∑–¥–∞–µ–º DataFrame
        import pandas as pd
        match_df = pd.DataFrame([match_data])
        
        print(f"üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤...")
        
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
        match_features = predictor.prepare_features(match_df)
        print(f"‚úÖ –ü—Ä–∏–∑–Ω–∞–∫–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω—ã: {match_features.shape}")
        
        # –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑
        print(f"üîÆ –î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑...")
        prediction = predictor.predict_probability(match_features)[0]
        
        print(f"\nüéØ –†–ï–ó–£–õ–¨–¢–ê–¢ –ü–†–û–ì–ù–û–ó–ê:")
        print("=" * 40)
        print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç: {prediction:.1%}")
        
        if prediction >= 0.7:
            confidence = "–í—ã—Å–æ–∫–∞—è üî•"
        elif prediction >= 0.55:
            confidence = "–°—Ä–µ–¥–Ω—è—è ‚ö°"
        else:
            confidence = "–ù–∏–∑–∫–∞—è üí≠"
        
        print(f"–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏: {confidence}")
        
        # –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        print(f"\nüìä –ü–†–û–ì–ù–û–ó–´ –û–¢–î–ï–õ–¨–ù–´–• –ú–û–î–ï–õ–ï–ô:")
        print("-" * 40)
        
        X_scaled = predictor.scaler.transform(match_features)
        
        for model_name, model in predictor.models.items():
            try:
                if model_name in ['neural_network', 'logistic_regression']:
                    pred = float(model.predict(X_scaled)[0])
                else:
                    pred = float(model.predict_proba(match_features)[0, 1])
                
                weight = predictor.ensemble_weights.get(model_name, 0)
                icons = "üî•" if pred > 0.7 else "‚ö°" if pred > 0.55 else "üí≠"
                print(f"{icons} {model_name:20}: {pred:.1%} (–≤–µ—Å: {weight:.3f})")
                
            except Exception as e:
                print(f"‚ùå {model_name:20}: –û—à–∏–±–∫–∞ - {e}")
        
        print(f"\n‚úÖ –¢–ï–°–¢ –ü–†–û–®–ï–õ –£–°–ü–ï–®–ù–û!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        return False

def main():
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ú–û–î–ï–õ–ï–ô –ò –ü–†–ò–ó–ù–ê–ö–û–í")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏
    feature_columns = check_model_features()
    
    if feature_columns:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ
        success = test_prediction_with_correct_data(feature_columns)
        
        if success:
            print(f"\nüéâ –í–°–ï –†–ê–ë–û–¢–ê–ï–¢!")
            print("=" * 30)
            print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö")
            print("üöÄ –ú–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–∏ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
        else:
            print(f"\n‚ùå –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´")
            print("üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤ –º–æ–¥–µ–ª–µ–π")
    else:
        print(f"\n‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –û–ü–†–ï–î–ï–õ–ò–¢–¨ –ü–†–ò–ó–ù–ê–ö–ò")
        print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()