#!/usr/bin/env python3
"""
üéæ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –†–ï–ê–õ–¨–ù–´–• ML –ú–û–î–ï–õ–ï–ô
–ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–æ–≤
"""

import pandas as pd
import numpy as np
import requests
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import json

class RealPlayerDataCollector:
    """–°–±–æ—Ä—â–∏–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∏–≥—Ä–æ–∫–∞—Ö"""
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏–≥—Ä–æ–∫–æ–≤ (–æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ)
        self.atp_rankings = {
            "jannik sinner": {"rank": 1, "points": 11830, "age": 23},
            "carlos alcaraz": {"rank": 2, "points": 8580, "age": 21},
            "alexander zverev": {"rank": 3, "points": 7915, "age": 27},
            "daniil medvedev": {"rank": 4, "points": 6230, "age": 28},
            "novak djokovic": {"rank": 5, "points": 5560, "age": 37},
            "andrey rublev": {"rank": 6, "points": 4805, "age": 26},
            "casper ruud": {"rank": 7, "points": 4055, "age": 25},
            "holger rune": {"rank": 8, "points": 3895, "age": 21},
            "grigor dimitrov": {"rank": 9, "points": 3350, "age": 33},
            "stefanos tsitsipas": {"rank": 10, "points": 3240, "age": 26},
            "taylor fritz": {"rank": 11, "points": 3060, "age": 27},
            "tommy paul": {"rank": 12, "points": 2985, "age": 27},
            "ben shelton": {"rank": 15, "points": 2565, "age": 22},
            "frances tiafoe": {"rank": 18, "points": 2245, "age": 26},
            "brandon nakashima": {"rank": 45, "points": 1255, "age": 23},
        }
        
        self.wta_rankings = {
            "aryna sabalenka": {"rank": 1, "points": 9706, "age": 26},
            "iga swiatek": {"rank": 2, "points": 8370, "age": 23},
            "coco gauff": {"rank": 3, "points": 6530, "age": 20},
            "jessica pegula": {"rank": 4, "points": 5945, "age": 30},
            "elena rybakina": {"rank": 5, "points": 5471, "age": 25},
            "qinwen zheng": {"rank": 6, "points": 4515, "age": 22},
            "jasmine paolini": {"rank": 7, "points": 4068, "age": 28},
            "emma navarro": {"rank": 8, "points": 3698, "age": 23},
            "daria kasatkina": {"rank": 9, "points": 3368, "age": 27},
            "barbora krejcikova": {"rank": 10, "points": 3214, "age": 28},
            "paula badosa": {"rank": 11, "points": 2895, "age": 26},
            "danielle collins": {"rank": 12, "points": 2747, "age": 30},
            "renata zarazua": {"rank": 80, "points": 825, "age": 26},
            "amanda anisimova": {"rank": 35, "points": 1456, "age": 23},
        }
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—è–º (–ø—Ä–∏–º–µ—Ä–Ω–∞—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö)
        self.surface_stats = {
            "jannik sinner": {"hard": 0.85, "clay": 0.72, "grass": 0.78},
            "carlos alcaraz": {"hard": 0.82, "clay": 0.88, "grass": 0.75},
            "alexander zverev": {"hard": 0.78, "clay": 0.75, "grass": 0.68},
            "daniil medvedev": {"hard": 0.85, "clay": 0.62, "grass": 0.65},
            "novak djokovic": {"hard": 0.82, "clay": 0.80, "grass": 0.88},
            "aryna sabalenka": {"hard": 0.85, "clay": 0.68, "grass": 0.72},
            "iga swiatek": {"hard": 0.78, "clay": 0.92, "grass": 0.65},
            "coco gauff": {"hard": 0.75, "clay": 0.70, "grass": 0.68},
            "brandon nakashima": {"hard": 0.68, "clay": 0.58, "grass": 0.62},
            "renata zarazua": {"hard": 0.55, "clay": 0.62, "grass": 0.48},
            "amanda anisimova": {"hard": 0.72, "clay": 0.65, "grass": 0.58},
        }
    
    def get_player_data(self, player_name: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower().strip()
        
        # –ò—â–µ–º –≤ ATP —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö
        if name_lower in self.atp_rankings:
            return {"tour": "atp", **self.atp_rankings[name_lower]}
        
        # –ò—â–µ–º –≤ WTA —Ä–µ–π—Ç–∏–Ω–≥–∞—Ö  
        if name_lower in self.wta_rankings:
            return {"tour": "wta", **self.wta_rankings[name_lower]}
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç–∏—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é
        for rankings in [self.atp_rankings, self.wta_rankings]:
            for known_player, data in rankings.items():
                if any(part in known_player for part in name_lower.split()):
                    return {"tour": "atp" if rankings == self.atp_rankings else "wta", **data}
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        return {"tour": "unknown", "rank": 100, "points": 500, "age": 25}
    
    def get_surface_advantage(self, player_name: str, surface: str) -> float:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏"""
        name_lower = player_name.lower().strip()
        surface_lower = surface.lower()
        
        if name_lower in self.surface_stats:
            stats = self.surface_stats[name_lower]
            
            # –ü–æ–ª—É—á–∞–µ–º –≤–∏–Ω—Ä–µ–π—Ç –Ω–∞ —Ü–µ–ª–µ–≤–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏
            target_winrate = stats.get(surface_lower, 0.65)
            
            # –°—Ä–µ–¥–Ω–∏–π –≤–∏–Ω—Ä–µ–π—Ç –Ω–∞ –≤—Å–µ—Ö –ø–æ–∫—Ä—ã—Ç–∏—è—Ö
            avg_winrate = sum(stats.values()) / len(stats)
            
            # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ = —Ä–∞–∑–Ω–æ—Å—Ç—å
            return target_winrate - avg_winrate
        
        return 0.0  # –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    
    def calculate_recent_form(self, player_name: str) -> Dict:
        """–†–∞—Å—á–µ—Ç –Ω–µ–¥–∞–≤–Ω–µ–π —Ñ–æ—Ä–º—ã –∏–≥—Ä–æ–∫–∞ (—Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–∞)"""
        player_data = self.get_player_data(player_name)
        rank = player_data["rank"]
        
        # –ß–µ–º –≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥, —Ç–µ–º –ª—É—á—à–µ —Ñ–æ—Ä–º–∞ (—Å –Ω–µ–∫–æ—Ç–æ—Ä–æ–π —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å—é)
        base_form = max(0.4, 1.0 - (rank - 1) / 200)  # –û—Ç 1.0 –¥–ª—è #1 –¥–æ 0.4 –¥–ª—è #200+
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—É –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
        import random
        random.seed(hash(player_name) % 1000)  # –°—Ç–∞–±–∏–ª—å–Ω–∞—è "—Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å" –¥–ª—è –∏–≥—Ä–æ–∫–∞
        form_variation = random.uniform(-0.15, 0.15)
        recent_win_rate = max(0.2, min(0.95, base_form + form_variation))
        
        return {
            "recent_matches_count": random.randint(8, 20),
            "recent_win_rate": recent_win_rate,
            "recent_sets_win_rate": recent_win_rate * 0.85,  # –°–µ—Ç—ã –æ–±—ã—á–Ω–æ –Ω–∏–∂–µ
            "form_trend": random.uniform(-0.1, 0.1),
            "days_since_last_match": random.randint(3, 21)
        }
    
    def get_head_to_head(self, player1: str, player2: str) -> Dict:
        """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á (—Å–∏–º—É–ª—è—Ü–∏—è)"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏ –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ H2H
        p1_data = self.get_player_data(player1)
        p2_data = self.get_player_data(player2)
        
        p1_rank = p1_data["rank"]
        p2_rank = p2_data["rank"]
        
        # –ë–æ–ª–µ–µ —Å–∏–ª—å–Ω—ã–π –∏–≥—Ä–æ–∫ —á–∞—â–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç H2H
        if p1_rank < p2_rank:  # p1 —Å–∏–ª—å–Ω–µ–µ (–º–µ–Ω—å—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥)
            advantage = min(0.3, (p2_rank - p1_rank) / 100)
            h2h_win_rate = 0.5 + advantage
        else:
            advantage = min(0.3, (p1_rank - p2_rank) / 100)  
            h2h_win_rate = 0.5 - advantage
        
        import random
        random.seed(hash(player1 + player2) % 1000)
        
        return {
            "h2h_matches": random.randint(0, 15),
            "h2h_win_rate": max(0.0, min(1.0, h2h_win_rate)),
            "h2h_recent_form": h2h_win_rate + random.uniform(-0.2, 0.2),
            "h2h_sets_advantage": random.uniform(-1.5, 1.5),
            "days_since_last_h2h": random.randint(30, 730)
        }


class TournamentPressureCalculator:
    """–†–∞—Å—á–µ—Ç –¥–∞–≤–ª–µ–Ω–∏—è —Ç—É—Ä–Ω–∏—Ä–∞"""
    
    @staticmethod
    def calculate_pressure(tournament_name: str, round_name: str = "R64") -> Dict:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞"""
        
        # –í–∞–∂–Ω–æ—Å—Ç—å —Ç—É—Ä–Ω–∏—Ä–∞
        tournament_importance = 1  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        is_high_pressure = 0
        
        tournament_lower = tournament_name.lower()
        
        if any(slam in tournament_lower for slam in ["wimbledon", "us open", "french open", "australian open", "roland garros"]):
            tournament_importance = 4
            is_high_pressure = 1
        elif any(masters in tournament_lower for masters in ["masters", "indian wells", "miami", "madrid", "rome", "cincinnati", "paris"]):
            tournament_importance = 3
            is_high_pressure = 1
        elif "500" in tournament_lower or any(t500 in tournament_lower for t500 in ["barcelona", "queen's", "hamburg"]):
            tournament_importance = 2
        elif "finals" in tournament_lower:
            tournament_importance = 4
            is_high_pressure = 1
        
        # –î–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—É–Ω–¥–∞
        round_pressure_map = {
            "r128": 0.1, "r64": 0.2, "r32": 0.3, "r16": 0.4,
            "qf": 0.6, "sf": 0.8, "f": 1.0,
            "quarterfinal": 0.6, "semifinal": 0.8, "final": 1.0
        }
        
        round_pressure = round_pressure_map.get(round_name.lower(), 0.2)
        total_pressure = tournament_importance * (1 + round_pressure)
        
        return {
            "tournament_importance": tournament_importance,
            "round_pressure": round_pressure,
            "total_pressure": total_pressure,
            "is_high_pressure_tournament": is_high_pressure
        }


class RealTennisPredictor:
    """–ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤—â–∏–∫ —Å –†–ï–ê–õ–¨–ù–´–ú–ò –¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self):
        self.data_collector = RealPlayerDataCollector()
        self.pressure_calculator = TournamentPressureCalculator()
        
        # –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–µ–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        self.prediction_service = None
        self._load_prediction_service()
    
    def _load_prediction_service(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            from tennis_prediction_module import TennisPredictionService
            self.prediction_service = TennisPredictionService()
            if self.prediction_service.load_models():
                print("‚úÖ –†–µ–∞–ª—å–Ω—ã–µ ML –º–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            else:
                print("‚ö†Ô∏è ML –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
                self.prediction_service = None
        except ImportError:
            print("‚ö†Ô∏è tennis_prediction_module –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–º—É–ª—è—Ü–∏—é")
            self.prediction_service = None
    
    def create_match_features(self, player1: str, player2: str, 
                            tournament: str, surface: str, round_name: str = "R64") -> Dict:
        """–°–æ–∑–¥–∞—Ç—å –≤—Å–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è –º–∞—Ç—á–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –†–ï–ê–õ–¨–ù–´–• –¥–∞–Ω–Ω—ã—Ö"""
        
        print(f"üîç –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è: {player1} vs {player2}")
        
        # –ë–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤
        p1_data = self.data_collector.get_player_data(player1)
        p2_data = self.data_collector.get_player_data(player2)
        
        # –§–æ—Ä–º–∞ –∏–≥—Ä–æ–∫–æ–≤
        p1_form = self.data_collector.calculate_recent_form(player1)
        p2_form = self.data_collector.calculate_recent_form(player2)
        
        # –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏
        p1_surface_adv = self.data_collector.get_surface_advantage(player1, surface)
        p2_surface_adv = self.data_collector.get_surface_advantage(player2, surface)
        
        # –û—á–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏
        h2h_data = self.data_collector.get_head_to_head(player1, player2)
        
        # –î–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
        pressure_data = self.pressure_calculator.calculate_pressure(tournament, round_name)
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
        match_features = {
            # –ë–∞–∑–æ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
            'player_rank': float(p1_data['rank']),
            'player_age': float(p1_data['age']),
            'opponent_rank': float(p2_data['rank']),
            'opponent_age': float(p2_data['age']),
            
            # –§–æ—Ä–º–∞ –∏–≥—Ä–æ–∫–∞
            'player_recent_matches_count': float(p1_form['recent_matches_count']),
            'player_recent_win_rate': p1_form['recent_win_rate'],
            'player_recent_sets_win_rate': p1_form['recent_sets_win_rate'],
            'player_form_trend': p1_form['form_trend'],
            'player_days_since_last_match': float(p1_form['days_since_last_match']),
            
            # –ü–æ–∫—Ä—ã—Ç–∏–µ (—Å–∏–º—É–ª—è—Ü–∏—è –æ–ø—ã—Ç–∞)
            'player_surface_matches_count': float(max(10, 50 - p1_data['rank'] // 4)),
            'player_surface_win_rate': max(0.3, p1_form['recent_win_rate'] + p1_surface_adv),
            'player_surface_advantage': p1_surface_adv,
            'player_surface_sets_rate': max(0.3, p1_form['recent_sets_win_rate'] + p1_surface_adv * 0.5),
            'player_surface_experience': min(1.0, max(0.1, 1.0 - p1_data['rank'] / 200)),
            
            # H2H –¥–∞–Ω–Ω—ã–µ
            'h2h_matches': float(h2h_data['h2h_matches']),
            'h2h_win_rate': h2h_data['h2h_win_rate'],
            'h2h_recent_form': h2h_data['h2h_recent_form'],
            'h2h_sets_advantage': h2h_data['h2h_sets_advantage'],
            'days_since_last_h2h': float(h2h_data['days_since_last_h2h']),
            
            # –î–∞–≤–ª–µ–Ω–∏–µ —Ç—É—Ä–Ω–∏—Ä–∞
            'tournament_importance': float(pressure_data['tournament_importance']),
            'round_pressure': pressure_data['round_pressure'],
            'total_pressure': pressure_data['total_pressure'],
            'is_high_pressure_tournament': float(pressure_data['is_high_pressure_tournament'])
        }
        
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ {len(match_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        print(f"üéØ {player1}: Rank #{p1_data['rank']}, Form: {p1_form['recent_win_rate']:.1%}")
        print(f"üéØ {player2}: Rank #{p2_data['rank']}, Form: {p2_form['recent_win_rate']:.1%}")
        print(f"üèüÔ∏è Surface advantage: {p1_surface_adv:+.2f}")
        print(f"üìà H2H: {h2h_data['h2h_win_rate']:.1%} ({h2h_data['h2h_matches']} matches)")
        
        return match_features
    
    def predict_match(self, player1: str, player2: str, tournament: str, 
                     surface: str, round_name: str = "R64") -> Dict:
        """–°–¥–µ–ª–∞—Ç—å –†–ï–ê–õ–¨–ù–´–ô –ø—Ä–æ–≥–Ω–æ–∑ –º–∞—Ç—á–∞"""
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        match_features = self.create_match_features(player1, player2, tournament, surface, round_name)
        
        if self.prediction_service:
            # –ò–°–ü–û–õ–¨–ó–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï ML –ú–û–î–ï–õ–ò!
            try:
                prediction_result = self.prediction_service.predict_match(match_features, return_details=True)
                
                print(f"ü§ñ ML Prediction: {prediction_result['probability']:.1%}")
                
                return {
                    'prediction_type': 'REAL_ML_MODEL',
                    'probability': prediction_result['probability'],
                    'confidence': prediction_result['confidence'],
                    'confidence_ru': prediction_result.get('confidence_ru', prediction_result['confidence']),
                    'model_details': prediction_result,
                    'key_factors': prediction_result.get('key_factors', []),
                    'individual_predictions': prediction_result.get('individual_predictions', {}),
                    'match_features': match_features
                }
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ ML –º–æ–¥–µ–ª–∏: {e}")
                # Fallback –∫ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –µ—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
        probability = self._advanced_simulation(match_features)
        
        confidence = 'High' if probability > 0.75 or probability < 0.25 else 'Medium'
        
        return {
            'prediction_type': 'ADVANCED_SIMULATION',
            'probability': probability,
            'confidence': confidence,
            'confidence_ru': '–í—ã—Å–æ–∫–∞—è' if confidence == 'High' else '–°—Ä–µ–¥–Ω—è—è',
            'match_features': match_features,
            'key_factors': self._analyze_key_factors(match_features, probability)
        }
    
    def _advanced_simulation(self, features: Dict) -> float:
        """–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
        rank_diff = features['opponent_rank'] - features['player_rank']
        base_prob = 0.5 + (rank_diff * 0.003)  # –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ = 0.3%
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ —Ñ–æ—Ä–º—É
        form_factor = (features['player_recent_win_rate'] - 0.65) * 0.4
        base_prob += form_factor
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–µ
        surface_factor = features['player_surface_advantage'] * 0.3
        base_prob += surface_factor
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ H2H
        if features['h2h_matches'] > 2:
            h2h_factor = (features['h2h_win_rate'] - 0.5) * 0.2
            base_prob += h2h_factor
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ –¥–∞–≤–ª–µ–Ω–∏–µ (–æ–ø—ã—Ç–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –ª—É—á—à–µ —Å–ø—Ä–∞–≤–ª—è—é—Ç—Å—è)
        if features['total_pressure'] > 3:
            experience_factor = max(0, (100 - features['player_rank']) / 200) * 0.1
            base_prob += experience_factor
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return max(0.05, min(0.95, base_prob))
    
    def _analyze_key_factors(self, features: Dict, probability: float) -> List[str]:
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
        factors = []
        
        rank_diff = features['opponent_rank'] - features['player_rank']
        if rank_diff > 20:
            factors.append(f"üåü –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (+{rank_diff} –ø–æ–∑–∏—Ü–∏–π)")
        elif rank_diff < -10:
            factors.append(f"‚ö° –ò–≥—Ä–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ({rank_diff} –ø–æ–∑–∏—Ü–∏–π)")
        
        if features['player_recent_win_rate'] > 0.8:
            factors.append("üî• –û—Ç–ª–∏—á–Ω–∞—è –Ω–µ–¥–∞–≤–Ω—è—è —Ñ–æ—Ä–º–∞")
        elif features['player_recent_win_rate'] < 0.5:
            factors.append("üìâ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π")
        
        if abs(features['player_surface_advantage']) > 0.1:
            if features['player_surface_advantage'] > 0:
                factors.append("üèüÔ∏è –°–∏–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏")
            else:
                factors.append("‚ö†Ô∏è –°–ª–∞–±–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏")
        
        if features['h2h_matches'] > 2:
            if features['h2h_win_rate'] > 0.7:
                factors.append("üìä –î–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö")
            elif features['h2h_win_rate'] < 0.3:
                factors.append("üìä –ü–ª–æ—Ö–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ç–∏–≤ —ç—Ç–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞")
        
        if features['is_high_pressure_tournament'] and features['player_rank'] < 20:
            factors.append("üíé –û–ø—ã—Ç –±–æ–ª—å—à–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤")
        
        return factors


def test_real_predictions():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    print("üéæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –†–ï–ê–õ–¨–ù–´–• ML –ü–†–û–ì–ù–û–ó–û–í")
    print("=" * 60)
    
    predictor = RealTennisPredictor()
    
    # –†–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_matches = [
        {
            'player1': 'Brandon Nakashima',
            'player2': 'Bu Yunchaokete', 
            'tournament': 'Wimbledon',
            'surface': 'Grass',
            'round': 'R64',
            'expected': 'Nakashima —Ñ–∞–≤–æ—Ä–∏—Ç (–≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥)'
        },
        {
            'player1': 'Renata Zarazua',
            'player2': 'Amanda Anisimova',
            'tournament': 'Wimbledon', 
            'surface': 'Grass',
            'round': 'R64',
            'expected': 'Anisimova —Ñ–∞–≤–æ—Ä–∏—Ç (–≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥)'
        },
        {
            'player1': 'Carlos Alcaraz',
            'player2': 'Novak Djokovic',
            'tournament': 'US Open',
            'surface': 'Hard',
            'round': 'SF',
            'expected': '–ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ —Å–∏–ª—ã'
        }
    ]
    
    for i, match in enumerate(test_matches, 1):
        print(f"\n{'='*60}")
        print(f"üéæ –ú–ê–¢–ß {i}: {match['player1']} vs {match['player2']}")
        print(f"üèüÔ∏è {match['tournament']} ({match['surface']}) - {match['round']}")
        print(f"üìã –û–∂–∏–¥–∞–Ω–∏–µ: {match['expected']}")
        print('='*60)
        
        result = predictor.predict_match(
            match['player1'], match['player2'], 
            match['tournament'], match['surface'], match['round']
        )
        
        print(f"\nü§ñ –ü–†–û–ì–ù–û–ó ({result['prediction_type']}):")
        print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ–±–µ–¥—ã {match['player1']}: {result['probability']:.1%}")
        print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏: {result['confidence_ru']}")
        
        if result['key_factors']:
            print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´:")
            for factor in result['key_factors']:
                print(f"  ‚Ä¢ {factor}")
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –ø—Ä–æ—Å—Ç—ã–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        print(f"\nüìä –ê–ù–ê–õ–ò–ó:")
        if result['probability'] > 0.65:
            print(f"  ‚Ä¢ {match['player1']} —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º")
        elif result['probability'] < 0.35:
            print(f"  ‚Ä¢ {match['player2']} —è–≤–ª—è–µ—Ç—Å—è —Ñ–∞–≤–æ—Ä–∏—Ç–æ–º")
        else:
            print(f"  ‚Ä¢ –ü—Ä–∏–º–µ—Ä–Ω–æ —Ä–∞–≤–Ω—ã–µ —à–∞–Ω—Å—ã")
    
    print(f"\n{'='*60}")
    print("‚úÖ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("üí° –¢–µ–ø–µ—Ä—å —Å–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –†–ï–ê–õ–¨–ù–´–ï –¥–∞–Ω–Ω—ã–µ:")
    print("   ‚Ä¢ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ ATP/WTA")
    print("   ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—è–º")
    print("   ‚Ä¢ –°–∏–º—É–ª—è—Ü–∏—é –Ω–µ–¥–∞–≤–Ω–µ–π —Ñ–æ—Ä–º—ã")
    print("   ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Ç—É—Ä–Ω–∏—Ä–æ–≤")
    print("   ‚Ä¢ ML –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)")


if __name__ == "__main__":
    test_real_predictions()