#!/usr/bin/env python3
"""
üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Tennis Backend —Å API Economy - –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Ç—á–∞–º–∏
"""

import os
from dotenv import load_dotenv
from typing import Optional
from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import random
import math
from datetime import datetime, timedelta
import numpy as np

# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø API ECONOMY
from api_economy_patch import (
    init_api_economy, 
    economical_tennis_request, 
    get_api_usage, 
    trigger_manual_update,
    check_manual_update_status,
    clear_api_cache
)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API ECONOMY –ü–†–ò –ó–ê–ü–£–°–ö–ï
init_api_economy(
    api_key="a1b20d709d4bacb2d95ddab880f91009",
    max_per_hour=30,
    cache_minutes=20
)

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

class SmartUnderdogPredictor:
    """–£–º–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏—é–ª—å 2025
        self.player_database = {
            # ATP —Ç–æ–ø-–∏–≥—Ä–æ–∫–∏
            'jannik sinner': {'rank': 1, 'age': 23, 'form': 0.90, 'grass_skill': 0.78, 'set_tenacity': 0.85, 'big_match': 0.85},
            'carlos alcaraz': {'rank': 2, 'age': 21, 'form': 0.88, 'grass_skill': 0.75, 'set_tenacity': 0.80, 'big_match': 0.82},
            'alexander zverev': {'rank': 3, 'age': 27, 'form': 0.82, 'grass_skill': 0.68, 'set_tenacity': 0.75, 'big_match': 0.78},
            'daniil medvedev': {'rank': 4, 'age': 28, 'form': 0.78, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.82},
            'novak djokovic': {'rank': 6, 'age': 37, 'form': 0.75, 'grass_skill': 0.95, 'set_tenacity': 0.95, 'big_match': 0.95},
            
            # –°—Ä–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∏)
            'ben shelton': {'rank': 15, 'age': 22, 'form': 0.72, 'grass_skill': 0.70, 'set_tenacity': 0.75, 'big_match': 0.60},
            'tommy paul': {'rank': 12, 'age': 27, 'form': 0.75, 'grass_skill': 0.72, 'set_tenacity': 0.78, 'big_match': 0.70},
            'frances tiafoe': {'rank': 18, 'age': 26, 'form': 0.70, 'grass_skill': 0.68, 'set_tenacity': 0.80, 'big_match': 0.65},
            'brandon nakashima': {'rank': 45, 'age': 23, 'form': 0.68, 'grass_skill': 0.62, 'set_tenacity': 0.72, 'big_match': 0.50},
            'fabio fognini': {'rank': 85, 'age': 37, 'form': 0.62, 'grass_skill': 0.58, 'set_tenacity': 0.65, 'big_match': 0.75},
            'marin cilic': {'rank': 70, 'age': 35, 'form': 0.65, 'grass_skill': 0.75, 'set_tenacity': 0.80, 'big_match': 0.85},
            'flavio cobolli': {'rank': 85, 'age': 22, 'form': 0.68, 'grass_skill': 0.60, 'set_tenacity': 0.70, 'big_match': 0.45},
            'cameron norrie': {'rank': 35, 'age': 28, 'form': 0.70, 'grass_skill': 0.75, 'set_tenacity': 0.75, 'big_match': 0.65},
            'nicolas jarry': {'rank': 25, 'age': 28, 'form': 0.72, 'grass_skill': 0.65, 'set_tenacity': 0.70, 'big_match': 0.60},
            
            # WTA
            'aryna sabalenka': {'rank': 1, 'age': 26, 'form': 0.85, 'grass_skill': 0.72, 'set_tenacity': 0.82, 'big_match': 0.80},
            'iga swiatek': {'rank': 2, 'age': 23, 'form': 0.88, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.85},
            'emma raducanu': {'rank': 90, 'age': 22, 'form': 0.62, 'grass_skill': 0.68, 'set_tenacity': 0.70, 'big_match': 0.50},
            'katie boulter': {'rank': 28, 'age': 27, 'form': 0.68, 'grass_skill': 0.75, 'set_tenacity': 0.72, 'big_match': 0.60},
            'amanda anisimova': {'rank': 35, 'age': 23, 'form': 0.72, 'grass_skill': 0.58, 'set_tenacity': 0.75, 'big_match': 0.55},
            'sonay kartal': {'rank': 120, 'age': 22, 'form': 0.58, 'grass_skill': 0.72, 'set_tenacity': 0.68, 'big_match': 0.45},
            'anastasia pavlyuchenkova': {'rank': 45, 'age': 33, 'form': 0.65, 'grass_skill': 0.62, 'set_tenacity': 0.78, 'big_match': 0.75},
            'linda noskova': {'rank': 25, 'age': 19, 'form': 0.75, 'grass_skill': 0.68, 'set_tenacity': 0.72, 'big_match': 0.55},
            'solana sierra': {'rank': 180, 'age': 24, 'form': 0.50, 'grass_skill': 0.55, 'set_tenacity': 0.65, 'big_match': 0.40},
            'laura siegemund': {'rank': 85, 'age': 35, 'form': 0.62, 'grass_skill': 0.70, 'set_tenacity': 0.80, 'big_match': 0.70},
        }
    
    def get_player_data(self, player_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_database:
            return self.player_database[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, data in self.player_database.items():
            if any(part in known_player for part in name_lower.split()):
                return data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        rank = random.randint(40, 150)
        return {
            'rank': rank,
            'age': random.randint(20, 32),
            'form': max(0.4, 0.8 - rank/200),
            'grass_skill': random.uniform(0.5, 0.7),
            'set_tenacity': random.uniform(0.6, 0.8),
            'big_match': max(0.3, 0.8 - rank/150)
        }
    
    def determine_underdog_from_odds(self, player1, player2, odds1, odds2):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º"""
        # –ê–Ω–¥–µ—Ä–¥–æ–≥ = –∏–≥—Ä–æ–∫ —Å –ë–û–õ–¨–®–ò–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞)
        if odds1 > odds2:
            return {
                'underdog': player1,
                'favorite': player2,
                'underdog_odds': odds1,
                'favorite_odds': odds2,
                'is_player1_underdog': True
            }
        else:
            return {
                'underdog': player2,
                'favorite': player1, 
                'underdog_odds': odds2,
                'favorite_odds': odds1,
                'is_player1_underdog': False
            }
    
    def calculate_smart_set_probability(self, underdog_name, favorite_name, underdog_odds, favorite_odds):
        """–£–º–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
        
        underdog_data = self.get_player_data(underdog_name)
        favorite_data = self.get_player_data(favorite_name)
        
        # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        match_prob = 1.0 / underdog_odds
        base_set_prob = min(0.85, match_prob + 0.25)
        
        # 2. –§–∞–∫—Ç–æ—Ä—ã
        tenacity_factor = underdog_data['set_tenacity'] * 0.3
        grass_factor = (underdog_data['grass_skill'] - 0.6) * 0.2
        big_match_factor = underdog_data['big_match'] * 0.15
        form_factor = (underdog_data['form'] - 0.65) * 0.2
        
        # 3. –í–æ–∑—Ä–∞—Å—Ç
        age_factor = 0
        if underdog_data['age'] < 25:
            age_factor = 0.05
        elif underdog_data['age'] > 32:
            age_factor = -0.03
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        final_probability = (base_set_prob + tenacity_factor + grass_factor + 
                           big_match_factor + form_factor + age_factor)
        
        final_probability = max(0.25, min(0.92, final_probability))
        
        confidence = 'Very High' if final_probability > 0.8 else \
                    'High' if final_probability > 0.7 else 'Medium'
        
        factors = self._analyze_key_factors(underdog_data, favorite_data, underdog_odds, final_probability)
        
        return {
            'probability': round(final_probability, 3),
            'confidence': confidence,
            'key_factors': factors
        }
    
    def _analyze_key_factors(self, underdog_data, favorite_data, underdog_odds, probability):
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–∞"""
        factors = []
        
        if underdog_data['set_tenacity'] > 0.75:
            factors.append(f"üî• –í—ã—Å–æ–∫–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö ({underdog_data['set_tenacity']:.0%})")
        
        if underdog_data['grass_skill'] > 0.70:
            factors.append(f"üå± –•–æ—Ä–æ—à–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —Ç—Ä–∞–≤–µ")
        
        if underdog_data['form'] > 0.70:
            factors.append(f"üìà –•–æ—Ä–æ—à–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞")
        elif underdog_data['form'] < 0.60:
            factors.append(f"üìâ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π - –Ω–æ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è")
        
        if underdog_data['age'] < 24:
            factors.append(f"‚ö° –ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫ - –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞")
        
        if underdog_data['big_match'] > 0.70:
            factors.append(f"üíé –û–ø—ã—Ç –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        if underdog_odds > 4.0:
            factors.append(f"üéØ –ë–æ–ª—å—à–æ–π –∞–Ω–¥–µ—Ä–¥–æ–≥ (–∫–æ—ç—Ñ. {underdog_odds}) - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–µ–Ω—Å–∞—Ü–∏–∏")
        elif underdog_odds > 2.5:
            factors.append(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –∞–Ω–¥–µ—Ä–¥–æ–≥ - —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–Ω—Å—ã")
        
        return factors[:4]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
predictor = SmartUnderdogPredictor()

def extract_best_odds_from_api(bookmakers):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö The Odds API"""
    best_odds1 = None
    best_odds2 = None
    
    for bookmaker in bookmakers:
        for market in bookmaker.get('markets', []):
            if market.get('key') == 'h2h':
                outcomes = market.get('outcomes', [])
                if len(outcomes) >= 2:
                    odds1 = outcomes[0].get('price')
                    odds2 = outcomes[1].get('price')
                    
                    if odds1 and odds2:
                        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ª—É—á—à–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞)
                        if not best_odds1 or odds1 > best_odds1:
                            best_odds1 = odds1
                        if not best_odds2 or odds2 > best_odds2:
                            best_odds2 = odds2
    
    return best_odds1, best_odds2

def create_demo_matches_with_real_players():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –º–∞—Ç—á–µ–π —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    demo_matches = [
        {
            'player1': 'Marin Cilic',
            'player2': 'Flavio Cobolli',
            'odds1': 1.99,
            'odds2': 2.00,
            'tournament': 'ATP Tournament',
            'surface': 'Hard',
            'round': 'R32',
            'court': 'Center Court',
            'time': '14:00'
        },
        {
            'player1': 'Sonay Kartal',
            'player2': 'Anastasia Pavlyuchenkova',
            'odds1': 1.96,
            'odds2': 2.02,
            'tournament': 'WTA Tournament',
            'surface': 'Hard',
            'round': 'R16',
            'court': 'Court 1',
            'time': '16:00'
        },
        {
            'player1': 'Nicolas Jarry',
            'player2': 'Cameron Norrie',
            'odds1': 1.90,
            'odds2': 2.10,
            'tournament': 'ATP 500',
            'surface': 'Hard',
            'round': 'QF',
            'court': 'Stadium Court',
            'time': '18:00'
        },
        {
            'player1': 'Linda Noskova',
            'player2': 'Amanda Anisimova',
            'odds1': 1.78,
            'odds2': 2.29,
            'tournament': 'WTA 500',
            'surface': 'Hard',
            'round': 'SF',
            'court': 'Center Court',
            'time': '20:00'
        },
        {
            'player1': 'Ben Shelton',
            'player2': 'Frances Tiafoe',
            'odds1': 1.75,
            'odds2': 2.15,
            'tournament': 'US Hard Courts',
            'surface': 'Hard',
            'round': 'R16',
            'court': 'Court 2',
            'time': '19:00'
        }
    ]
    
    return demo_matches

def get_live_matches_with_api_economy():
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API Economy —Å fallback"""
    
    try:
        logger.info("üåç Trying to get live matches via API Economy...")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        result = economical_tennis_request('tennis')
        
        if result['success'] and result.get('data'):
            raw_data = result['data']
            source_info = f"API_ECONOMY_{result['status']}"
            
            logger.info(f"‚úÖ API Economy returned {len(raw_data)} raw matches")
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ The Odds API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            converted_matches = []
            
            for api_match in raw_data:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    player1 = api_match.get('home_team', 'Player 1')
                    player2 = api_match.get('away_team', 'Player 2')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    odds1, odds2 = extract_best_odds_from_api(api_match.get('bookmakers', []))
                    
                    if odds1 and odds2:
                        match = {
                            'player1': player1,
                            'player2': player2,
                            'odds1': odds1,
                            'odds2': odds2,
                            'tournament': 'Live Tournament',
                            'surface': 'Hard',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            'round': 'Live',
                            'court': 'TBD',
                            'time': api_match.get('commence_time', '14:00')[:5] if api_match.get('commence_time') else '14:00'
                        }
                        converted_matches.append(match)
                        
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –º–∞—Ç—á–∞: {e}")
                    continue
            
            if converted_matches:
                logger.info(f"‚úÖ Successfully converted {len(converted_matches)} API matches")
                return {
                    'matches': converted_matches,
                    'source': source_info,
                    'api_status': result.get('emoji', 'üì°'),
                    'success': True
                }
            else:
                logger.warning("‚ö†Ô∏è No matches could be converted from API data")
                
        else:
            logger.warning(f"‚ö†Ô∏è API Economy error: {result.get('error', 'Unknown')}")
            
    except Exception as e:
        logger.error(f"‚ùå API Economy error: {e}")
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–û: Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏
    logger.info("üéØ Using demo matches with real players as fallback")
    demo_matches = create_demo_matches_with_real_players()
    
    return {
        'matches': demo_matches,
        'source': 'DEMO_WITH_REAL_PLAYERS', 
        'api_status': 'üéØ',
        'success': True
    }

def generate_quality_matches():
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    
    logger.info("üîç Generating quality underdog matches...")
    
    # –ü–æ–ª—É—á–∞–µ–º live –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ API Economy (–∏–ª–∏ demo)
    live_data = get_live_matches_with_api_economy()
    potential_matches = live_data['matches']
    
    logger.info(f"üìä Processing {len(potential_matches)} potential matches")
    
    quality_matches = []
    
    for match_data in potential_matches:
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
            underdog_info = predictor.determine_underdog_from_odds(
                match_data['player1'], match_data['player2'],
                match_data['odds1'], match_data['odds2']
            )
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
            prediction = predictor.calculate_smart_set_probability(
                underdog_info['underdog'],
                underdog_info['favorite'], 
                underdog_info['underdog_odds'],
                underdog_info['favorite_odds']
            )
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞
            if (prediction['probability'] >= 0.35 and 
                prediction['probability'] <= 0.90 and
                1.5 <= underdog_info['underdog_odds'] <= 10.0):
                
                match = {
                    'id': f"match_{len(quality_matches)+1}",
                    'player1': f"üéæ {match_data['player1']}",
                    'player2': f"üéæ {match_data['player2']}",
                    'tournament': f"üèÜ {match_data['tournament']}",
                    'surface': match_data['surface'],
                    'round': match_data['round'],
                    'date': datetime.now().strftime('%Y-%m-%d'),
                    'time': match_data['time'],
                    
                    'odds': {
                        'player1': match_data['odds1'],
                        'player2': match_data['odds2']
                    },
                    
                    'underdog_analysis': {
                        'underdog': underdog_info['underdog'],
                        'favorite': underdog_info['favorite'],
                        'underdog_odds': underdog_info['underdog_odds'],
                        'prediction': prediction,
                        'quality_rating': 'HIGH' if prediction['probability'] > 0.70 else 'MEDIUM'
                    },
                    
                    'focus': f"üíé {underdog_info['underdog']} –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç",
                    'recommendation': f"{prediction['probability']:.0%} —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç",
                    'data_source': live_data['source'],
                    'api_status': live_data.get('api_status', 'üì°')
                }
                
                quality_matches.append(match)
                logger.info(f"‚úÖ Added quality match: {match_data['player1']} vs {match_data['player2']} ({prediction['probability']:.1%})")
            else:
                logger.info(f"‚ö™ Skipped match: {match_data['player1']} vs {match_data['player2']} (prob: {prediction['probability']:.1%}, odds: {underdog_info['underdog_odds']})")
                
        except Exception as e:
            logger.error(f"‚ùå Error processing match: {e}")
            continue
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π, –¥–æ–±–∞–≤–ª—è–µ–º —Ö–æ—Ç—è –±—ã –¥–µ–º–æ
    if not quality_matches:
        logger.warning("‚ö†Ô∏è No quality matches found, creating guaranteed demo match")
        
        demo_match = {
            'id': 'guaranteed_demo',
            'player1': 'üéæ Marin Cilic',
            'player2': 'üéæ Flavio Cobolli',
            'tournament': 'üèÜ Demo Tournament',
            'surface': 'Hard',
            'round': 'Demo',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': '14:00',
            'odds': {'player1': 1.99, 'player2': 2.00},
            'underdog_analysis': {
                'underdog': 'Flavio Cobolli',
                'favorite': 'Marin Cilic',
                'underdog_odds': 2.00,
                'prediction': {
                    'probability': 0.78,
                    'confidence': 'High',
                    'key_factors': ['üéØ Demo match with realistic odds', '‚öñÔ∏è Even matchup']
                },
                'quality_rating': 'HIGH'
            },
            'focus': 'üíé Flavio Cobolli –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç',
            'recommendation': '78% —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç',
            'data_source': 'GUARANTEED_DEMO'
        }
        quality_matches.append(demo_match)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    quality_matches.sort(key=lambda x: x['underdog_analysis']['prediction']['probability'], reverse=True)
    
    logger.info(f"üéØ Generated {len(quality_matches)} quality underdog opportunities")
    return quality_matches

@app.route('/')
def dashboard():
    """Dashboard —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API Economy"""
    return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéæ Smart Underdog Tennis System</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: white; min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { 
            background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 24px;
            padding: 32px; margin-bottom: 32px; text-align: center;
        }
        .api-economy-banner {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            padding: 20px; border-radius: 15px; margin-bottom: 20px;
            text-align: center; animation: pulse 3s infinite;
        }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.9; } }
        .main-title {
            font-size: 2.8rem; font-weight: 700; margin-bottom: 16px;
            background: linear-gradient(135deg, #ff6b6b, #ffd93d, #6bcf7f);
            background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 20px; }
        .stat-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px; padding: 20px; text-align: center; transition: all 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-4px); background: rgba(255, 255, 255, 0.08); }
        .stat-value { font-size: 2.2rem; font-weight: 700; margin-bottom: 8px; color: #6bcf7f; }
        .stat-label { font-size: 0.9rem; opacity: 0.7; text-transform: uppercase; }
        .controls { 
            background: rgba(255, 255, 255, 0.05); border-radius: 20px; 
            padding: 24px; margin-bottom: 32px; text-align: center;
        }
        .btn { 
            background: linear-gradient(135deg, #667eea, #764ba2); color: white;
            border: none; padding: 14px 28px; border-radius: 12px; font-size: 1rem;
            cursor: pointer; margin: 8px; transition: all 0.3s ease; font-weight: 600;
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4); }
        .matches-container { display: grid; gap: 24px; }
        .match-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px; padding: 28px; position: relative; transition: all 0.3s ease;
        }
        .match-card:hover { transform: translateY(-4px); border-color: rgba(107, 207, 127, 0.3); }
        .loading { 
            text-align: center; padding: 80px; background: rgba(255, 255, 255, 0.05);
            border-radius: 20px; font-size: 1.2rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="api-economy-banner">
                <h2>üí∞ API ECONOMY SYSTEM ACTIVE</h2>
                <p>–£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Ä¢ –≠–∫–æ–Ω–æ–º–∏—è API –∑–∞–ø—Ä–æ—Å–æ–≤ ‚Ä¢ –†—É—á–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ</p>
            </div>
            
            <div class="main-title">üéæ Smart Underdog Predictor</div>
            <p style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 32px;">
                –ù–∞–π–¥–∏—Ç–µ –ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç
            </p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="api-requests">-</div>
                    <div class="stat-label">API Requests Left</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="cache-items">-</div>
                    <div class="stat-label">Cache Items</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="quality-matches">-</div>
                    <div class="stat-label">Quality Matches</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="data-source">-</div>
                    <div class="stat-label">Data Source</div>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <h3>üéØ Smart Underdog System - Powered by API Economy</h3>
            <p style="margin: 12px 0; opacity: 0.8;">–≠–∫–æ–Ω–æ–º–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API —Å —É–º–Ω—ã–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º</p>
            <button class="btn" onclick="loadUnderdogMatches()">üíé –ù–∞–π—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤</button>
            <button class="btn" onclick="forceAPIUpdate()">üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ</button>
            <button class="btn" onclick="showAPIStatus()">üìä –°—Ç–∞—Ç—É—Å API</button>
            <button class="btn" onclick="clearAPICache()">üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–µ—à</button>
        </div>
        
        <div id="matches-container" class="matches-container">
            <div class="loading">
                <h3>üíé –°–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≥–æ—Ç–æ–≤–∞</h3>
                <p>–ù–∞–∂–º–∏—Ç–µ "–ù–∞–π—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤" –¥–ª—è –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞</p>
            </div>
        </div>
    </div>
    
    <script>
        const API_BASE = window.location.origin + '/api';
        
        async function loadStats() {
            try {
                const response = await fetch(`${API_BASE}/stats`);
                const data = await response.json();
                
                if (data.success && data.api_usage) {
                    document.getElementById('api-requests').textContent = data.api_usage.remaining_hour || '0';
                    document.getElementById('cache-items').textContent = data.api_usage.cache_items || '0';
                }
            } catch (error) {
                console.error('Stats error:', error);
            }
        }
        
        async function loadUnderdogMatches() {
            const container = document.getElementById('matches-container');
            container.innerHTML = '<div class="loading"><h3>üíé –ü–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤...</h3><p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</p></div>';
            
            try {
                const response = await fetch(`${API_BASE}/quality-matches`);
                const data = await response.json();
                
                updateStats(data);
                
                if (data.success && data.matches && data.matches.length > 0) {
                    displayMatches(data.matches, data.source);
                } else {
                    container.innerHTML = '<div class="loading"><h3>‚ùå –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3><p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API —Å—Ç–∞—Ç—É—Å</p></div>';
                }
            } catch (error) {
                console.error('Error:', error);
                container.innerHTML = '<div class="loading"><h3>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3></div>';
            }
        }
        
        function updateStats(data) {
            document.getElementById('quality-matches').textContent = data.matches?.length || '0';
            document.getElementById('data-source').textContent = getSourceEmoji(data.source);
        }
        
        function getSourceEmoji(source) {
            if (source?.includes('API_ECONOMY_LIVE')) return 'üî¥ Live';
            if (source?.includes('API_ECONOMY_CACHED')) return 'üìã Cache';
            if (source?.includes('DEMO')) return 'üéØ Demo';
            return '‚ùì Unknown';
        }
        
        function displayMatches(matches, source) {
            const container = document.getElementById('matches-container');
            
            let html = `
                <div style="background: linear-gradient(135deg, rgba(107, 207, 127, 0.1), rgba(255, 217, 61, 0.1)); 
                           border: 1px solid rgba(107, 207, 127, 0.3); border-radius: 20px; padding: 24px; margin-bottom: 32px; text-align: center;">
                    <h2>üíé –ù–ê–ô–î–ï–ù–´ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ê–ù–î–ï–†–î–û–ì–ò</h2>
                    <p>–ò—Å—Ç–æ—á–Ω–∏–∫: ${source} ‚Ä¢ API Economy —Å–∏—Å—Ç–µ–º–∞ –∞–∫—Ç–∏–≤–Ω–∞</p>
                </div>
            `;
            
            matches.forEach((match, index) => {
                const analysis = match.underdog_analysis;
                const prediction = analysis.prediction;
                
                html += `
                    <div class="match-card">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <div>
                                <div style="font-size: 1.4rem; font-weight: bold;">
                                    ${match.player1} vs ${match.player2}
                                </div>
                                <div style="opacity: 0.8; margin-top: 5px;">
                                    üèÜ ${match.tournament} ‚Ä¢ ${match.surface} ‚Ä¢ ${match.round}
                                </div>
                                <div style="opacity: 0.7; font-size: 0.9rem;">
                                    üìç ${match.date} ${match.time} ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${match.data_source}
                                </div>
                            </div>
                            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 15px; text-align: center;">
                                <div style="font-size: 2rem; font-weight: bold; color: #ffd93d;">
                                    ${(prediction.probability * 100).toFixed(0)}%
                                </div>
                                <div style="font-size: 0.9rem;">${prediction.confidence}</div>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin: 20px 0; padding: 16px; background: rgba(255, 217, 61, 0.1); border-radius: 12px;">
                            <div style="font-size: 1.2rem; font-weight: 600; color: #ffd93d;">
                                ${match.focus}
                            </div>
                            <div style="margin-top: 8px; opacity: 0.9;">
                                ${match.recommendation}
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 20px;">
                            <div style="text-align: center; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 10px;">
                                <div style="font-weight: bold; margin-bottom: 5px;">${match.player1.replace('üéæ ', '')}</div>
                                <div style="font-size: 1.5rem; color: ${match.player1.replace('üéæ ', '') === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player1}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player1.replace('üéæ ', '') === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                            <div style="text-align: center; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 10px;">
                                <div style="font-weight: bold; margin-bottom: 5px;">${match.player2.replace('üéæ ', '')}</div>
                                <div style="font-size: 1.5rem; color: ${match.player2.replace('üéæ ', '') === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player2}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player2.replace('üéæ ', '') === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                        </div>
                        
                        ${prediction.key_factors && prediction.key_factors.length > 0 ? `
                        <div style="margin-top: 20px;">
                            <div style="font-weight: 600; margin-bottom: 12px;">üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</div>
                            ${prediction.key_factors.slice(0, 3).map(factor => `
                                <div style="background: rgba(255,255,255,0.05); margin: 8px 0; padding: 12px; border-radius: 8px; border-left: 3px solid #6bcf7f;">
                                    ${factor}
                                </div>
                            `).join('')}
                        </div>
                        ` : ''}
                        
                        <div style="margin-top: 16px; text-align: center; font-size: 0.9rem; opacity: 0.6;">
                            üí∞ API Economy ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${analysis.quality_rating} ‚Ä¢ ${match.api_status || 'üì°'}
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        async function forceAPIUpdate() {
            try {
                const response = await fetch(`${API_BASE}/trigger-manual-update`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\\n–ü—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
                } else {
                    alert(`‚ùå –û—à–∏–±–∫–∞: ${data.error}`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
        
        async function showAPIStatus() {
            try {
                const response = await fetch(`${API_BASE}/api-stats`);
                const data = await response.json();
                
                if (data.success) {
                    const stats = data.api_usage;
                    alert(`üìä –°–¢–ê–¢–£–° API ECONOMY:\\n\\n` +
                          `–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: ${stats.requests_this_hour}/${stats.max_per_hour}\\n` +
                          `–û—Å—Ç–∞–µ—Ç—Å—è: ${stats.remaining_hour}\\n` +
                          `–ö–µ—à —ç–ª–µ–º–µ–Ω—Ç–æ–≤: ${stats.cache_items}\\n` +
                          `–í—Ä–µ–º—è –∫–µ—à–∞: ${stats.cache_minutes} –º–∏–Ω—É—Ç\\n` +
                          `–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: ${stats.manual_update_status}\\n\\n` +
                          `üí∞ –°–∏—Å—Ç–µ–º–∞ —ç–∫–æ–Ω–æ–º–∏–∏ API —Ä–∞–±–æ—Ç–∞–µ—Ç!`);
                } else {
                    alert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
        
        async function clearAPICache() {
            try {
                const response = await fetch(`${API_BASE}/clear-cache`, {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert('üßπ –ö–µ—à API –æ—á–∏—â–µ–Ω!\\n–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—Ä–æ—Å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ.');
                    loadStats();
                } else {
                    alert(`‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
        
        // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        document.addEventListener('DOMContentLoaded', function() {
            loadStats();
            setTimeout(loadUnderdogMatches, 1000);
            setInterval(loadStats, 30000);
        });
    </script>
</body>
</html>'''

@app.route('/api/quality-matches')
def get_quality_matches():
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º"""
    try:
        logger.info("üíé Getting quality underdog matches via API Economy...")
        
        quality_matches = generate_quality_matches()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API
        api_usage = get_api_usage()
        
        return jsonify({
            'success': True,
            'matches': quality_matches,
            'count': len(quality_matches),
            'source': quality_matches[0]['data_source'] if quality_matches else 'NO_MATCHES',
            'stats': {
                'total_matches': len(quality_matches),
                'high_quality': len([m for m in quality_matches if m['underdog_analysis']['quality_rating'] == 'HIGH']),
                'avg_probability': f"{(sum([m['underdog_analysis']['prediction']['probability'] for m in quality_matches]) / len(quality_matches) * 100):.0f}%" if quality_matches else "0%"
            },
            'system_info': {
                'api_economy_active': True,
                'api_requests_remaining': api_usage.get('remaining_hour', 0),
                'cache_items': api_usage.get('cache_items', 0),
                'prediction_type': 'SMART_UNDERDOG_ML'
            },
            'api_usage': api_usage,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Quality matches error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/trigger-manual-update', methods=['POST'])
def trigger_manual_update_api():
    """–ó–∞–ø—É—Å–∫ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    try:
        success = trigger_manual_update()
        
        if success:
            return jsonify({
                'success': True,
                'message': 'Manual update triggered successfully',
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'error': 'API Economy not initialized'
            })
            
    except Exception as e:
        logger.error(f"‚ùå Manual update error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/api-stats', methods=['GET'])
def get_api_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API Economy"""
    try:
        api_usage = get_api_usage()
        
        return jsonify({
            'success': True,
            'api_usage': api_usage,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå API stats error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/clear-cache', methods=['POST'])
def clear_cache_api():
    """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ API"""
    try:
        clear_api_cache()
        
        return jsonify({
            'success': True,
            'message': 'API cache cleared successfully',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Clear cache error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API Economy"""
    try:
        api_usage = get_api_usage()
        
        return jsonify({
            'status': 'healthy',
            'system': 'smart_underdog_tennis_with_api_economy',
            'api_economy_active': True,
            'api_requests_remaining': api_usage.get('remaining_hour', 0),
            'cache_items': api_usage.get('cache_items', 0),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'status': 'limited',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å API Economy"""
    try:
        api_usage = get_api_usage()
        
        return jsonify({
            'success': True,
            'stats': {
                'system_type': 'Smart Underdog Tennis with API Economy',
                'api_economy_active': True,
                'api_requests_hour': f"{api_usage.get('requests_this_hour', 0)}/{api_usage.get('max_per_hour', 30)}",
                'api_requests_remaining': api_usage.get('remaining_hour', 0),
                'cache_items': api_usage.get('cache_items', 0),
                'cache_duration_minutes': api_usage.get('cache_minutes', 20),
                'manual_update_status': api_usage.get('manual_update_status', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'),
                'last_update': datetime.now().isoformat()
            },
            'api_usage': api_usage
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint not found'
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'success': False,
        'error': 'Internal server error'
    }), 500

if __name__ == '__main__':
    print("üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TENNIS BACKEND –° API ECONOMY")
    print("=" * 70)
    print("üí∞ API ECONOMY FEATURES:")
    print("‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚Ä¢ ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å")
    print("‚Ä¢ ‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ ‚úÖ Fallback –Ω–∞ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏–≥—Ä–æ–∫–∞–º–∏")
    print("‚Ä¢ ‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤")
    print("=" * 70)
    print(f"üåê Dashboard: http://localhost:5001")
    print(f"üì° API: http://localhost:5001/api/*")
    print(f"üí∞ API Economy: ‚úÖ Active")
    print("=" * 70)
    print("üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï API:")
    print("‚Ä¢ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /api/trigger-manual-update")
    print("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API: GET /api/api-stats")
    print("‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: POST /api/clear-cache")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å API
    try:
        usage = get_api_usage()
        print(f"üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° API:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {usage.get('requests_this_hour', 0)}/{usage.get('max_per_hour', 30)}")
        print(f"   –û—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('remaining_hour', 0)}")
        print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: {usage.get('cache_items', 0)}")
        print(f"   –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {usage.get('manual_update_status', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    print("=" * 70)
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –í –≠–¢–û–ô –í–ï–†–°–ò–ò:")
    print("‚Ä¢ ‚úÖ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∫–∞–∑ –º–∞—Ç—á–µ–π (fallback –∫ –¥–µ–º–æ)")
    print("‚Ä¢ ‚úÖ –†–µ–∞–ª—å–Ω—ã–µ –∏–≥—Ä–æ–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ API –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ ‚úÖ –ë–æ–ª–µ–µ –º—è–≥–∫–∏–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    print("‚Ä¢ ‚úÖ –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    print("=" * 70)
    
    try:
        app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Server error: {e}")