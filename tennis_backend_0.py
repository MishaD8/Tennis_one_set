@app.route('/api/quality-matches')
def get_quality_matches():
    """–û–ë–ù–û–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç API Economy —Å–∏—Å—Ç–µ–º—É"""
    try:
        logger.info("üí∞ Using API Economy for quality matches...")
        
        quality_matches = generate_quality_matches()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        season_context = "Unknown Season"
        data_source = "API_ECONOMY"
        
        if universal_data_ready and universal_data_collector:
            season_context = universal_data_collector.get_season_context()
            data_source = "API_ECONOMY_UNIVERSAL"
        
        if not quality_matches:
            return jsonify({
                'success': False,
                'message': 'No quality matches found via API Economy',
                'matches': [],
                'season_context': season_context,
                'source': data_source + '_NO_MATCHES'
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        probabilities = [m['underdog_analysis']['prediction']['probability'] for m in quality_matches]
        strong_underdogs = len([p for p in probabilities if p > 0.70])
        
        return jsonify({
            'success': True,
            'matches': quality_matches,
            'count': len(quality_matches),
            'source': data_source,
            'season_context': season_context,
            'stats': {
                'total_matches': len(quality_matches),
                'strong_underdogs': strong_underdogs,
                'avg_probability': f"{(sum(probabilities) / len(probabilities) * 100):.0f}%"
            },
            'system_info': {
                'api_economy_active': True,
                'data_source': data_source,
                'prediction_type': 'API_ECONOMY_ML_UNDERDOG'
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Quality matches error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± API Economy"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API Economy
        usage_stats = get_api_usage()
        
        return jsonify({
            'status': 'healthy',
            'system': 'tennis_backend_with_api_economy',
            'api_economy_active': True,
            'api_requests_remaining': usage_stats.get('remaining_hour', 0),
            'cache_items': usage_stats.get('cache_items', 0),
            'universal_data_system': universal_data_ready,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        return jsonify({
            'status': 'limited',
            'error': str(e),
            'timestamp': datetime.now().isoformat()
        }), 500

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Å API Economy"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É API Economy
        usage_stats = get_api_usage()
        
        return jsonify({
            'success': True,
            'stats': {
                'system_type': 'Tennis Backend with API Economy',
                'api_economy_active': True,
                'api_requests_hour': f"{usage_stats.get('requests_this_hour', 0)}/{usage_stats.get('max_per_hour', 30)}",
                'api_requests_remaining': usage_stats.get('remaining_hour', 0),
                'cache_items': usage_stats.get('cache_items', 0),
                'cache_duration_minutes': usage_stats.get('cache_minutes', 20),
                'manual_update_status': usage_stats.get('manual_update_status', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è'),
                'universal_data_active': universal_data_ready,
                'last_update': datetime.now().isoformat()
            },
            'api_usage': usage_stats
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint not found'
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'success': False,
        'error': 'Internal server error'
    }), 500

if __name__ == '__main__':
    print("üéæ TENNIS BACKEND –° –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô API ECONOMY")
    print("=" * 70)
    print("üí∞ API ECONOMY FEATURES:")
    print("‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("‚Ä¢ ‚úÖ –ö–æ–Ω—Ç—Ä–æ–ª—å –ª–∏–º–∏—Ç–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å")
    print("‚Ä¢ ‚úÖ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ ‚úÖ Fallback –Ω–∞ –∫–µ—à –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤")
    print("‚Ä¢ ‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è API")
    print("=" * 70)
    print(f"üåê Dashboard: http://localhost:5001")
    print(f"üì° API: http://localhost:5001/api/*")
    print(f"üí∞ API Economy: ‚úÖ Active")
    print(f"üåç Universal Data: {'‚úÖ Active' if universal_data_ready else '‚ö†Ô∏è Fallback mode'}")
    print("=" * 70)
    print("üîß –£–ü–†–ê–í–õ–ï–ù–ò–ï API:")
    print("‚Ä¢ –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: POST /api/trigger-manual-update")
    print("‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ API: GET /api/api-stats")
    print("‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞: POST /api/clear-cache")
    print("=" * 70)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å API
    try:
        usage = get_api_usage()
        print(f"üìä –¢–ï–ö–£–©–ò–ô –°–¢–ê–¢–£–° API:")
        print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å: {usage.get('requests_this_hour', 0)}/{usage.get('max_per_hour', 30)}")
        print(f"   –û—Å—Ç–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å–æ–≤: {usage.get('remaining_hour', 0)}")
        print(f"   –≠–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –∫–µ—à–µ: {usage.get('cache_items', 0)}")
        print(f"   –†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {usage.get('manual_update_status', '–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è')}")
    except Exception as e:
        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {e}")
    
    print("=" * 70)
    
    try:
        app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Server error: {e}")#!/usr/bin/env python3
"""
üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Tennis Backend —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π API Economy
"""

import os
from dotenv import load_dotenv
from typing import Optional
from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import random
import math
from datetime import datetime, timedelta
import numpy as np

# –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø API ECONOMY
from api_economy_patch import (
    init_api_economy, 
    economical_tennis_request, 
    get_api_usage, 
    trigger_manual_update,
    check_manual_update_status,
    clear_api_cache
)

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø API ECONOMY –ü–†–ò –ó–ê–ü–£–°–ö–ï
init_api_economy(
    api_key="a1b20d709d4bacb2d95ddab880f91009",
    max_per_hour=30,
    cache_minutes=20
)

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from universal_data_fix import UniversalTennisDataFix
    UNIVERSAL_DATA_AVAILABLE = True
    print("‚úÖ Universal tennis data system imported")
except ImportError as e:
    print(f"‚ö†Ô∏è Universal data system not available: {e}")
    UNIVERSAL_DATA_AVAILABLE = False

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
universal_data_collector = None

def initialize_universal_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö"""
    global universal_data_collector
    
    if UNIVERSAL_DATA_AVAILABLE:
        try:
            universal_data_collector = UniversalTennisDataFix()
            logger.info("üåç Universal data collector initialized")
            return True
        except Exception as e:
            logger.error(f"‚ùå Universal data initialization failed: {e}")
            return False
    else:
        logger.warning("‚ö†Ô∏è Universal data collector not available")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
universal_data_ready = initialize_universal_data()

class SmartUnderdogPredictor:
    """–£–º–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏—é–ª—å 2025
        self.player_database = {
            # ATP —Ç–æ–ø-–∏–≥—Ä–æ–∫–∏
            'jannik sinner': {'rank': 1, 'age': 23, 'form': 0.90, 'grass_skill': 0.78, 'set_tenacity': 0.85, 'big_match': 0.85},
            'carlos alcaraz': {'rank': 2, 'age': 21, 'form': 0.88, 'grass_skill': 0.75, 'set_tenacity': 0.80, 'big_match': 0.82},
            'alexander zverev': {'rank': 3, 'age': 27, 'form': 0.82, 'grass_skill': 0.68, 'set_tenacity': 0.75, 'big_match': 0.78},
            'daniil medvedev': {'rank': 4, 'age': 28, 'form': 0.78, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.82},
            'novak djokovic': {'rank': 6, 'age': 37, 'form': 0.75, 'grass_skill': 0.95, 'set_tenacity': 0.95, 'big_match': 0.95},
            
            # –°—Ä–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∏)
            'ben shelton': {'rank': 15, 'age': 22, 'form': 0.72, 'grass_skill': 0.70, 'set_tenacity': 0.75, 'big_match': 0.60},
            'tommy paul': {'rank': 12, 'age': 27, 'form': 0.75, 'grass_skill': 0.72, 'set_tenacity': 0.78, 'big_match': 0.70},
            'frances tiafoe': {'rank': 18, 'age': 26, 'form': 0.70, 'grass_skill': 0.68, 'set_tenacity': 0.80, 'big_match': 0.65},
            'brandon nakashima': {'rank': 45, 'age': 23, 'form': 0.68, 'grass_skill': 0.62, 'set_tenacity': 0.72, 'big_match': 0.50},
            'fabio fognini': {'rank': 85, 'age': 37, 'form': 0.62, 'grass_skill': 0.58, 'set_tenacity': 0.65, 'big_match': 0.75},
            
            # WTA
            'aryna sabalenka': {'rank': 1, 'age': 26, 'form': 0.85, 'grass_skill': 0.72, 'set_tenacity': 0.82, 'big_match': 0.80},
            'iga swiatek': {'rank': 2, 'age': 23, 'form': 0.88, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.85},
            'emma raducanu': {'rank': 90, 'age': 22, 'form': 0.62, 'grass_skill': 0.68, 'set_tenacity': 0.70, 'big_match': 0.50},
            'katie boulter': {'rank': 28, 'age': 27, 'form': 0.68, 'grass_skill': 0.75, 'set_tenacity': 0.72, 'big_match': 0.60},
            'amanda anisimova': {'rank': 35, 'age': 23, 'form': 0.72, 'grass_skill': 0.58, 'set_tenacity': 0.75, 'big_match': 0.55},
        }
    
    def get_player_data(self, player_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_database:
            return self.player_database[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, data in self.player_database.items():
            if any(part in known_player for part in name_lower.split()):
                return data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        rank = random.randint(40, 150)
        return {
            'rank': rank,
            'age': random.randint(20, 32),
            'form': max(0.4, 0.8 - rank/200),
            'grass_skill': random.uniform(0.5, 0.7),
            'set_tenacity': random.uniform(0.6, 0.8),
            'big_match': max(0.3, 0.8 - rank/150)
        }
    
    def determine_underdog_from_odds(self, player1, player2, odds1, odds2):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º"""
        # –ê–Ω–¥–µ—Ä–¥–æ–≥ = –∏–≥—Ä–æ–∫ —Å –ë–û–õ–¨–®–ò–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞)
        if odds1 > odds2:
            return {
                'underdog': player1,
                'favorite': player2,
                'underdog_odds': odds1,
                'favorite_odds': odds2,
                'is_player1_underdog': True
            }
        else:
            return {
                'underdog': player2,
                'favorite': player1, 
                'underdog_odds': odds2,
                'favorite_odds': odds1,
                'is_player1_underdog': False
            }
    
    def calculate_smart_set_probability(self, underdog_name, favorite_name, underdog_odds, favorite_odds):
        """–£–º–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
        
        underdog_data = self.get_player_data(underdog_name)
        favorite_data = self.get_player_data(favorite_name)
        
        # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        match_prob = 1.0 / underdog_odds
        base_set_prob = min(0.85, match_prob + 0.25)
        
        # 2. –§–∞–∫—Ç–æ—Ä—ã
        tenacity_factor = underdog_data['set_tenacity'] * 0.3
        grass_factor = (underdog_data['grass_skill'] - 0.6) * 0.2
        big_match_factor = underdog_data['big_match'] * 0.15
        form_factor = (underdog_data['form'] - 0.65) * 0.2
        
        # 3. –í–æ–∑—Ä–∞—Å—Ç
        age_factor = 0
        if underdog_data['age'] < 25:
            age_factor = 0.05
        elif underdog_data['age'] > 32:
            age_factor = -0.03
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        final_probability = (base_set_prob + tenacity_factor + grass_factor + 
                           big_match_factor + form_factor + age_factor)
        
        final_probability = max(0.25, min(0.92, final_probability))
        
        confidence = 'Very High' if final_probability > 0.8 else \
                    'High' if final_probability > 0.7 else 'Medium'
        
        factors = self._analyze_key_factors(underdog_data, favorite_data, underdog_odds, final_probability)
        
        return {
            'probability': round(final_probability, 3),
            'confidence': confidence,
            'key_factors': factors
        }
    
    def _analyze_key_factors(self, underdog_data, favorite_data, underdog_odds, probability):
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–∞"""
        factors = []
        
        if underdog_data['set_tenacity'] > 0.75:
            factors.append(f"üî• –í—ã—Å–æ–∫–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö ({underdog_data['set_tenacity']:.0%})")
        
        if underdog_data['grass_skill'] > 0.70:
            factors.append(f"üå± –•–æ—Ä–æ—à–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —Ç—Ä–∞–≤–µ")
        
        if underdog_data['form'] > 0.70:
            factors.append(f"üìà –•–æ—Ä–æ—à–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞")
        elif underdog_data['form'] < 0.60:
            factors.append(f"üìâ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π - –Ω–æ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è")
        
        if underdog_data['age'] < 24:
            factors.append(f"‚ö° –ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫ - –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞")
        
        if underdog_data['big_match'] > 0.70:
            factors.append(f"üíé –û–ø—ã—Ç –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        if underdog_odds > 4.0:
            factors.append(f"üéØ –ë–æ–ª—å—à–æ–π –∞–Ω–¥–µ—Ä–¥–æ–≥ (–∫–æ—ç—Ñ. {underdog_odds}) - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–µ–Ω—Å–∞—Ü–∏–∏")
        elif underdog_odds > 2.5:
            factors.append(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –∞–Ω–¥–µ—Ä–¥–æ–≥ - —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–Ω—Å—ã")
        
        return factors[:4]

# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ï–î–ò–ö–¢–û–†–ê –ü–û–°–õ–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ö–õ–ê–°–°–ê
predictor = SmartUnderdogPredictor()

def get_fallback_demo_matches():
    """Fallback –¥–µ–º–æ –º–∞—Ç—á–∏"""
    return [
        {
            'player1': 'Demo Player A', 'player2': 'Demo Player B',
            'odds1': 2.20, 'odds2': 1.75,
            'tournament': 'Demo Tournament', 'round': 'Demo',
            'court': 'Demo Court', 'time': 'TBD',
            'surface': 'Hard', 'level': 'Demo'
        }
    ]

def extract_best_odds_from_api(bookmakers):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö The Odds API"""
    best_odds1 = None
    best_odds2 = None
    
    for bookmaker in bookmakers:
        for market in bookmaker.get('markets', []):
            if market.get('key') == 'h2h':
                outcomes = market.get('outcomes', [])
                if len(outcomes) >= 2:
                    odds1 = outcomes[0].get('price')
                    odds2 = outcomes[1].get('price')
                    
                    if odds1 and odds2:
                        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ª—É—á—à–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞)
                        if not best_odds1 or odds1 > best_odds1:
                            best_odds1 = odds1
                        if not best_odds2 or odds2 > best_odds2:
                            best_odds2 = odds2
    
    return best_odds1, best_odds2

def get_live_matches_with_api_economy():
    """–ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API Economy"""
    
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú API ECONOMY –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•
        logger.info("üåç Using API Economy for live matches")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        result = economical_tennis_request('tennis')
        
        if result['success']:
            raw_data = result['data']
            source_info = f"API_ECONOMY_{result['status']}"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ The Odds API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            converted_matches = []
            
            for api_match in raw_data:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    player1 = api_match.get('home_team', 'Player 1')
                    player2 = api_match.get('away_team', 'Player 2')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    odds1, odds2 = extract_best_odds_from_api(api_match.get('bookmakers', []))
                    
                    if odds1 and odds2:
                        match = {
                            'player1': player1,
                            'player2': player2,
                            'odds1': odds1,
                            'odds2': odds2,
                            'tournament': 'Live Tournament',
                            'surface': 'Hard',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            'round': 'Live',
                            'court': 'TBD',
                            'time': api_match.get('commence_time', '14:00')[:5] if api_match.get('commence_time') else '14:00'
                        }
                        converted_matches.append(match)
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                    continue
            
            if converted_matches:
                return {
                    'matches': converted_matches,
                    'source': source_info,
                    'api_status': result.get('emoji', 'üì°'),
                    'success': True
                }
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–∞—Ç—á–∏ –∏–∑ API")
                
        else:
            logger.warning(f"API Economy error: {result.get('error', 'Unknown')}")
            
    except Exception as e:
        logger.error(f"‚ùå API Economy error: {e}")
    
    # Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
    return {
        'matches': get_fallback_demo_matches(),
        'source': 'FALLBACK_DEMO', 
        'success': True
    }

def generate_quality_matches():
    """–û–ë–ù–û–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API Economy"""
    
    # –ü–æ–ª—É—á–∞–µ–º live –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ API Economy
    live_data = get_live_matches_with_api_economy()
    potential_matches = live_data['matches']
    
    quality_matches = []
    
    for match_data in potential_matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
        underdog_info = predictor.determine_underdog_from_odds(
            match_data['player1'], match_data['player2'],
            match_data['odds1'], match_data['odds2']
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
        prediction = predictor.calculate_smart_set_probability(
            underdog_info['underdog'],
            underdog_info['favorite'], 
            underdog_info['underdog_odds'],
            underdog_info['favorite_odds']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if (prediction['probability'] >= 0.45 and 
            prediction['probability'] <= 0.88 and
            1.8 <= underdog_info['underdog_odds'] <= 8.0):
            
            match = {
                'id': f"api_economy_{len(quality_matches)+1}",
                'player1': f"üéæ {match_data['player1']}",
                'player2': f"üéæ {match_data['player2']}",
                'tournament': f"üèÜ {match_data['tournament']}",
                'surface': match_data['surface'],
                'round': match_data['round'],
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': match_data['time'],
                
                'odds': {
                    'player1': match_data['odds1'],
                    'player2': match_data['odds2']
                },
                
                'underdog_analysis': {
                    'underdog': underdog_info['underdog'],
                    'favorite': underdog_info['favorite'],
                    'underdog_odds': underdog_info['underdog_odds'],
                    'prediction': prediction,
                    'quality_rating': 'HIGH' if prediction['probability'] > 0.70 else 'MEDIUM'
                },
                
                'focus': f"üíé {underdog_info['underdog']} –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç",
                'recommendation': f"{prediction['probability']:.0%} —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç",
                'data_source': live_data['source'],
                'api_status': live_data.get('api_status', 'üì°')
            }
            
            quality_matches.append(match)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    quality_matches.sort(key=lambda x: x['underdog_analysis']['prediction']['probability'], reverse=True)
    
    return quality_matches

def get_live_matches_with_api_economy():
    """–ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API Economy"""
    
    try:
        # –ò–°–ü–û–õ–¨–ó–£–ï–ú API ECONOMY –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –î–ê–ù–ù–´–•
        logger.info("üåç Using API Economy for live matches")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —ç–∫–æ–Ω–æ–º–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É
        result = economical_tennis_request('tennis')
        
        if result['success']:
            raw_data = result['data']
            source_info = f"API_ECONOMY_{result['status']}"
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ The Odds API –≤ –Ω–∞—à —Ñ–æ—Ä–º–∞—Ç
            converted_matches = []
            
            for api_match in raw_data:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    player1 = api_match.get('home_team', 'Player 1')
                    player2 = api_match.get('away_team', 'Player 2')
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    odds1, odds2 = extract_best_odds_from_api(api_match.get('bookmakers', []))
                    
                    if odds1 and odds2:
                        match = {
                            'player1': player1,
                            'player2': player2,
                            'odds1': odds1,
                            'odds2': odds2,
                            'tournament': 'Live Tournament',
                            'surface': 'Hard',  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            'round': 'Live',
                            'court': 'TBD',
                            'time': api_match.get('commence_time', '14:00')[:5] if api_match.get('commence_time') else '14:00'
                        }
                        converted_matches.append(match)
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Ç—á–∞: {e}")
                    continue
            
            if converted_matches:
                return {
                    'matches': converted_matches,
                    'source': source_info,
                    'api_status': result.get('emoji', 'üì°'),
                    'success': True
                }
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –º–∞—Ç—á–∏ –∏–∑ API")
                
        else:
            logger.warning(f"API Economy error: {result.get('error', 'Unknown')}")
            
    except Exception as e:
        logger.error(f"‚ùå API Economy error: {e}")
    
    # Fallback –∫ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–º
    return {
        'matches': get_fallback_demo_matches(),
        'source': 'FALLBACK_DEMO', 
        'success': True
    }

def extract_best_odds_from_api(bookmakers):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ –¥–∞–Ω–Ω—ã—Ö The Odds API"""
    best_odds1 = None
    best_odds2 = None
    
    for bookmaker in bookmakers:
        for market in bookmaker.get('markets', []):
            if market.get('key') == 'h2h':
                outcomes = market.get('outcomes', [])
                if len(outcomes) >= 2:
                    odds1 = outcomes[0].get('price')
                    odds2 = outcomes[1].get('price')
                    
                    if odds1 and odds2:
                        # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (–ª—É—á—à–∏–µ –¥–ª—è –∏–≥—Ä–æ–∫–∞)
                        if not best_odds1 or odds1 > best_odds1:
                            best_odds1 = odds1
                        if not best_odds2 or odds2 > best_odds2:
                            best_odds2 = odds2
    
    return best_odds1, best_odds2