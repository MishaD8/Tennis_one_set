#!/usr/bin/env python3
"""
üß™ –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤—Å–µ—Ö –Ω–æ–≤—ã—Ö endpoints
"""

import requests
import json
import time

API_BASE = 'http://localhost:5001'

def test_health_check():
    """–¢–µ—Å—Ç health check"""
    print("üè• Testing health check...")
    try:
        response = requests.get(f"{API_BASE}/api/health")
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health check: {data['status']}")
            return True
        else:
            print(f"‚ùå Health check failed: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Health check error: {e}")
        return False

def test_single_prediction():
    """–¢–µ—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
    print("\nüéæ Testing single prediction...")
    
    test_data = {
        "player_rank": 1,
        "opponent_rank": 45,
        "player_age": 30,
        "opponent_age": 26,
        "player_recent_win_rate": 0.85,
        "player_form_trend": 0.08,
        "player_surface_advantage": 0.12,
        "h2h_win_rate": 0.75,
        "total_pressure": 3.2
    }
    
    try:
        response = requests.post(
            f"{API_BASE}/api/predict",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                prediction = data['prediction']
                print(f"‚úÖ Single prediction successful!")
                print(f"   Probability: {prediction['probability']:.1%}")
                print(f"   Confidence: {prediction['confidence']}")
                print(f"   Recommendation: {prediction['recommendation']}")
                
                if 'individual_predictions' in prediction:
                    print(f"   Individual models:")
                    for model, prob in prediction['individual_predictions'].items():
                        print(f"     ‚Ä¢ {model}: {prob:.1%}")
                
                return True
            else:
                print(f"‚ùå Prediction failed: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            print(f"   Response: {response.text}")
            
    except Exception as e:
        print(f"‚ùå Single prediction error: {e}")
    
    return False

def test_batch_predictions():
    """–¢–µ—Å—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤"""
    print("\nüéæ Testing batch predictions...")
    
    test_data = {
        "matches": [
            {
                "player_rank": 1,
                "opponent_rank": 45,
                "player_recent_win_rate": 0.85,
                "player_surface_advantage": 0.12
            },
            {
                "player_rank": 5,
                "opponent_rank": 6,
                "player_recent_win_rate": 0.72,
                "h2h_win_rate": 0.58
            },
            {
                "player_rank": 35,
                "opponent_rank": 8,
                "player_recent_win_rate": 0.88,
                "player_surface_advantage": 0.18
            }
        ]
    }
    
    try:
        response = requests.post(
            f"{API_BASE}/api/predict/batch",
            json=test_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            data = response.json()
            if data['success']:
                predictions = data['predictions']
                print(f"‚úÖ Batch predictions successful!")
                print(f"   Processed {len(predictions)} matches:")
                
                for i, pred in enumerate(predictions, 1):
                    if 'probability' in pred and pred['probability'] is not None:
                        print(f"     {i}. Probability: {pred['probability']:.1%} ({pred['confidence']})")
                    else:
                        print(f"     {i}. Error: {pred.get('error', 'Unknown error')}")
                
                return True
            else:
                print(f"‚ùå Batch prediction failed: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå HTTP Error: {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Batch prediction error: {e}")
    
    return False

def test_existing_endpoints():
    """–¢–µ—Å—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö endpoints"""
    print("\nüìä Testing existing endpoints...")
    
    endpoints = [
        ('/api/stats', 'Stats'),
        ('/api/matches', 'Matches'),
        ('/api/refresh', 'Refresh')
    ]
    
    results = {}
    
    for endpoint, name in endpoints:
        try:
            response = requests.get(f"{API_BASE}{endpoint}")
            if response.status_code == 200:
                data = response.json()
                if data.get('success', False):
                    print(f"‚úÖ {name} endpoint working")
                    results[name] = True
                else:
                    print(f"‚ö†Ô∏è {name} endpoint returned success=false")
                    results[name] = False
            else:
                print(f"‚ùå {name} endpoint HTTP error: {response.status_code}")
                results[name] = False
        except Exception as e:
            print(f"‚ùå {name} endpoint error: {e}")
            results[name] = False
    
    return results

def test_dashboard():
    """–¢–µ—Å—Ç –¥–∞—à–±–æ—Ä–¥–∞"""
    print("\nüåê Testing dashboard...")
    try:
        response = requests.get(f"{API_BASE}/")
        if response.status_code == 200:
            content = response.text
            if 'Tennis Prediction Dashboard' in content:
                print("‚úÖ Dashboard loading successfully")
                return True
            else:
                print("‚ö†Ô∏è Dashboard content unexpected")
        else:
            print(f"‚ùå Dashboard HTTP error: {response.status_code}")
    except Exception as e:
        print(f"‚ùå Dashboard error: {e}")
    
    return False

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° Performance test...")
    
    test_data = {
        "player_rank": 10,
        "opponent_rank": 15,
        "player_recent_win_rate": 0.7
    }
    
    times = []
    success_count = 0
    
    for i in range(5):
        try:
            start_time = time.time()
            response = requests.post(
                f"{API_BASE}/api/predict",
                json=test_data,
                headers={'Content-Type': 'application/json'}
            )
            end_time = time.time()
            
            if response.status_code == 200:
                times.append(end_time - start_time)
                success_count += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è Request {i+1} failed: {e}")
    
    if times:
        avg_time = sum(times) / len(times)
        print(f"‚úÖ Performance test results:")
        print(f"   Successful requests: {success_count}/5")
        print(f"   Average response time: {avg_time:.3f}s")
        print(f"   Min/Max: {min(times):.3f}s / {max(times):.3f}s")
        return True
    else:
        print("‚ùå All performance test requests failed")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–û–ô –°–ò–°–¢–ï–ú–´ –ü–†–û–ì–ù–û–ó–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    
    # –°—á–µ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
    tests_passed = 0
    total_tests = 6
    
    # 1. Health check
    if test_health_check():
        tests_passed += 1
    
    # 2. –î–∞—à–±–æ—Ä–¥
    if test_dashboard():
        tests_passed += 1
    
    # 3. –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ endpoints
    existing_results = test_existing_endpoints()
    if all(existing_results.values()):
        tests_passed += 1
    
    # 4. –ü—Ä–æ–≥–Ω–æ–∑ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
    if test_single_prediction():
        tests_passed += 1
    
    # 5. –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    if test_batch_predictions():
        tests_passed += 1
    
    # 6. –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if performance_test():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\n" + "=" * 70)
    print(f"üéæ –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 70)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    elif tests_passed >= total_tests * 0.8:
        print("‚ö° –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ—à–ª–∏!")
        print("üí° –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    print(f"\nüí° –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
    print("1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:5001 –≤ –±—Ä–∞—É–∑–µ—Ä–µ")
    print("2. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –¥–∞—à–±–æ—Ä–¥–∞")
    print("3. üéØ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    print("4. üîß –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –º–æ–¥–µ–ª–∏")

if __name__ == "__main__":
    main()