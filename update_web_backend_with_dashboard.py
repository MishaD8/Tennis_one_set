#!/usr/bin/env python3
"""
üîÑ –û–ë–ù–û–í–õ–ï–ù–ò–ï web_backend_with_dashboard.py
–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –≤–∞—à –≥–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª
"""

import os
import re
from datetime import datetime

TARGET_FILE = 'web_backend_with_dashboard.py'

def backup_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    if os.path.exists(TARGET_FILE):
        backup_name = f"{TARGET_FILE}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        try:
            with open(TARGET_FILE, 'r', encoding='utf-8') as original:
                with open(backup_name, 'w', encoding='utf-8') as backup:
                    backup.write(original.read())
            print(f"üíæ Backup created: {backup_name}")
            return backup_name
        except Exception as e:
            print(f"‚ùå Backup error: {e}")
            return None
    else:
        print(f"‚ùå {TARGET_FILE} not found!")
        return None

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    
    missing_files = []
    
    if not os.path.exists('real_tennis_data_collector.py'):
        missing_files.append('real_tennis_data_collector.py')
    
    if missing_files:
        print(f"‚ùå Missing required files:")
        for file in missing_files:
            print(f"   üìÑ {file}")
        
        print(f"\nüí° Create real_tennis_data_collector.py first!")
        print(f"Use the code from 'Real Tennis Data Integration Fix' artifact")
        return False
    
    print("‚úÖ All required files found")
    return True

def update_imports():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–æ–≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    
    try:
        with open(TARGET_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'REAL_DATA_AVAILABLE' in content:
            print("‚ö†Ô∏è Real data imports already exist")
            return True
        
        # –ò–º–ø–æ—Ä—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        import_addition = """
# –î–û–ë–ê–í–õ–ï–ù–û: –ò–º–ø–æ—Ä—Ç —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
try:
    from real_tennis_data_collector import RealTennisDataCollector, RealOddsCollector
    REAL_DATA_AVAILABLE = True
    print("‚úÖ Real tennis data collector imported")
except ImportError as e:
    print(f"‚ö†Ô∏è Real data collector not available: {e}")
    REAL_DATA_AVAILABLE = False
"""
        
        # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\n')
        insert_pos = 0
        
        # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∏–º–ø–æ—Ä—Ç
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                insert_pos = i + 1
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
        lines.insert(insert_pos, import_addition)
        content = '\n'.join(lines)
        
        with open(TARGET_FILE, 'w', encoding='utf-8') as f:
            f.write(content)
        
        print(f"‚úÖ Imports added to {TARGET_FILE}")
        return True
        
    except Exception as e:
        print(f"‚ùå Error updating imports: {e}")
        return False

def add_real_data_methods():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    
    try:
        with open(TARGET_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'def get_real_tennis_data(' in content:
            print("‚ö†Ô∏è Real data methods already exist")
            return True
        
        # –ú–µ—Ç–æ–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        real_data_methods = '''
    def get_real_tennis_data(self, days_ahead=7, filters=None):
        """–ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        if not REAL_DATA_AVAILABLE:
            print("‚ö†Ô∏è Real data not available, using demo")
            return self.get_demo_data_with_warnings()
        
        try:
            print("üîç Fetching REAL tennis data...")
            
            collector = RealTennisDataCollector()
            odds_collector = RealOddsCollector()
            
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏
            all_matches = []
            
            # Wimbledon 2025
            wimbledon_matches = collector.get_wimbledon_2025_schedule()
            if wimbledon_matches:
                all_matches.extend(wimbledon_matches)
                print(f"‚úÖ Wimbledon: {len(wimbledon_matches)} matches")
            
            if all_matches:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                real_odds = odds_collector.get_real_odds(all_matches)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏
                processed = []
                for match in all_matches:
                    processed_match = self.process_real_match(match, real_odds)
                    processed.append(processed_match)
                
                print(f"üéâ SUCCESS: {len(processed)} REAL matches processed!")
                return processed
            else:
                print("‚ö†Ô∏è No real matches found")
                return self.get_demo_data_with_warnings()
                
        except Exception as e:
            print(f"‚ùå Error getting real data: {e}")
            return self.get_demo_data_with_warnings()
    
    def process_real_match(self, match, odds_data):
        """–ù–û–í–û–ï: –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
        match_id = match['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        match_odds = odds_data.get(match_id, {})
        odds_info = match_odds.get('best_markets', {}).get('winner', {})
        
        p1_odds = odds_info.get('player1', {}).get('odds', 2.0)
        p2_odds = odds_info.get('player2', {}).get('odds', 2.0)
        
        # –†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        prediction_prob = 1.0 / p1_odds / (1.0 / p1_odds + 1.0 / p2_odds)
        
        return {
            'id': match_id,
            'player1': match['player1'],
            'player2': match['player2'],
            'tournament': match['tournament'],
            'surface': match['surface'],
            'date': match['date'],
            'time': match['time'],
            'round': match.get('round', 'R32'),
            'prediction': {
                'probability': round(prediction_prob, 3),
                'confidence': 'High' if abs(p1_odds - p2_odds) > 1.0 else 'Medium',
                'expected_value': round((prediction_prob * (p1_odds - 1)) - (1 - prediction_prob), 3)
            },
            'metrics': {
                'player1_rank': RealOddsCollector()._estimate_ranking(match['player1']),
                'player2_rank': RealOddsCollector()._estimate_ranking(match['player2']),
                'h2h': 'TBD',
                'recent_form': 'Good'
            },
            'betting': {
                'odds': p1_odds,
                'stake': min(prediction_prob * 100, 50),
                'kelly': max(0, round((prediction_prob * p1_odds - 1) / (p1_odds - 1) * 0.25, 3)),
                'bookmaker': odds_info.get('player1', {}).get('bookmaker', 'Pinnacle')
            },
            'source': 'REAL_DATA',
            'data_quality': 'HIGH'
        }
    
    def get_demo_data_with_warnings(self):
        """–ù–û–í–û–ï: –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏"""
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥
            if hasattr(self, 'generate_fallback_matches'):
                demo_matches = self.generate_fallback_matches()
            else:
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
                demo_matches = [{
                    'id': 'demo_001',
                    'player1': 'Demo Player A',
                    'player2': 'Demo Player B',
                    'tournament': 'Demo Tournament',
                    'surface': 'Hard',
                    'date': '2025-07-01',
                    'time': '15:00',
                    'prediction': {'probability': 0.6, 'confidence': 'Medium'},
                    'betting': {'odds': 1.8, 'stake': 50}
                }]
        except:
            demo_matches = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
        for match in demo_matches:
            match['id'] = f"DEMO_{match.get('id', 'unknown')}"
            match['player1'] = f"‚ö†Ô∏è [DEMO] {match.get('player1', 'Unknown')}"
            match['player2'] = f"‚ö†Ô∏è [DEMO] {match.get('player2', 'Unknown')}"
            match['tournament'] = f"‚ö†Ô∏è DEMO: {match.get('tournament', 'Unknown')}"
            match['warning'] = 'DEMONSTRATION DATA - NOT REAL MATCH'
            match['source'] = 'DEMO_DATA'
            match['data_quality'] = 'DEMO'
        
        return demo_matches
'''
        
        # –ò—â–µ–º –∫–ª–∞—Å—Å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤
        if 'class ' in content:
            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Ç–æ–¥ –≤ –∫–ª–∞—Å—Å–µ
            class_pattern = r'(class\s+\w+.*?)(\n\nclass|\n\ndef(?!\s{4})|\n\nif __name__|\Z)'
            match = re.search(class_pattern, content, re.DOTALL)
            
            if match:
                class_content = match.group(1)
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞
                new_class_content = class_content.rstrip() + real_data_methods + '\n'
                content = content.replace(class_content, new_class_content)
                
                with open(TARGET_FILE, 'w', encoding='utf-8') as f:
                    f.write(content)
                
                print("‚úÖ Real data methods added")
                return True
            else:
                print("‚ùå Could not find class structure")
                return False
        else:
            print("‚ùå No class found")
            return False
            
    except Exception as e:
        print(f"‚ùå Error adding methods: {e}")
        return False

def update_main_method():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ get_upcoming_matches"""
    
    try:
        with open(TARGET_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        # –ò—â–µ–º –º–µ—Ç–æ–¥ get_upcoming_matches
        if 'def get_upcoming_matches(' in content:
            # –ó–∞–º–µ–Ω—è–µ–º –º–µ—Ç–æ–¥
            old_pattern = r'def get_upcoming_matches\(self[^)]*\):.*?(?=\n    def |\n\nclass |\nclass |\Z)'
            
            new_method = '''def get_upcoming_matches(self, days_ahead=7, filters=None):
        """–û–ë–ù–û–í–õ–ï–ù–û: –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º –¥–∞–Ω–Ω—ã–º"""
        try:
            if REAL_DATA_AVAILABLE:
                print("üîç Attempting to get REAL tennis data...")
                real_matches = self.get_real_tennis_data(days_ahead, filters)
                if real_matches and len(real_matches) > 0:
                    # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                    self.cached_matches = real_matches
                    self.last_update = datetime.now()
                    return real_matches
            
            print("‚ö†Ô∏è Using demo data with warnings")
            demo_matches = self.get_demo_data_with_warnings()
            self.cached_matches = demo_matches
            self.last_update = datetime.now()
            return demo_matches
            
        except Exception as e:
            print(f"‚ùå Error in get_upcoming_matches: {e}")
            return self.get_demo_data_with_warnings()'''
            
            new_content = re.sub(old_pattern, new_method, content, flags=re.DOTALL)
            
            if new_content != content:
                with open(TARGET_FILE, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                
                print("‚úÖ get_upcoming_matches method updated")
                return True
            else:
                print("‚ö†Ô∏è get_upcoming_matches method not found or already updated")
                return False
        else:
            print("‚ö†Ô∏è get_upcoming_matches method not found")
            return False
            
    except Exception as e:
        print(f"‚ùå Error updating main method: {e}")
        return False

def verify_update():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    try:
        with open(TARGET_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
        
        checks = {
            'Real data imports': 'REAL_DATA_AVAILABLE' in content,
            'Real data method': 'def get_real_tennis_data(' in content,
            'Process method': 'def process_real_match(' in content,
            'Demo warnings': 'get_demo_data_with_warnings' in content,
            'Updated main method': 'Attempting to get REAL tennis data' in content
        }
        
        print("\nüîç VERIFICATION:")
        success_count = 0
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"   {status} {check}")
            if passed:
                success_count += 1
        
        print(f"\nüìä Verification: {success_count}/{len(checks)} checks passed")
        return success_count >= 3  # –ú–∏–Ω–∏–º—É–º 3 –∏–∑ 5 –ø—Ä–æ–≤–µ—Ä–æ–∫
        
    except Exception as e:
        print(f"‚ùå Verification error: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    
    print(f"üîÑ UPDATING {TARGET_FILE}")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not check_dependencies():
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup = backup_file()
    if not backup:
        return
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    steps = [
        ("Adding imports", update_imports),
        ("Adding real data methods", add_real_data_methods),
        ("Updating main method", update_main_method)
    ]
    
    success_count = 0
    for step_name, step_func in steps:
        print(f"\nüîß {step_name}...")
        try:
            if step_func():
                success_count += 1
                print("   ‚úÖ Success")
            else:
                print("   ‚ùå Failed")
        except Exception as e:
            print(f"   ‚ùå Error: {e}")
    
    print(f"\nüìä UPDATE RESULTS: {success_count}/{len(steps)} steps completed")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if verify_update():
        print(f"\nüéâ SUCCESS! {TARGET_FILE} updated for real data!")
        print(f"\nüìã NEXT STEPS:")
        print(f"1. Test: python3 test_real_data.py")
        print(f"2. Start server: python3 {TARGET_FILE}")
        print(f"3. Check dashboard - should show real Wimbledon matches!")
        print(f"4. Look for 'REAL_DATA' source instead of 'DEMO_DATA'")
        
        print(f"\nüîç WHAT TO EXPECT:")
        print(f"‚Ä¢ Real player names: Rublev, Berrettini, Zverev, etc.")
        print(f"‚Ä¢ Tournament: 'Wimbledon 2025'")
        print(f"‚Ä¢ Surface: 'Grass'")
        print(f"‚Ä¢ Clear warnings for any remaining demo data")
    else:
        print(f"\n‚ö†Ô∏è PARTIAL SUCCESS - some issues occurred")
        print(f"üí° Check backup file: {backup}")
        print(f"üîß Manual review may be needed")

if __name__ == "__main__":
    main()