#!/usr/bin/env python3
"""
üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤ –¥–ª—è Tennis Dashboard
–°–æ–∑–¥–∞–µ—Ç launch_dashboard.py –∏ test_dashboard_integration.py
"""

import os

def create_launcher():
    """–°–æ–∑–¥–∞–µ—Ç launch_dashboard.py"""
    
    launcher_content = '''#!/usr/bin/env python3
"""
üöÄ Tennis Dashboard Launcher
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç backend –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç dashboard
"""

import subprocess
import webbrowser
import time
import os
import sys
import requests
from threading import Thread

def start_backend():
    """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        print("üöÄ –ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞...")
        process = subprocess.Popen([
            sys.executable, "web_backend.py"
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        return process
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ backend: {e}")
        return None

def wait_for_backend(max_attempts=30):
    """–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend"""
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ backend...")
    
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://localhost:5001/api/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ Backend –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                return True
        except:
            pass
        
        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}...")
        time.sleep(2)
    
    print("‚ùå Backend –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
    return False

def open_dashboard():
    """–û—Ç–∫—Ä—ã—Ç–∏–µ dashboard –≤ –±—Ä–∞—É–∑–µ—Ä–µ"""
    dashboard_path = os.path.abspath("web_dashboard.html")
    
    if os.path.exists(dashboard_path):
        print("üåê –û—Ç–∫—Ä—ã—Ç–∏–µ dashboard...")
        webbrowser.open(f"file://{dashboard_path}")
        print(f"‚úÖ Dashboard –æ—Ç–∫—Ä—ã—Ç: {dashboard_path}")
    else:
        print("‚ùå –§–∞–π–ª web_dashboard.html –Ω–µ –Ω–∞–π–¥–µ–Ω")

def main():
    print("üéæ TENNIS DASHBOARD LAUNCHER")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–æ–≤
    required_files = ["web_backend.py", "web_dashboard.html"]
    missing_files = [f for f in required_files if not os.path.exists(f)]
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend
    backend_process = start_backend()
    if not backend_process:
        return
    
    try:
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ backend
        if wait_for_backend():
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º dashboard
            open_dashboard()
            
            print("\\nüéØ –°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê!")
            print("=" * 30)
            print("üåê Dashboard: web_dashboard.html (–æ—Ç–∫—Ä—ã—Ç –≤ –±—Ä–∞—É–∑–µ—Ä–µ)")
            print("üì° Backend API: http://localhost:5001")
            print("üîç Health check: http://localhost:5001/api/health")
            print("\\n‚èπÔ∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            backend_process.wait()
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å backend")
            backend_process.terminate()
            
    except KeyboardInterrupt:
        print("\\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        backend_process.terminate()
        backend_process.wait()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main()
'''
    
    try:
        with open("launch_dashboard.py", "w", encoding="utf-8") as f:
            f.write(launcher_content)
        
        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        try:
            os.chmod("launch_dashboard.py", 0o755)
        except:
            pass
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω launch_dashboard.py")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è launcher: {e}")
        return False

def create_test_integration():
    """–°–æ–∑–¥–∞–µ—Ç test_dashboard_integration.py"""
    
    test_content = '''#!/usr/bin/env python3
"""
üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ Tennis Dashboard
–ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
"""

import requests
import json
import time
import os
from datetime import datetime

def test_backend_endpoints():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö backend endpoints"""
    print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend endpoints...")
    
    base_url = "http://localhost:5001"
    endpoints = [
        ("/api/health", "Health check"),
        ("/api/stats", "System statistics"),
        ("/api/matches", "Tennis matches"),
        ("/api/refresh", "Data refresh"),
        ("/api/check-sports", "Available sports")
    ]
    
    results = {}
    
    for endpoint, description in endpoints:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                results[endpoint] = {
                    "status": "‚úÖ Working",
                    "response_size": len(str(data))
                }
                print(f"‚úÖ {description}: OK")
            else:
                results[endpoint] = {
                    "status": f"‚ùå HTTP {response.status_code}",
                    "error": response.text[:100]
                }
                print(f"‚ùå {description}: HTTP {response.status_code}")
                
        except requests.exceptions.ConnectionError:
            results[endpoint] = {
                "status": "‚ùå Connection refused",
                "error": "Server not running"
            }
            print(f"‚ùå {description}: Server not running")
            
        except Exception as e:
            results[endpoint] = {
                "status": f"‚ùå Error",
                "error": str(e)
            }
            print(f"‚ùå {description}: {str(e)}")
    
    return results

def test_prediction_api():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\\nüéæ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    base_url = "http://localhost:5001"
    
    # –¢–µ—Å—Ç –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
    single_match_data = {
        "player_rank": 1,
        "opponent_rank": 45,
        "player_age": 30,
        "opponent_age": 26,
        "player_recent_win_rate": 0.85,
        "player_form_trend": 0.08,
        "player_surface_advantage": 0.12,
        "h2h_win_rate": 0.75,
        "total_pressure": 3.2
    }
    
    try:
        response = requests.post(
            f"{base_url}/api/predict",
            json=single_match_data,
            headers={'Content-Type': 'application/json'},
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                pred = data['prediction']
                print(f"‚úÖ Single prediction: {pred['probability']:.1%} ({pred.get('confidence', 'N/A')})")
                return True
            else:
                print(f"‚ùå Single prediction failed: {data.get('error')}")
        else:
            print(f"‚ùå Single prediction: HTTP {response.status_code}")
            
    except Exception as e:
        print(f"‚ùå Single prediction error: {e}")
    
    return False

def test_dashboard_html():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML dashboard"""
    print("\\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML dashboard...")
    
    if not os.path.exists("web_dashboard.html"):
        print("‚ùå HTML —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open("web_dashboard.html", "r", encoding="utf-8") as f:
            content = f.read()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
        checks = {
            "API calls": "localhost:5001" in content,
            "Match cards": "match-card" in content,
            "Filters": "filter-group" in content,
            "Stats": "stats-grid" in content,
            "JavaScript": "fetchMatches" in content
        }
        
        all_ok = True
        for check, passed in checks.items():
            status = "‚úÖ" if passed else "‚ùå"
            print(f"{status} {check}: {'Found' if passed else 'Missing'}")
            if not passed:
                all_ok = False
        
        return all_ok
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ HTML: {e}")
        return False

def check_system_files():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("\\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    files_to_check = [
        ("web_backend.py", "Backend server"),
        ("web_dashboard.html", "HTML dashboard"),
        ("tennis_prediction_module.py", "Prediction module"),
        ("launch_dashboard.py", "Dashboard launcher"),
        ("quick_status.py", "Quick status check")
    ]
    
    all_present = True
    
    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            size = os.path.getsize(file_path)
            print(f"‚úÖ {description}: {size:,} bytes")
        else:
            print(f"‚ùå {description}: Missing")
            all_present = False
    
    return all_present

def performance_test():
    """–¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\\n‚ö° –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...")
    
    test_data = {
        "player_rank": 10,
        "opponent_rank": 15,
        "player_recent_win_rate": 0.7
    }
    
    times = []
    success_count = 0
    
    for i in range(5):
        try:
            start_time = time.time()
            response = requests.post(
                "http://localhost:5001/api/predict",
                json=test_data,
                headers={'Content-Type': 'application/json'},
                timeout=10
            )
            end_time = time.time()
            
            if response.status_code == 200:
                times.append(end_time - start_time)
                success_count += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è Request {i+1} failed: {e}")
    
    if times:
        avg_time = sum(times) / len(times)
        print(f"‚úÖ Performance results:")
        print(f"   Successful requests: {success_count}/5")
        print(f"   Average response time: {avg_time:.3f}s")
        print(f"   Min/Max: {min(times):.3f}s / {max(times):.3f}s")
        return True
    else:
        print("‚ùå All performance test requests failed")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TENNIS DASHBOARD")
    print("="*70)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("="*70)
    
    # –°—á–µ—Ç—á–∏–∫ —Ç–µ—Å—Ç–æ–≤
    tests_passed = 0
    total_tests = 5
    
    # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if check_system_files():
        tests_passed += 1
    
    # 2. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML
    if test_dashboard_html():
        tests_passed += 1
    
    # 3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ backend endpoints
    backend_results = test_backend_endpoints()
    backend_ok = all("‚úÖ" in str(result.get("status", "")) for result in backend_results.values())
    if backend_ok:
        tests_passed += 1
    
    # 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
    if test_prediction_api():
        tests_passed += 1
    
    # 5. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    if performance_test():
        tests_passed += 1
    
    # –ò—Ç–æ–≥–∏
    print(f"\\n" + "="*70)
    print("üìä –ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
    print("="*70)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/total_tests)*100:.0f}%")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("üöÄ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    elif tests_passed >= 3:
        print("‚ö° –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ö–æ—Ä–æ—à–æ!")
        print("üí° –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è")
    else:
        print("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞")
    
    print(f"\\nüåê –î–û–°–¢–£–ü –ö –°–ò–°–¢–ï–ú–ï:")
    print("‚Ä¢ Backend: http://localhost:5001")
    print("‚Ä¢ Dashboard: web_dashboard.html")
    print("‚Ä¢ Health check: http://localhost:5001/api/health")
    
    return tests_passed >= 3

if __name__ == "__main__":
    success = main()
'''
    
    try:
        with open("test_dashboard_integration.py", "w", encoding="utf-8") as f:
            f.write(test_content)
        
        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        try:
            os.chmod("test_dashboard_integration.py", 0o755)
        except:
            pass
        
        print("‚úÖ –°–æ–∑–¥–∞–Ω test_dashboard_integration.py")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üì¶ –°–û–ó–î–ê–ù–ò–ï –ù–ï–î–û–°–¢–ê–Æ–©–ò–• –§–ê–ô–õ–û–í")
    print("=" * 50)
    
    files_created = 0
    
    # 1. –°–æ–∑–¥–∞–µ–º launcher
    print("1Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ launcher...")
    if create_launcher():
        files_created += 1
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç—ã
    print("\\n2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤...")
    if create_test_integration():
        files_created += 1
    
    print(f"\\n‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {files_created}/2")
    
    if files_created == 2:
        print("\\nüéØ –ì–û–¢–û–í–û! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã:")
        print("üöÄ python launch_dashboard.py      # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã")
        print("üß™ python test_dashboard_integration.py  # –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("‚ö° python quick_status.py          # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞")
        
        print("\\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python quick_status.py")
        print("2. –ï—Å–ª–∏ –≤—Å–µ –û–ö: python launch_dashboard.py")
        print("3. –î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: python test_dashboard_integration.py")
    else:
        print("\\n‚ö†Ô∏è –ù–µ –≤—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.")

if __name__ == "__main__":
    main()