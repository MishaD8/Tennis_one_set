import pandas as pd
import requests
import os
from datetime import datetime, timedelta
import time
import sqlite3
from typing import Dict, List
import zipfile
import io

class TennisDataCollector:
    def __init__(self, data_dir="tennis_data"):
        self.data_dir = data_dir
        self.base_urls = {
            'atp_matches': 'https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/',
            'wta_matches': 'https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/',
            'atp_rankings': 'https://raw.githubusercontent.com/JeffSackmann/tennis_atp/master/',
            'wta_rankings': 'https://raw.githubusercontent.com/JeffSackmann/tennis_wta/master/'
        }
        self.ensure_data_directory()
        
    def ensure_data_directory(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö"""
        if not os.path.exists(self.data_dir):
            os.makedirs(self.data_dir)
            print(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {self.data_dir}")
    
    def download_jeff_sackmann_data(self) -> Dict[str, pd.DataFrame]:
        """
        –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tennis Abstract (Jeff Sackmann)
        """
        print("üéæ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Tennis Abstract...")
        datasets = {}
        
        # ATP –¥–∞–Ω–Ω—ã–µ
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º ATP –¥–∞–Ω–Ω—ã–µ...")
        atp_files = [
            'atp_matches_2024.csv',
            'atp_matches_2023.csv', 
            'atp_matches_2022.csv',
            'atp_matches_2021.csv',
            'atp_matches_2020.csv',
            'atp_players.csv',
            'atp_rankings_current.csv'
        ]
        
        for file in atp_files:
            try:
                url = self.base_urls['atp_matches'] + file
                df = pd.read_csv(url)
                datasets[f'atp_{file.replace(".csv", "").replace("atp_", "")}'] = df
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {file}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                time.sleep(0.5)  # –í–µ–∂–ª–∏–≤–æ—Å—Ç—å –∫ —Å–µ—Ä–≤–µ—Ä—É
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
        
        # WTA –¥–∞–Ω–Ω—ã–µ
        print("üì• –ó–∞–≥—Ä—É–∂–∞–µ–º WTA –¥–∞–Ω–Ω—ã–µ...")
        wta_files = [
            'wta_matches_2024.csv',
            'wta_matches_2023.csv',
            'wta_matches_2022.csv', 
            'wta_matches_2021.csv',
            'wta_matches_2020.csv',
            'wta_players.csv',
            'wta_rankings_current.csv'
        ]
        
        for file in wta_files:
            try:
                url = self.base_urls['wta_matches'] + file
                df = pd.read_csv(url)
                datasets[f'wta_{file.replace(".csv", "").replace("wta_", "")}'] = df
                print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω {file}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
                time.sleep(0.5)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file}: {e}")
        
        return datasets
    
    def process_match_data(self, raw_data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
        """
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π...")
        
        all_matches = []
        
        for key, df in raw_data.items():
            if 'matches_' in key:
                # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞-–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                df['tour'] = 'ATP' if key.startswith('atp') else 'WTA'
                df['year'] = key.split('_')[-1]
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞—Ç—á–µ–π
                df = self.extract_set_statistics(df)
                
                all_matches.append(df)
        
        combined_df = pd.concat(all_matches, ignore_index=True)
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(combined_df)} –º–∞—Ç—á–µ–π")
        
        return combined_df
    
    def extract_set_statistics(self, df: pd.DataFrame) -> pd.DataFrame:
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å–µ—Ç–∞–º –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        """
        # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è: –≤–∑—è–ª –ª–∏ –∏–≥—Ä–æ–∫ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç
        def player_won_at_least_one_set(score):
            if pd.isna(score):
                return None
            
            try:
                # –ü–∞—Ä—Å–∏–º —Å—á–µ—Ç —Ç–∏–ø–∞ "6-4 6-3" –∏–ª–∏ "6-4 3-6 6-2"
                sets = score.split(' ')
                player_sets = 0
                
                for set_score in sets:
                    if '-' in set_score:
                        games = set_score.split('-')
                        if len(games) == 2:
                            player_games = int(games[0])
                            opponent_games = int(games[1])
                            
                            # –ò–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª —Å–µ—Ç
                            if player_games > opponent_games:
                                player_sets += 1
                
                return player_sets >= 1
            except:
                return None
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        if 'score' in df.columns:
            df['winner_won_at_least_one_set'] = df['score'].apply(player_won_at_least_one_set)
            # –î–ª—è –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ - –∏–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
            df['loser_won_at_least_one_set'] = df.apply(
                lambda row: self.loser_sets_from_score(row['score']), axis=1
            )
        
        return df
    
    def loser_sets_from_score(self, score):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤–∑—è–ª –ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
        if pd.isna(score):
            return None
        
        try:
            sets = score.split(' ')
            loser_sets = 0
            
            for set_score in sets:
                if '-' in set_score:
                    games = set_score.split('-')
                    if len(games) == 2:
                        winner_games = int(games[0])
                        loser_games = int(games[1])
                        
                        # –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–π –≤—ã–∏–≥—Ä–∞–ª —Å–µ—Ç (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º —Å—á–µ—Ç–µ,
                        # –Ω–æ –º—ã –∏—â–µ–º —Å–µ—Ç—ã –≥–¥–µ —É –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ –±–æ–ª—å—à–µ –≥–µ–π–º–æ–≤ —á–µ–º —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –≤ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–µ—Ç–∞—Ö)
                        if loser_games >= 6 or (loser_games >= winner_games - 2 and winner_games >= 6):
                            loser_sets += 1
            
            return loser_sets >= 1
        except:
            return None
    
    def create_features_dataset(self, matches_df: pd.DataFrame, 
                               players_data: Dict[str, pd.DataFrame]) -> pd.DataFrame:
        """
        –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞—Ç–∞—Å–µ—Ç–∞ —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏ –¥–ª—è ML
        """
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è...")
        
        features_list = []
        
        for idx, match in matches_df.iterrows():
            if idx % 1000 == 0:
                print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –º–∞—Ç—á–µ–π: {idx}")
            
            # –°–æ–∑–¥–∞–µ–º –¥–≤–µ –∑–∞–ø–∏—Å–∏: –¥–ª—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ
            winner_features = self.extract_player_features(
                match, 'winner', players_data, matches_df
            )
            loser_features = self.extract_player_features(
                match, 'loser', players_data, matches_df  
            )
            
            if winner_features and loser_features:
                features_list.extend([winner_features, loser_features])
        
        features_df = pd.DataFrame(features_list)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(features_df)} –∑–∞–ø–∏—Å–µ–π —Å –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏")
        
        return features_df
    
    def extract_player_features(self, match, player_type, players_data, all_matches):
        """
        –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –≤ –º–∞—Ç—á–µ
        """
        try:
            player_id = match[f'{player_type}_id']
            opponent_id = match['winner_id'] if player_type == 'loser' else match['loser_id']
            
            # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            features = {
                'match_id': f"{match['tourney_id']}_{match['match_num']}",
                'player_id': player_id,
                'opponent_id': opponent_id,
                'player_name': match[f'{player_type}_name'],
                'opponent_name': match['winner_name'] if player_type == 'loser' else match['loser_name'],
                'tournament': match['tourney_name'],
                'surface': match['surface'],
                'match_date': match['tourney_date'],
                'round': match['round'],
                'tour': match['tour'],
                
                # –ë–∞–∑–æ–≤—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞
                'player_age': match[f'{player_type}_age'],
                'player_rank': match[f'{player_type}_rank'],
                'opponent_rank': match['winner_rank'] if player_type == 'loser' else match['loser_rank'],
                
                # –¶–µ–ª–µ–≤–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è
                'won_at_least_one_set': match[f'{player_type}_won_at_least_one_set']
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Ç—á–∞ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
            match_stats = ['ace', 'df', '1stIn', '1stWon', '2ndWon', 'SvGms', 'bpSaved', 'bpFaced']
            for stat in match_stats:
                if f'{player_type}_{stat}' in match.index:
                    features[f'player_{stat}'] = match[f'{player_type}_{stat}']
                if f'{"loser" if player_type == "winner" else "winner"}_{stat}' in match.index:
                    features[f'opponent_{stat}'] = match[f'{"loser" if player_type == "winner" else "winner"}_{stat}']
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if features.get('player_1stIn') and features.get('player_SvGms'):
                features['first_serve_pct'] = features['player_1stIn'] / features['player_SvGms']
            
            return features
            
        except Exception as e:
            return None
    
    def save_to_database(self, datasets: Dict[str, pd.DataFrame]):
        """
        –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ SQLite –±–∞–∑—É
        """
        db_path = os.path.join(self.data_dir, 'tennis_data.db')
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {db_path}")
        
        with sqlite3.connect(db_path) as conn:
            for table_name, df in datasets.items():
                df.to_sql(table_name, conn, if_exists='replace', index=False)
                print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞ {table_name}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
    
    def get_recent_data_summary(self, datasets: Dict[str, pd.DataFrame]):
        """
        –°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
        """
        print("\nüìä –°–í–û–î–ö–ê –ü–û –î–ê–ù–ù–´–ú:")
        print("=" * 50)
        
        for name, df in datasets.items():
            print(f"{name}: {len(df)} –∑–∞–ø–∏—Å–µ–π")
            if 'tourney_date' in df.columns:
                min_date = df['tourney_date'].min()
                max_date = df['tourney_date'].max()
                print(f"  –ü–µ—Ä–∏–æ–¥: {min_date} - {max_date}")
            print()

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    print("üéæ –°–ë–û–† –ò–°–¢–û–†–ò–ß–ï–°–ö–ò–• –î–ê–ù–ù–´–• –î–õ–Ø –¢–ï–ù–ù–ò–°–ê")
    print("=" * 50)
    
    collector = TennisDataCollector()
    
    # –®–∞–≥ 1: –°–∫–∞—á–∏–≤–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    raw_datasets = collector.download_jeff_sackmann_data()
    
    if not raw_datasets:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    # –®–∞–≥ 2: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π
    matches_df = collector.process_match_data(raw_datasets)
    
    # –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –¥–ª—è ML
    players_data = {k: v for k, v in raw_datasets.items() if 'players' in k}
    features_df = collector.create_features_dataset(matches_df, players_data)
    
    # –®–∞–≥ 4: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –≤ –±–∞–∑—É
    final_datasets = {
        'matches': matches_df,
        'features': features_df,
        **raw_datasets
    }
    
    collector.save_to_database(final_datasets)
    collector.get_recent_data_summary(final_datasets)
    
    print("\n‚úÖ –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print(f"üìÅ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {collector.data_dir}")
    print("\nüí° –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö")
    print("2. –°–æ–∑–¥–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏")
    print("3. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å –Ω–∞ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")

if __name__ == "__main__":
    main()