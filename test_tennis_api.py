#!/usr/bin/env python3
"""
üß™ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç Tennis API
–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
"""

import requests
import json
import time

def test_api():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞—à Tennis API"""
    
    BASE_URL = "http://65.109.135.2:5001"
    
    print("üéæ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï TENNIS API")
    print("=" * 50)
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {BASE_URL}")
    print("=" * 50)
    
    tests_passed = 0
    total_tests = 0
    
    # –¢–µ—Å—Ç 1: Health Check
    print("\n1Ô∏è‚É£ –¢–µ—Å—Ç Health Check")
    try:
        response = requests.get(f"{BASE_URL}/api/health", timeout=10)
        if response.status_code == 200:
            data = response.json()
            print(f"‚úÖ Health Check: {data.get('status', 'Unknown')}")
            print(f"   Prediction Service: {'‚úÖ' if data.get('prediction_service') else '‚ùå'}")
            print(f"   Models Loaded: {'‚úÖ' if data.get('models_loaded') else '‚ùå'}")
            tests_passed += 1
        else:
            print(f"‚ùå Health Check failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Health Check error: {e}")
    total_tests += 1
    
    # –¢–µ—Å—Ç 2: Stats
    print("\n2Ô∏è‚É£ –¢–µ—Å—Ç Stats API")
    try:
        response = requests.get(f"{BASE_URL}/api/stats", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                stats = data.get('stats', {})
                print(f"‚úÖ Stats API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   Total matches: {stats.get('total_matches', 'N/A')}")
                print(f"   Accuracy: {stats.get('accuracy_rate', 'N/A')}")
                tests_passed += 1
            else:
                print(f"‚ùå Stats API: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Stats API failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Stats API error: {e}")
    total_tests += 1
    
    # –¢–µ—Å—Ç 3: Matches
    print("\n3Ô∏è‚É£ –¢–µ—Å—Ç Matches API")
    try:
        response = requests.get(f"{BASE_URL}/api/matches", timeout=10)
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                matches = data.get('matches', [])
                print(f"‚úÖ Matches API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –ù–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π: {len(matches)}")
                if matches:
                    match = matches[0]
                    print(f"   –ü—Ä–∏–º–µ—Ä: {match.get('player1', 'N/A')} vs {match.get('player2', 'N/A')}")
                tests_passed += 1
            else:
                print(f"‚ùå Matches API: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Matches API failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Matches API error: {e}")
    total_tests += 1
    
    # –¢–µ—Å—Ç 4: Prediction
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç Prediction API")
    try:
        test_data = {
            "player_rank": 1,
            "opponent_rank": 45,
            "player_recent_win_rate": 0.85,
            "player_surface_advantage": 0.12,
            "h2h_win_rate": 0.75
        }
        
        response = requests.post(
            f"{BASE_URL}/api/predict",
            json=test_data,
            headers={'Content-Type': 'application/json'},
            timeout=15
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get('success'):
                pred = data.get('prediction', {})
                print(f"‚úÖ Prediction API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {pred.get('probability', 'N/A')}")
                print(f"   –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {pred.get('confidence', 'N/A')}")
                print(f"   –ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('source', 'N/A')}")
                tests_passed += 1
            else:
                print(f"‚ùå Prediction API: {data.get('error', 'Unknown error')}")
        else:
            print(f"‚ùå Prediction API failed: HTTP {response.status_code}")
            print(f"   Response: {response.text[:200]}")
    except Exception as e:
        print(f"‚ùå Prediction API error: {e}")
    total_tests += 1
    
    # –¢–µ—Å—Ç 5: Dashboard
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç Dashboard")
    try:
        response = requests.get(f"{BASE_URL}/", timeout=10)
        if response.status_code == 200:
            content = response.text
            if "Tennis Analytics Dashboard" in content:
                print(f"‚úÖ Dashboard –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è")
                print(f"   –†–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content):,} —Å–∏–º–≤–æ–ª–æ–≤")
                tests_passed += 1
            else:
                print(f"‚ùå Dashboard: –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç")
        else:
            print(f"‚ùå Dashboard failed: HTTP {response.status_code}")
    except Exception as e:
        print(f"‚ùå Dashboard error: {e}")
    total_tests += 1
    
    # –ò—Ç–æ–≥–∏
    print("\n" + "=" * 50)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {tests_passed}/{total_tests}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(tests_passed/total_tests)*100:.0f}%")
    
    if tests_passed == total_tests:
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!")
        print("‚úÖ –ú–æ–∂–Ω–æ —Å–º–µ–ª–æ —É–¥–∞–ª—è—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã")
    elif tests_passed >= 3:
        print("‚ö° –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç!")
        print("üí° –ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã")
    else:
        print("‚ö†Ô∏è –ï—Å—Ç—å —Å–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã!")
        print("üîß –õ—É—á—à–µ –Ω–µ —É–¥–∞–ª—è—Ç—å —Ñ–∞–π–ª—ã –¥–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
    return tests_passed >= 3

if __name__ == "__main__":
    success = test_api()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {'SUCCESS' if success else 'FAILED'}")