#!/usr/bin/env python3
"""
üéæ –†–ê–ë–û–ß–ò–ô –ü–†–û–ì–ù–û–ó–ò–†–û–í–©–ò–ö —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—á–Ω–æ —Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç –æ–±—É—á–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
"""

import pandas as pd
import numpy as np
import joblib
import os
from tensorflow import keras

def load_models_and_get_features():
    """–ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"""
    
    print("üìÇ –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏...")
    
    models = {}
    model_dir = "tennis_models"
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∫–∞–ª–µ—Ä
        scaler = joblib.load(os.path.join(model_dir, 'scaler.pkl'))
        print("‚úÖ –°–∫–∞–ª–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–¥–Ω—É sklearn –º–æ–¥–µ–ª—å —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
        rf_model = joblib.load(os.path.join(model_dir, 'random_forest.pkl'))
        expected_features = rf_model.feature_names_in_
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(expected_features)} –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏
        model_files = {
            'neural_network': 'neural_network.h5',
            'xgboost': 'xgboost.pkl', 
            'random_forest': 'random_forest.pkl',
            'gradient_boosting': 'gradient_boosting.pkl',
            'logistic_regression': 'logistic_regression.pkl'
        }
        
        for model_name, filename in model_files.items():
            filepath = os.path.join(model_dir, filename)
            if os.path.exists(filepath):
                if model_name == 'neural_network':
                    models[model_name] = keras.models.load_model(filepath)
                else:
                    models[model_name] = joblib.load(filepath)
                print(f"‚úÖ {model_name} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        return models, scaler, expected_features
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return {}, None, []

def create_base_match_data():
    """–°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–µ–π (23 –∏—Å—Ö–æ–¥–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞)"""
    
    matches = [
        {
            'name': '–ù–æ–≤–∞–∫ –î–∂–æ–∫–æ–≤–∏—á vs –ò–≥—Ä–æ–∫ #45',
            'tournament': 'ATP Masters (Hard)',
            'data': {
                'player_rank': 1.0,
                'player_age': 30.0,
                'opponent_rank': 45.0,
                'opponent_age': 26.0,
                'player_recent_matches_count': 15.0,
                'player_recent_win_rate': 0.85,
                'player_recent_sets_win_rate': 0.78,
                'player_form_trend': 0.08,
                'player_days_since_last_match': 7.0,
                'player_surface_matches_count': 45.0,
                'player_surface_win_rate': 0.82,
                'player_surface_advantage': 0.12,
                'player_surface_sets_rate': 0.75,
                'player_surface_experience': 0.9,
                'h2h_matches': 8.0,
                'h2h_win_rate': 0.75,
                'h2h_recent_form': 0.8,
                'h2h_sets_advantage': 1.2,
                'days_since_last_h2h': 365.0,
                'tournament_importance': 3.0,
                'round_pressure': 0.6,
                'total_pressure': 3.2,
                'is_high_pressure_tournament': 1.0
            }
        },
        {
            'name': '–ú–µ–¥–≤–µ–¥–µ–≤ vs –ó–≤–µ—Ä–µ–≤',
            'tournament': 'US Open (Hard)',
            'data': {
                'player_rank': 5.0,
                'player_age': 25.0,
                'opponent_rank': 6.0,
                'opponent_age': 27.0,
                'player_recent_matches_count': 12.0,
                'player_recent_win_rate': 0.72,
                'player_recent_sets_win_rate': 0.68,
                'player_form_trend': 0.02,
                'player_days_since_last_match': 14.0,
                'player_surface_matches_count': 35.0,
                'player_surface_win_rate': 0.68,
                'player_surface_advantage': 0.05,
                'player_surface_sets_rate': 0.65,
                'player_surface_experience': 0.7,
                'h2h_matches': 12.0,
                'h2h_win_rate': 0.58,
                'h2h_recent_form': 0.6,
                'h2h_sets_advantage': 0.3,
                'days_since_last_h2h': 90.0,
                'tournament_importance': 4.0,
                'round_pressure': 0.8,
                'total_pressure': 3.8,
                'is_high_pressure_tournament': 1.0
            }
        },
        {
            'name': '–í–æ—Å—Ö–æ–¥—è—â–∞—è –∑–≤–µ–∑–¥–∞ vs –í–µ—Ç–µ—Ä–∞–Ω',
            'tournament': 'Roland Garros (Clay)',
            'data': {
                'player_rank': 35.0,
                'player_age': 23.0,
                'opponent_rank': 8.0,
                'opponent_age': 32.0,
                'player_recent_matches_count': 18.0,
                'player_recent_win_rate': 0.88,
                'player_recent_sets_win_rate': 0.82,
                'player_form_trend': 0.15,
                'player_days_since_last_match': 5.0,
                'player_surface_matches_count': 28.0,
                'player_surface_win_rate': 0.85,
                'player_surface_advantage': 0.18,
                'player_surface_sets_rate': 0.8,
                'player_surface_experience': 0.6,
                'h2h_matches': 3.0,
                'h2h_win_rate': 0.33,
                'h2h_recent_form': 0.4,
                'h2h_sets_advantage': -0.7,
                'days_since_last_h2h': 730.0,
                'tournament_importance': 4.0,
                'round_pressure': 0.4,
                'total_pressure': 2.8,
                'is_high_pressure_tournament': 1.0
            }
        }
    ]
    
    return matches

def create_engineered_features(base_data):
    """–°–æ–∑–¥–∞–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ —Ç–æ—á–Ω–æ –∫–∞–∫ –≤ prepare_features()"""
    
    enhanced_data = base_data.copy()
    
    # 1. –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–ª–∞ –∏–≥—Ä–æ–∫–æ–≤
    enhanced_data['rank_difference'] = enhanced_data['opponent_rank'] - enhanced_data['player_rank']
    enhanced_data['rank_ratio'] = enhanced_data['player_rank'] / (enhanced_data['opponent_rank'] + 1)
    
    # 2. –ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞
    enhanced_data['combined_form'] = (enhanced_data['player_recent_win_rate'] * 0.7 + 
                                    enhanced_data['h2h_win_rate'] * 0.3)
    
    # 3. –ê–¥–∞–ø—Ç–∞—Ü–∏—è –∫ –¥–∞–≤–ª–µ–Ω–∏—é –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏
    enhanced_data['surface_pressure_interaction'] = (enhanced_data['player_surface_advantage'] * 
                                                   enhanced_data['total_pressure'])
    
    return enhanced_data

def predict_match(models, scaler, expected_features, match_data):
    """–î–µ–ª–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –¥–ª—è –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
    
    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    base_df = pd.DataFrame([match_data])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    enhanced_data = create_engineered_features(match_data)
    enhanced_df = pd.DataFrame([enhanced_data])
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    features_df = enhanced_df[expected_features]
    
    print(f"üìä –§–æ—Ä–º–∞ –¥–∞–Ω–Ω—ã—Ö: {features_df.shape}")
    print(f"üîç –ü–µ—Ä–≤—ã–µ 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(features_df.columns[:5])}")
    print(f"üîç –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤: {list(features_df.columns[-5:])}")
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—Å–∫–∏
    features_df = features_df.fillna(features_df.median())
    
    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –ª–æ–≥–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥—Ä–µ—Å—Å–∏–∏
    X_scaled = scaler.transform(features_df)
    
    # –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—Ç –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
    predictions = {}
    
    ensemble_weights = {
        'neural_network': 0.205,
        'xgboost': 0.203,
        'random_forest': 0.194,
        'gradient_boosting': 0.192,
        'logistic_regression': 0.207
    }
    
    for model_name, model in models.items():
        try:
            if model_name == 'neural_network':
                pred = float(model.predict(X_scaled, verbose=0)[0])
            elif model_name == 'logistic_regression':
                pred = float(model.predict_proba(X_scaled)[0, 1])
            else:
                pred = float(model.predict_proba(features_df)[0, 1])
            
            predictions[model_name] = pred
            print(f"‚úÖ {model_name}: {pred:.1%}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ {model_name}: {e}")
            predictions[model_name] = 0.5
    
    # –ê–Ω—Å–∞–º–±–ª–µ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    ensemble_pred = sum(pred * ensemble_weights.get(name, 0.2) 
                       for name, pred in predictions.items())
    ensemble_pred /= sum(ensemble_weights.get(name, 0.2) 
                        for name in predictions.keys())
    
    return predictions, ensemble_pred

def analyze_factors(match_data, prediction):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã"""
    
    factors = []
    
    if match_data['player_recent_win_rate'] > 0.8:
        factors.append("üî• –û—Ç–ª–∏—á–Ω–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞")
    
    rank_diff = match_data['opponent_rank'] - match_data['player_rank']
    if rank_diff > 20:
        factors.append(f"‚≠ê –ó–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ (+{rank_diff})")
    elif rank_diff < -10:
        factors.append(f"üìà –ò–≥—Ä–∞–µ—Ç –ø—Ä–æ—Ç–∏–≤ –±–æ–ª–µ–µ —Å–∏–ª—å–Ω–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ({rank_diff})")
    
    if match_data['player_surface_advantage'] > 0.1:
        factors.append("üèüÔ∏è –ë–æ–ª—å—à–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏")
    elif match_data['player_surface_advantage'] < -0.05:
        factors.append("‚ö†Ô∏è –°–ª–∞–±–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —ç—Ç–æ–º –ø–æ–∫—Ä—ã—Ç–∏–∏")
    
    if match_data['h2h_win_rate'] > 0.7:
        factors.append("üìä –î–æ–º–∏–Ω–∏—Ä—É–µ—Ç –≤ –æ—á–Ω—ã—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö")
    elif match_data['h2h_win_rate'] < 0.4:
        factors.append("üìä –ß–∞—Å—Ç–æ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç –≤ H2H")
    
    if match_data['player_form_trend'] > 0.1:
        factors.append("üìà –í–æ—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Ñ–æ—Ä–º—ã")
    elif match_data['player_form_trend'] < -0.1:
        factors.append("üìâ –ù–∏—Å—Ö–æ–¥—è—â–∏–π —Ç—Ä–µ–Ω–¥ —Ñ–æ—Ä–º—ã")
    
    return factors

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    print("üéæ –†–ê–ë–û–ß–ò–ô –ü–†–û–ì–ù–û–ó–ò–†–û–í–©–ò–ö –¢–ï–ù–ù–ò–°–ù–´–• –ú–ê–¢–ß–ï–ô")
    print("=" * 70)
    print("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –¢–û–ß–ù–´–ï –ø—Ä–∏–∑–Ω–∞–∫–∏ –≤–∫–ª—é—á–∞—è –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã–µ")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏ –∏ —É–∑–Ω–∞–µ–º –æ–∂–∏–¥–∞–µ–º—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏
    models, scaler, expected_features = load_models_and_get_features()
    
    if not models or scaler is None or len(expected_features) == 0:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª–∏ –∏–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏")
        return
    
    print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(models)} –º–æ–¥–µ–ª–µ–π")
    print(f"üîß –û–∂–∏–¥–∞–µ—Ç—Å—è {len(expected_features)} –ø—Ä–∏–∑–Ω–∞–∫–æ–≤")
    print(f"üìã –°–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞–µ–º—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤:")
    for i, feature in enumerate(expected_features, 1):
        print(f"  {i:2d}. {feature}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –º–∞—Ç—á–∏
    matches = create_base_match_data()
    
    print(f"\nüéæ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(matches)} –º–∞—Ç—á–µ–π:")
    
    # –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –º–∞—Ç—á
    for i, match in enumerate(matches, 1):
        
        print(f"\n" + "="*60)
        print(f"üéæ –ú–ê–¢–ß {i}: {match['name']}")
        print(f"üèüÔ∏è {match['tournament']}")
        print("="*60)
        
        try:
            predictions, ensemble_pred = predict_match(
                models, scaler, expected_features, match['data']
            )
            
            print(f"\nüéØ –ò–¢–û–ì–û–í–´–ô –ü–†–û–ì–ù–û–ó:")
            print(f"–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç: {ensemble_pred:.1%}")
            
            confidence = ("–í—ã—Å–æ–∫–∞—è üî•" if ensemble_pred >= 0.7 else 
                         "–°—Ä–µ–¥–Ω—è—è ‚ö°" if ensemble_pred >= 0.55 else 
                         "–ù–∏–∑–∫–∞—è üí≠")
            print(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence}")
            
            # –ê–Ω–∞–ª–∏–∑ —Ñ–∞–∫—Ç–æ—Ä–æ–≤
            factors = analyze_factors(match['data'], ensemble_pred)
            
            if factors:
                print(f"\nüîç –ö–õ–Æ–ß–ï–í–´–ï –§–ê–ö–¢–û–†–´:")
                for factor in factors:
                    print(f"  ‚Ä¢ {factor}")
            
            print(f"\nüìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
            print(f"  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞: #{int(match['data']['player_rank'])}")
            print(f"  ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: #{int(match['data']['opponent_rank'])}")
            print(f"  ‚Ä¢ –¢–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞: {match['data']['player_recent_win_rate']:.1%}")
            print(f"  ‚Ä¢ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –Ω–∞ –ø–æ–∫—Ä—ã—Ç–∏–∏: {match['data']['player_surface_advantage']:+.1%}")
            print(f"  ‚Ä¢ H2H —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {match['data']['h2h_win_rate']:.1%}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞: {e}")
            import traceback
            traceback.print_exc()
    
    print(f"\n" + "="*70)
    print("üéâ –í–°–ï –ü–†–û–ì–ù–û–ó–´ –í–´–ü–û–õ–ù–ï–ù–´ –£–°–ü–ï–®–ù–û!")
    print("=" * 70)
    print("üí° –¢–µ–ø–µ—Ä—å –≤—ã –∑–Ω–∞–µ—Ç–µ –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–¥–µ–ª–∏:")
    print("  1. –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ 23 –±–∞–∑–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞")
    print("  2. –î–æ–±–∞–≤—å—Ç–µ 4 –∏–Ω–∂–µ–Ω–µ—Ä–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞")
    print("  3. –£–ø–æ—Ä—è–¥–æ—á–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –∫–∞–∫ –æ–∂–∏–¥–∞—é—Ç –º–æ–¥–µ–ª–∏")
    print("  4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤!")
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –ø—Ä–æ–¥–∞–∫—à–Ω—É!")

if __name__ == "__main__":
    main()