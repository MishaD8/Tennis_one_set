#!/usr/bin/env python3
"""
üîÑ RESTART TENNIS SYSTEM
–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∞—Ä—ã–π backend –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é
"""

import subprocess
import sys
import time
import psutil
import signal
import os

def kill_processes_on_port(port):
    """–£–±–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ—Ä—Ç—É"""
    print(f"üîç –ò—â–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    
    killed = 0
    for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
            connections = proc.connections()
            for conn in connections:
                if conn.laddr.port == port:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å: PID {proc.info['pid']} - {proc.info['name']}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å gracefully
                    try:
                        proc.terminate()
                        proc.wait(timeout=5)
                        print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']} –∑–∞–≤–µ—Ä—à–µ–Ω")
                        killed += 1
                    except psutil.TimeoutExpired:
                        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                        proc.kill()
                        print(f"üíÄ –ü—Ä–æ—Ü–µ—Å—Å PID {proc.info['pid']} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
                        killed += 1
                    break
                        
        except (psutil.NoSuchProcess, psutil.AccessDenied, psutil.ZombieProcess):
            continue
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
    
    if killed > 0:
        print(f"‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ {killed} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
        time.sleep(2)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞
    else:
        print(f"‚ÑπÔ∏è –ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É {port} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    return killed

def check_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    print("üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã...")
    
    required = [
        'web_backend_fixed_ml.py',
        'test_ml_system.py', 
        'real_tennis_predictor_integration.py'
    ]
    
    missing = []
    for file in required:
        if os.path.exists(file):
            print(f"‚úÖ {file}")
        else:
            print(f"‚ùå {file}")
            missing.append(file)
    
    if missing:
        print(f"\n‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {missing}")
        print("üí° –°–æ–∑–¥–∞–π—Ç–µ –∏—Ö –∏–∑ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º")
        return False
    
    return True

def start_fixed_backend():
    """–ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π backend"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π backend...")
    
    try:
        process = subprocess.Popen(
            [sys.executable, 'web_backend_fixed_ml.py'],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE
        )
        
        print(f"‚úÖ Backend –∑–∞–ø—É—â–µ–Ω (PID: {process.pid})")
        
        # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Backend —Ä–∞–±–æ—Ç–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ")
            return process
        else:
            print("‚ùå Backend –∑–∞–≤–µ—Ä—à–∏–ª—Å—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ")
            stdout, stderr = process.communicate()
            if stderr:
                print(f"–û—à–∏–±–∫–∏: {stderr.decode()}")
            return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        return None

def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
    
    if not os.path.exists('test_ml_system.py'):
        print("‚ö†Ô∏è test_ml_system.py –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        return
    
    try:
        result = subprocess.run(
            [sys.executable, 'test_ml_system.py'],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏!")
        else:
            print("‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –≤ —Ç–µ—Å—Ç–∞—Ö:")
            print(result.stdout)
            if result.stderr:
                print("–û—à–∏–±–∫–∏:", result.stderr)
    
    except subprocess.TimeoutExpired:
        print("‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ —Ç–∞–π–º–∞—É—Ç—É")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞"""
    print("üîÑ RESTART TENNIS SYSTEM")
    print("=" * 40)
    print("üéØ –¶–µ–ª—å: –ó–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Å—Ç—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –†–ï–ê–õ–¨–ù–´–ô ML")
    print("=" * 40)
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
    if not check_files():
        print("\n‚ùå –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞!")
        return False
    
    # 2. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    print(f"\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 5001...")
    killed = kill_processes_on_port(5001)
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π backend
    print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π backend...")
    process = start_fixed_backend()
    
    if not process:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π backend")
        return False
    
    # 4. –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    print("\n‚è≥ –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã...")
    time.sleep(5)
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º
    test_system()
    
    # 6. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print("\n" + "=" * 50)
    print("üéâ –°–ò–°–¢–ï–ú–ê –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–ê –° –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø–ú–ò!")
    print("=" * 50)
    print("üåê Dashboard: http://localhost:5001")
    print("ü§ñ –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –†–ï–ê–õ–¨–ù–´–ô ML –≤–º–µ—Å—Ç–æ 1/odds")
    print("üéØ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑—ã - –æ–Ω–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —É–º–Ω–µ–µ!")
    print("=" * 50)
    
    # 7. –î–µ—Ä–∂–∏–º —Å–∏—Å—Ç–µ–º—É —Ä–∞–±–æ—Ç–∞—é—â–µ–π
    try:
        print("\n‚å®Ô∏è –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã")
        while process.poll() is None:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...")
        process.terminate()
        process.wait()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
    
    return True

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)