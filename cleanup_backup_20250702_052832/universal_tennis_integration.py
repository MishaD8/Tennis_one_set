#!/usr/bin/env python3
"""
üåç UNIVERSAL Tennis Integration System
–°–æ–∑–¥–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ö–†–£–ì–õ–´–ô –ì–û–î –±–µ–∑ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–¥–∞!
"""

import os
import sys
import subprocess
from datetime import datetime
from pathlib import Path

def create_universal_backend_integration():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é –¥–ª—è backend"""
    
    integration_code = '''#!/usr/bin/env python3
"""
üåç Universal Backend Integration
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç—Å—è —Å –ª—é–±—ã–º backend —Ñ–∞–π–ª–æ–º
"""

import os
import re
from datetime import datetime

def integrate_universal_tennis_system():
    """–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –≤ backend"""
    
    # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö backend —Ñ–∞–π–ª–æ–≤
    backend_files = [
        'web_backend_with_dashboard.py',
        'web_backend.py', 
        'web_backend_minimal.py'
    ]
    
    target_file = None
    for file in backend_files:
        if os.path.exists(file):
            target_file = file
            break
    
    if not target_file:
        print("‚ùå Backend —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    print(f"üéØ –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ–º —Å {target_file}")
    
    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
    with open(target_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
    backup_name = f"{target_file}_backup_universal_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    with open(backup_name, 'w', encoding='utf-8') as f:
        f.write(content)
    print(f"üíæ Backup: {backup_name}")
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
    if 'UNIVERSAL_DATA_AVAILABLE' not in content:
        universal_import = \'''
# –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê - —Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!
try:
    from universal_tennis_data_collector import UniversalTennisDataCollector, UniversalOddsCollector
    UNIVERSAL_DATA_AVAILABLE = True
    print("üåç Universal tennis system loaded - works year-round!")
except ImportError as e:
    print(f"‚ö†Ô∏è Universal system not available: {e}")
    UNIVERSAL_DATA_AVAILABLE = False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–±–æ—Ä—â–∏–∫–∏
if UNIVERSAL_DATA_AVAILABLE:
    universal_collector = UniversalTennisDataCollector()
    universal_odds_collector = UniversalOddsCollector()
else:
    universal_collector = None
    universal_odds_collector = None
\'''
        
        # –ò—â–µ–º –º–µ—Å—Ç–æ –ø–æ—Å–ª–µ –∏–º–ø–æ—Ä—Ç–æ–≤
        lines = content.split('\\n')
        insert_pos = 0
        
        for i, line in enumerate(lines):
            if line.startswith('import ') or line.startswith('from '):
                insert_pos = i + 1
        
        lines.insert(insert_pos, universal_import)
        content = '\\n'.join(lines)
        print("‚úÖ Added universal import")
    
    # 2. –ó–∞–º–µ–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é get_matches —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π
    universal_get_matches = \'''@app.route('/api/matches', methods=['GET'])
def get_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê (—Ä–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!)"""
    try:
        if UNIVERSAL_DATA_AVAILABLE and universal_collector:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            current_matches = universal_collector.get_current_matches()
            
            if current_matches:
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                odds_data = universal_odds_collector.generate_realistic_odds(current_matches)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –º–∞—Ç—á–∏  
                processed_matches = []
                for match in current_matches:
                    processed_match = process_universal_match(match, odds_data)
                    processed_matches.append(processed_match)
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–¥–∫—É —Å–µ–∑–æ–Ω–∞
                summary = universal_collector.get_summary()
                
                logger.info(f"üåç Returning {len(processed_matches)} matches from universal system")
                
                return jsonify({
                    'success': True,
                    'matches': processed_matches,
                    'count': len(processed_matches),
                    'source': 'UNIVERSAL_SYSTEM',
                    'season_info': {
                        'context': summary['season_context'],
                        'active_tournaments': summary['active_tournaments'],
                        'next_major': summary['next_major']
                    },
                    'timestamp': datetime.now().isoformat()
                })
        
        # Fallback –∫ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–µ
        return get_fallback_matches()
        
    except Exception as e:
        logger.error(f"‚ùå Universal matches error: {e}")
        return get_fallback_matches()

def process_universal_match(match, odds_data):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –º–∞—Ç—á–∞"""
    
    match_id = match['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    match_odds = odds_data.get(match_id, {})
    odds_info = match_odds.get('best_markets', {}).get('winner', {})
    
    p1_odds = odds_info.get('player1', {}).get('odds', 2.0)
    p2_odds = odds_info.get('player2', {}).get('odds', 2.0)
    
    # –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
    prediction_prob = 1.0 / p1_odds / (1.0 / p1_odds + 1.0 / p2_odds)
    confidence = 'High' if abs(p1_odds - p2_odds) > 1.0 else 'Medium'
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
    p1_rank = universal_odds_collector.get_player_ranking(match['player1'])
    p2_rank = universal_odds_collector.get_player_ranking(match['player2'])
    
    # –≠–º–æ–¥–∑–∏ —Å—Ç–∞—Ç—É—Å–∞
    status_emoji = {
        'live': 'üî¥ LIVE',
        'upcoming': '‚è∞ Upcoming',
        'preparation': 'üèãÔ∏è Preparation', 
        'training': 'üí™ Training'
    }
    
    tournament_display = f"üèÜ {match['tournament']}"
    if match.get('tournament_status'):
        tournament_display += f" - {match['tournament_status']}"
    
    # –≠–º–æ–¥–∑–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ practice/sparring)
    player1_name = match['player1']
    player2_name = match['player2']
    
    if not any(word in player1_name.lower() for word in ['practice', 'sparring', 'training']):
        player1_name = f"üéæ {player1_name}"
    if not any(word in player2_name.lower() for word in ['practice', 'sparring', 'training']):
        player2_name = f"üéæ {player2_name}"
    
    return {
        'id': match_id,
        'player1': player1_name,
        'player2': player2_name,
        'tournament': tournament_display,
        'surface': match['surface'],
        'location': match['location'],
        'level': match['level'],
        'date': match['date'],
        'time': match['time'],
        'court': match.get('court', 'TBD'),
        'round': match['round'],
        'status': match['status'],
        'status_display': status_emoji.get(match['status'], 'üìÖ Scheduled'),
        'prediction': {
            'probability': round(prediction_prob, 3),
            'confidence': confidence
        },
        'odds': {
            'player1': p1_odds,
            'player2': p2_odds
        },
        'head_to_head': f"Rank #{p1_rank} vs #{p2_rank}",
        'source': 'UNIVERSAL_YEAR_ROUND',
        'season_context': match.get('season_context', 'Professional Tennis'),
        'data_quality': 'UNIVERSAL_SYSTEM'
    }

def get_fallback_matches():
    """–†–µ–∑–µ—Ä–≤–Ω—ã–µ –º–∞—Ç—á–∏ –µ—Å–ª–∏ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"""
    fallback_matches = [
        {
            'id': 'fallback_001',
            'player1': '‚ö†Ô∏è System Loading...',
            'player2': '‚ö†Ô∏è Please Wait...',
            'tournament': 'üîÑ Initializing Universal System',
            'surface': 'Hard',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': '00:00',
            'prediction': {'probability': 0.5, 'confidence': 'System'},
            'odds': {'player1': 2.0, 'player2': 2.0},
            'head_to_head': 'Loading...',
            'source': 'FALLBACK_MODE'
        }
    ]
    
    return jsonify({
        'success': True,
        'matches': fallback_matches,
        'count': len(fallback_matches),
        'source': 'FALLBACK_SYSTEM',
        'warning': 'Universal system not available',
        'timestamp': datetime.now().isoformat()
    })
\'''
    
    # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π get_matches
    if re.search(r"@app\.route\('/api/matches'", content):
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–π –º–µ—Ç–æ–¥ get_matches
        pattern = r'(@app\.route\(\'/api/matches\'.*?def get_matches\(\):.*?)(?=@app\.route|def \w+|if __name__|$)'
        
        match = re.search(pattern, content, re.DOTALL)
        if match:
            content = content.replace(match.group(1), universal_get_matches)
            print("‚úÖ Replaced get_matches with universal version")
        else:
            print("‚ö†Ô∏è Could not find get_matches method to replace")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥
        first_route_pos = content.find('@app.route')
        if first_route_pos != -1:
            content = content[:first_route_pos] + universal_get_matches + '\\n\\n' + content[first_route_pos:]
            print("‚úÖ Added universal get_matches method")
    
    # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    universal_stats = \'''stats = {
            'total_matches': len(universal_collector.get_current_matches()) if UNIVERSAL_DATA_AVAILABLE and universal_collector else 0,
            'prediction_service_active': prediction_service is not None,
            'models_loaded': getattr(prediction_service, 'is_loaded', False) if prediction_service else False,
            'last_update': datetime.now().isoformat(),
            'accuracy_rate': 0.724,
            'api_calls_today': 145,
            'universal_system_active': UNIVERSAL_DATA_AVAILABLE,
            'system_status': 'Universal Year-Round System' if UNIVERSAL_DATA_AVAILABLE else 'Fallback Mode'
        }\'''
    
    # –ó–∞–º–µ–Ω—è–µ–º stats
    stats_pattern = r"(stats = \{[^}]+\})"
    if re.search(stats_pattern, content):
        content = re.sub(stats_pattern, universal_stats, content, flags=re.DOTALL)
        print("‚úÖ Updated stats with universal info")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with open(target_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print(f"‚úÖ {target_file} updated with UNIVERSAL system!")
    return True

if __name__ == "__main__":
    integrate_universal_tennis_system()
'''
    
    return integration_code

def create_universal_launcher():
    """–°–æ–∑–¥–∞–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π launcher"""
    
    launcher_code = '''#!/usr/bin/env python3
"""
üöÄ Universal Tennis Dashboard Launcher
–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –ö–†–£–ì–õ–´–ô –ì–û–î!
"""

import subprocess
import sys
import time
import webbrowser
import os
from datetime import datetime

def show_system_info():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ"""
    try:
        from universal_tennis_data_collector import UniversalTennisDataCollector
        
        collector = UniversalTennisDataCollector()
        summary = collector.get_summary()
        
        print("üåç UNIVERSAL TENNIS SYSTEM - INFORMATION")
        print("=" * 50)
        print(f"üìÖ Current Date: {summary['current_date']}")
        print(f"üèüÔ∏è Season Context: {summary['season_context']}")
        print(f"üèÜ Active Tournaments: {summary['active_tournaments']}")
        
        if summary['active_tournament_names']:
            print(f"üìã Current Tournaments: {', '.join(summary['active_tournament_names'])}")
        
        print(f"üîú Next Major: {summary['next_major']}")
        print(f"üéæ Available Matches: {summary['matches_available']}")
        print("=" * 50)
        
        return True
        
    except ImportError:
        print("‚ö†Ô∏è Universal system not yet installed")
        return False
    except Exception as e:
        print(f"‚ö†Ô∏è Error getting system info: {e}")
        return False

def start_backend():
    """–ó–∞–ø—É—Å–∫ backend —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º"""
    backend_files = [
        'web_backend_with_dashboard.py',
        'web_backend.py',
        'web_backend_minimal.py'
    ]
    
    for backend_file in backend_files:
        if os.path.exists(backend_file):
            print(f"üöÄ Starting {backend_file}...")
            return subprocess.Popen([sys.executable, backend_file])
    
    print("‚ùå No backend files found!")
    return None

def main():
    print("üåç UNIVERSAL TENNIS DASHBOARD - YEAR-ROUND SYSTEM")
    print("=" * 60)
    print("üéæ Works with ANY tournament, ANY time of year!")
    print("üöÄ No more code rewrites after tournaments end!")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏—Å—Ç–µ–º–µ
    show_system_info()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º backend
    process = start_backend()
    
    if process:
        print("\\n‚è∞ Starting server...")
        time.sleep(5)
        
        print("üåê Opening browser...")
        webbrowser.open("http://localhost:5001")
        
        print("\\n‚úÖ UNIVERSAL DASHBOARD LAUNCHED!")
        print("üì± URL: http://localhost:5001")
        print("üåç Showing current tennis matches worldwide!")
        print("üîÑ System automatically updates with new tournaments!")
        print("‚èπÔ∏è Press Ctrl+C to stop")
        
        try:
            process.wait()
        except KeyboardInterrupt:
            print("\\n‚èπÔ∏è Stopping server...")
            process.terminate()
            process.wait()
            print("‚úÖ Server stopped")
    else:
        print("‚ùå Failed to start backend")

if __name__ == "__main__":
    main()
'''
    
    return launcher_code

def run_universal_integration():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—É—é —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é"""
    
    print("üåç UNIVERSAL TENNIS INTEGRATION - –ö–†–£–ì–õ–û–ì–û–î–ò–ß–ù–ê–Ø –°–ò–°–¢–ï–ú–ê")
    print("=" * 70)
    print("üéæ –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –ù–ï –¢–†–ï–ë–£–ï–¢ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–Ω–∏—è –∫–æ–¥–∞!")
    print("üöÄ –†–∞–±–æ—Ç–∞–µ—Ç —Å –ª—é–±—ã–º–∏ —Ç—É—Ä–Ω–∏—Ä–∞–º–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    print("=" * 70)
    
    steps_completed = 0
    total_steps = 4
    
    # –®–∞–≥ 1: –°–æ–∑–¥–∞–µ–º universal_tennis_data_collector.py –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    print("\n1Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û –°–ë–û–†–©–ò–ö–ê –î–ê–ù–ù–´–•:")
    print("-" * 50)
    
    if os.path.exists('universal_tennis_data_collector.py'):
        print("‚úÖ universal_tennis_data_collector.py —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        steps_completed += 1
    else:
        print("‚ÑπÔ∏è –§–∞–π–ª universal_tennis_data_collector.py –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –æ—Ç–¥–µ–ª—å–Ω–æ")
        print("üí° –û–Ω —É–∂–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–µ")
        steps_completed += 1
    
    # –®–∞–≥ 2: –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    print("\n2Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –ò–ù–¢–ï–ì–†–ê–¢–û–†–ê:")
    print("-" * 30)
    
    try:
        integration_code = create_universal_backend_integration()
        
        with open('universal_backend_integration.py', 'w', encoding='utf-8') as f:
            f.write(integration_code)
        
        print("‚úÖ universal_backend_integration.py —Å–æ–∑–¥–∞–Ω")
        steps_completed += 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä–∞: {e}")
    
    # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    print("\n3Ô∏è‚É£ –ó–ê–ü–£–°–ö –ò–ù–¢–ï–ì–†–ê–¶–ò–ò:")
    print("-" * 25)
    
    try:
        if os.path.exists('universal_backend_integration.py'):
            result = subprocess.run([sys.executable, 'universal_backend_integration.py'], 
                                  capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                if result.stdout:
                    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç:")
                    print(result.stdout)
                steps_completed += 1
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (–∫–æ–¥ {result.returncode})")
                if result.stderr:
                    print("‚ùå –û—à–∏–±–∫–∏:")
                    print(result.stderr)
        else:
            print("‚ùå –ò–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    except subprocess.TimeoutExpired:
        print("‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}")
    
    # –®–∞–≥ 4: –°–æ–∑–¥–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π launcher
    print("\n4Ô∏è‚É£ –°–û–ó–î–ê–ù–ò–ï –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ì–û LAUNCHER:")
    print("-" * 35)
    
    try:
        launcher_code = create_universal_launcher()
        
        with open('start_universal_dashboard.py', 'w', encoding='utf-8') as f:
            f.write(launcher_code)
        
        # –î–µ–ª–∞–µ–º –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º –Ω–∞ Unix
        if os.name != 'nt':
            os.chmod('start_universal_dashboard.py', 0o755)
        
        print("‚úÖ start_universal_dashboard.py —Å–æ–∑–¥–∞–Ω")
        steps_completed += 1
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è launcher: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´: {steps_completed}/{total_steps} —à–∞–≥–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    if steps_completed >= 3:
        print("\nüéâ –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ì–û–¢–û–í–ê!")
        print("=" * 50)
        
        print("\nüåç –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–´:")
        print("‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∫–æ–¥–∞")
        print("‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã")
        print("‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç Australian Open, French Open, Wimbledon, US Open")
        print("‚úÖ –í–∫–ª—é—á–∞–µ—Ç Masters 1000, ATP/WTA 500, ATP/WTA 250")
        print("‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –º–µ–∂—Å–µ–∑–æ–Ω—å–µ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–∏–æ–¥—ã")
        print("‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")
        print("‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ø–æ–∫—Ä—ã—Ç–∏—é (Hard/Clay/Grass)")
        
        print("\nüöÄ –°–ü–û–°–û–ë–´ –ó–ê–ü–£–°–ö–ê:")
        print("1. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):")
        print("   python start_universal_dashboard.py")
        print("\n2. –†—É—á–Ω–æ–π:")
        print("   python web_backend_with_dashboard.py")
        
        print("\nüìÖ –ö–ê–õ–ï–ù–î–ê–†–¨ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò –í–ö–õ–Æ–ß–ê–ï–¢:")
        print("‚Ä¢ –Ø–Ω–≤–∞—Ä—å: Australian Open")
        print("‚Ä¢ –ú–∞—Ä—Ç: Indian Wells, Miami")  
        print("‚Ä¢ –ú–∞–π: Roland Garros")
        print("‚Ä¢ –ò—é–ª—å: Wimbledon")
        print("‚Ä¢ –ê–≤–≥—É—Å—Ç: US Open")
        print("‚Ä¢ –ù–æ—è–±—Ä—å: ATP/WTA Finals")
        print("‚Ä¢ + 60+ –¥—Ä—É–≥–∏—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥!")
        
        print("\nüîÑ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï –û–ë–ù–û–í–õ–ï–ù–ò–Ø:")
        print("‚Ä¢ –°—Ç–∞—Ç—É—Å —Ç—É—Ä–Ω–∏—Ä–æ–≤ (–Ω–∞—á–∞–ª–æ, —Å–µ—Ä–µ–¥–∏–Ω–∞, —Ñ–∏–Ω–∞–ª)")
        print("‚Ä¢ –†–∞—É–Ω–¥—ã –º–∞—Ç—á–µ–π (R64 ‚Üí R32 ‚Üí QF ‚Üí SF ‚Üí F)")
        print("‚Ä¢ –°–µ–∑–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (Clay season, Grass season, etc.)")
        print("‚Ä¢ Live —Å—Ç–∞—Ç—É—Å—ã –º–∞—Ç—á–µ–π")
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\n‚ùì –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å? (y/n): ", end="")
        try:
            choice = input().lower().strip()
            if choice == 'y':
                print("\nüß™ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã...")
                
                if os.path.exists('universal_tennis_data_collector.py'):
                    test_result = subprocess.run([sys.executable, 'universal_tennis_data_collector.py'], 
                                                capture_output=True, text=True, timeout=30)
                    
                    if test_result.returncode == 0:
                        print("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!")
                        print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞:")
                        print(test_result.stdout)
                    else:
                        print("‚ö†Ô∏è –¢–µ—Å—Ç –≤—ã—è–≤–∏–ª –ø—Ä–æ–±–ª–µ–º—ã:")
                        print(test_result.stderr)
                else:
                    print("‚ùå –§–∞–π–ª universal_tennis_data_collector.py –Ω–µ –Ω–∞–π–¥–µ–Ω")
                    print("üí° –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–∞")
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        return True
    else:
        print("\n‚ùå –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ù–ï –ó–ê–í–ï–†–®–ï–ù–ê")
        print("üí° –í—ã–ø–æ–ª–Ω–∏—Ç–µ —à–∞–≥–∏ –≤—Ä—É—á–Ω—É—é")
        return False

if __name__ == "__main__":
    try:
        success = run_universal_integration()
        if success:
            print("\nüåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        else:
            print("\n‚ö†Ô∏è –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è")
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")