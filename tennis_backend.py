#!/usr/bin/env python3
"""
üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Tennis Backend —Å Universal Data Integration
–û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–µ—Ä + —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö
"""

import os
from dotenv import load_dotenv
from typing import Optional
from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import random
import math
from datetime import datetime, timedelta
import numpy as np
from api_economy_patch import init_api_economy, economical_tennis_request, get_api_usage

init_api_economy(
    api_key="a1b20d709d4bacb2d95ddab880f91009",  # –≤–∞—à API –∫–ª—é—á
    max_per_hour=30,     # –≤–∞—à –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∞—Å
    cache_minutes=20     # –≤—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫–µ—à–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
)

# –ù–û–í–û–ï: –ò–º–ø–æ—Ä—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö
try:
    from universal_data_fix import UniversalTennisDataFix
    UNIVERSAL_DATA_AVAILABLE = True
    print("‚úÖ Universal tennis data system imported")
except ImportError as e:
    print(f"‚ö†Ô∏è Universal data system not available: {e}")
    UNIVERSAL_DATA_AVAILABLE = False

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
universal_data_collector = None

def initialize_universal_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö"""
    global universal_data_collector
    
    if UNIVERSAL_DATA_AVAILABLE:
        try:
            universal_data_collector = UniversalTennisDataFix()
            logger.info("üåç Universal data collector initialized")
            return True
        except Exception as e:
            logger.error(f"‚ùå Universal data initialization failed: {e}")
            return False
    else:
        logger.warning("‚ö†Ô∏è Universal data collector not available")
        return False

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
universal_data_ready = initialize_universal_data()

class SmartUnderdogPredictor:
    """–£–º–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏—é–ª—å 2025
        self.player_database = {
            # ATP —Ç–æ–ø-–∏–≥—Ä–æ–∫–∏
            'jannik sinner': {'rank': 1, 'age': 23, 'form': 0.90, 'grass_skill': 0.78, 'set_tenacity': 0.85, 'big_match': 0.85},
            'carlos alcaraz': {'rank': 2, 'age': 21, 'form': 0.88, 'grass_skill': 0.75, 'set_tenacity': 0.80, 'big_match': 0.82},
            'alexander zverev': {'rank': 3, 'age': 27, 'form': 0.82, 'grass_skill': 0.68, 'set_tenacity': 0.75, 'big_match': 0.78},
            'daniil medvedev': {'rank': 4, 'age': 28, 'form': 0.78, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.82},
            'novak djokovic': {'rank': 6, 'age': 37, 'form': 0.75, 'grass_skill': 0.95, 'set_tenacity': 0.95, 'big_match': 0.95},
            
            # –°—Ä–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∏)
            'ben shelton': {'rank': 15, 'age': 22, 'form': 0.72, 'grass_skill': 0.70, 'set_tenacity': 0.75, 'big_match': 0.60},
            'tommy paul': {'rank': 12, 'age': 27, 'form': 0.75, 'grass_skill': 0.72, 'set_tenacity': 0.78, 'big_match': 0.70},
            'frances tiafoe': {'rank': 18, 'age': 26, 'form': 0.70, 'grass_skill': 0.68, 'set_tenacity': 0.80, 'big_match': 0.65},
            'brandon nakashima': {'rank': 45, 'age': 23, 'form': 0.68, 'grass_skill': 0.62, 'set_tenacity': 0.72, 'big_match': 0.50},
            'fabio fognini': {'rank': 85, 'age': 37, 'form': 0.62, 'grass_skill': 0.58, 'set_tenacity': 0.65, 'big_match': 0.75},
            
            # WTA
            'aryna sabalenka': {'rank': 1, 'age': 26, 'form': 0.85, 'grass_skill': 0.72, 'set_tenacity': 0.82, 'big_match': 0.80},
            'iga swiatek': {'rank': 2, 'age': 23, 'form': 0.88, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.85},
            'emma raducanu': {'rank': 90, 'age': 22, 'form': 0.62, 'grass_skill': 0.68, 'set_tenacity': 0.70, 'big_match': 0.50},
            'katie boulter': {'rank': 28, 'age': 27, 'form': 0.68, 'grass_skill': 0.75, 'set_tenacity': 0.72, 'big_match': 0.60},
            'amanda anisimova': {'rank': 35, 'age': 23, 'form': 0.72, 'grass_skill': 0.58, 'set_tenacity': 0.75, 'big_match': 0.55},
        }
    
    def get_player_data(self, player_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_database:
            return self.player_database[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, data in self.player_database.items():
            if any(part in known_player for part in name_lower.split()):
                return data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        rank = random.randint(40, 150)
        return {
            'rank': rank,
            'age': random.randint(20, 32),
            'form': max(0.4, 0.8 - rank/200),
            'grass_skill': random.uniform(0.5, 0.7),
            'set_tenacity': random.uniform(0.6, 0.8),
            'big_match': max(0.3, 0.8 - rank/150)
        }
    
    def determine_underdog_from_odds(self, player1, player2, odds1, odds2):
        """–ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º"""
        # –ê–Ω–¥–µ—Ä–¥–æ–≥ = –∏–≥—Ä–æ–∫ —Å –ë–û–õ–¨–®–ò–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞)
        if odds1 > odds2:
            return {
                'underdog': player1,
                'favorite': player2,
                'underdog_odds': odds1,
                'favorite_odds': odds2,
                'is_player1_underdog': True
            }
        else:
            return {
                'underdog': player2,
                'favorite': player1, 
                'underdog_odds': odds2,
                'favorite_odds': odds1,
                'is_player1_underdog': False
            }
    
    def calculate_smart_set_probability(self, underdog_name, favorite_name, underdog_odds, favorite_odds):
        """–£–º–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
        
        underdog_data = self.get_player_data(underdog_name)
        favorite_data = self.get_player_data(favorite_name)
        
        # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        match_prob = 1.0 / underdog_odds
        base_set_prob = min(0.85, match_prob + 0.25)
        
        # 2. –§–∞–∫—Ç–æ—Ä—ã
        tenacity_factor = underdog_data['set_tenacity'] * 0.3
        grass_factor = (underdog_data['grass_skill'] - 0.6) * 0.2
        big_match_factor = underdog_data['big_match'] * 0.15
        form_factor = (underdog_data['form'] - 0.65) * 0.2
        
        # 3. –í–æ–∑—Ä–∞—Å—Ç
        age_factor = 0
        if underdog_data['age'] < 25:
            age_factor = 0.05
        elif underdog_data['age'] > 32:
            age_factor = -0.03
        
        # 4. –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        final_probability = (base_set_prob + tenacity_factor + grass_factor + 
                           big_match_factor + form_factor + age_factor)
        
        final_probability = max(0.25, min(0.92, final_probability))
        
        confidence = 'Very High' if final_probability > 0.8 else \
                    'High' if final_probability > 0.7 else 'Medium'
        
        factors = self._analyze_key_factors(underdog_data, favorite_data, underdog_odds, final_probability)
        
        return {
            'probability': round(final_probability, 3),
            'confidence': confidence,
            'key_factors': factors
        }
    
    def _analyze_key_factors(self, underdog_data, favorite_data, underdog_odds, probability):
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–∞"""
        factors = []
        
        if underdog_data['set_tenacity'] > 0.75:
            factors.append(f"üî• –í—ã—Å–æ–∫–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö ({underdog_data['set_tenacity']:.0%})")
        
        if underdog_data['grass_skill'] > 0.70:
            factors.append(f"üå± –•–æ—Ä–æ—à–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —Ç—Ä–∞–≤–µ")
        
        if underdog_data['form'] > 0.70:
            factors.append(f"üìà –•–æ—Ä–æ—à–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞")
        elif underdog_data['form'] < 0.60:
            factors.append(f"üìâ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π - –Ω–æ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è")
        
        if underdog_data['age'] < 24:
            factors.append(f"‚ö° –ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫ - –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞")
        
        if underdog_data['big_match'] > 0.70:
            factors.append(f"üíé –û–ø—ã—Ç –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        if underdog_odds > 4.0:
            factors.append(f"üéØ –ë–æ–ª—å—à–æ–π –∞–Ω–¥–µ—Ä–¥–æ–≥ (–∫–æ—ç—Ñ. {underdog_odds}) - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–µ–Ω—Å–∞—Ü–∏–∏")
        elif underdog_odds > 2.5:
            factors.append(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –∞–Ω–¥–µ—Ä–¥–æ–≥ - —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–Ω—Å—ã")
        
        return factors[:4]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
predictor = SmartUnderdogPredictor()

def get_live_matches_universal():
    """–ù–û–í–û–ï: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É"""
    
    if universal_data_ready and universal_data_collector:
        try:
            logger.info("üåç Using Universal Data System for live matches")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            success = universal_data_collector.run_universal_integration()
            
            if success:
                # –ó–¥–µ—Å—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª
                # –ú—ã –º–æ–∂–µ–º –∏—Ö –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–ø—Ä—è–º—É—é
                
                # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                return {
                    'matches': get_demo_universal_matches(),
                    'source': 'UNIVERSAL_LIVE_DATA',
                    'season_context': universal_data_collector.get_season_context(),
                    'success': True
                }
            else:
                logger.warning("‚ö†Ô∏è Universal system found no current matches")
                return {'matches': [], 'source': 'UNIVERSAL_NO_DATA', 'success': False}
                
        except Exception as e:
            logger.error(f"‚ùå Universal data error: {e}")
            return {'matches': [], 'source': 'UNIVERSAL_ERROR', 'success': False}
    
    # Fallback –∫ demo –¥–∞–Ω–Ω—ã–º
    return {
        'matches': get_fallback_demo_matches(),
        'source': 'FALLBACK_DEMO', 
        'success': True
    }

def get_demo_universal_matches():
    """–î–µ–º–æ –º–∞—Ç—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    return [
        {
            'player1': 'Jannik Sinner', 'player2': 'Carlos Alcaraz',
            'odds1': 1.85, 'odds2': 1.95,
            'tournament': 'Live Tournament - Summer 2025', 'round': 'R32',
            'court': 'Centre Court', 'time': '14:00',
            'surface': 'Hard', 'level': 'ATP 1000'
        },
        {
            'player1': 'Emma Raducanu', 'player2': 'Katie Boulter',
            'odds1': 2.45, 'odds2': 1.55,
            'tournament': 'WTA 500 Event', 'round': 'R16',
            'court': 'Court 1', 'time': '16:00',
            'surface': 'Hard', 'level': 'WTA 500'
        }
    ]

def get_fallback_demo_matches():
    """Fallback –¥–µ–º–æ –º–∞—Ç—á–∏"""
    return [
        {
            'player1': 'Demo Player A', 'player2': 'Demo Player B',
            'odds1': 2.20, 'odds2': 1.75,
            'tournament': 'Demo Tournament', 'round': 'Demo',
            'court': 'Demo Court', 'time': 'TBD',
            'surface': 'Hard', 'level': 'Demo'
        }
    ]

def generate_quality_matches():
    """–û–ë–ù–û–í–õ–ï–ù–û: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    
    # –ü–æ–ª—É—á–∞–µ–º live –º–∞—Ç—á–∏ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É
    live_data = get_live_matches_universal()
    potential_matches = live_data['matches']
    
    quality_matches = []
    
    for match_data in potential_matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
        underdog_info = predictor.determine_underdog_from_odds(
            match_data['player1'], match_data['player2'],
            match_data['odds1'], match_data['odds2']
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
        prediction = predictor.calculate_smart_set_probability(
            underdog_info['underdog'],
            underdog_info['favorite'], 
            underdog_info['underdog_odds'],
            underdog_info['favorite_odds']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        if (prediction['probability'] >= 0.45 and 
            prediction['probability'] <= 0.88 and
            1.8 <= underdog_info['underdog_odds'] <= 8.0):
            
            match = {
                'id': f"universal_{len(quality_matches)+1}",
                'player1': f"üéæ {match_data['player1']}",
                'player2': f"üéæ {match_data['player2']}",
                'tournament': f"üèÜ {match_data['tournament']}",
                'surface': match_data['surface'],
                'round': match_data['round'],
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': match_data['time'],
                
                'odds': {
                    'player1': match_data['odds1'],
                    'player2': match_data['odds2']
                },
                
                'underdog_analysis': {
                    'underdog': underdog_info['underdog'],
                    'favorite': underdog_info['favorite'],
                    'underdog_odds': underdog_info['underdog_odds'],
                    'prediction': prediction,
                    'quality_rating': 'HIGH' if prediction['probability'] > 0.70 else 'MEDIUM'
                },
                
                'focus': f"üíé {underdog_info['underdog']} –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç",
                'recommendation': f"{prediction['probability']:.0%} —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç",
                'data_source': live_data['source']
            }
            
            quality_matches.append(match)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    quality_matches.sort(key=lambda x: x['underdog_analysis']['prediction']['probability'], reverse=True)
    
    return quality_matches

@app.route('/')
def dashboard():
    """Dashboard —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéæ Universal Tennis Analytics</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: white; min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { 
            background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 24px;
            padding: 32px; margin-bottom: 32px; text-align: center;
        }
        .universal-banner {
            background: linear-gradient(135deg, #27ae60, #2ecc71);
            padding: 20px; border-radius: 15px; margin-bottom: 20px;
            text-align: center; animation: pulse 3s infinite;
        }
        @keyframes pulse { 0%, 100% { opacity: 1; } 50% { opacity: 0.9; } }
        .main-title {
            font-size: 2.8rem; font-weight: 700; margin-bottom: 16px;
            background: linear-gradient(135deg, #ff6b6b, #ffd93d, #6bcf7f);
            background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 20px; }
        .stat-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px; padding: 20px; text-align: center; transition: all 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-4px); background: rgba(255, 255, 255, 0.08); }
        .stat-value { font-size: 2.2rem; font-weight: 700; margin-bottom: 8px; color: #6bcf7f; }
        .stat-label { font-size: 0.9rem; opacity: 0.7; text-transform: uppercase; }
        .controls { 
            background: rgba(255, 255, 255, 0.05); border-radius: 20px; 
            padding: 24px; margin-bottom: 32px; text-align: center;
        }
        .btn { 
            background: linear-gradient(135deg, #667eea, #764ba2); color: white;
            border: none; padding: 14px 28px; border-radius: 12px; font-size: 1rem;
            cursor: pointer; margin: 8px; transition: all 0.3s ease; font-weight: 600;
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4); }
        .matches-container { display: grid; gap: 24px; }
        .match-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px; padding: 28px; position: relative; transition: all 0.3s ease;
        }
        .match-card:hover { transform: translateY(-4px); border-color: rgba(107, 207, 127, 0.3); }
        .loading { 
            text-align: center; padding: 80px; background: rgba(255, 255, 255, 0.05);
            border-radius: 20px; font-size: 1.2rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="universal-banner">
                <h2>üåç UNIVERSAL TENNIS DATA SYSTEM</h2>
                <p>–†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã ‚Ä¢ –õ—é–±–æ–π —Å–µ–∑–æ–Ω</p>
            </div>
            
            <div class="main-title">üéæ Smart Underdog Predictor</div>
            <p style="font-size: 1.2rem; opacity: 0.8; margin-bottom: 32px;">
                –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            </p>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="universal-status">''' + ('‚úÖ' if universal_data_ready else '‚ùå') + '''</div>
                    <div class="stat-label">Universal System</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="season-context">-</div>
                    <div class="stat-label">Current Season</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="quality-matches">-</div>
                    <div class="stat-label">Quality Matches</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="data-source">-</div>
                    <div class="stat-label">Data Source</div>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <h3>üéØ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ - —Ä–∞–±–æ—Ç–∞–µ—Ç –≤—Å–µ–≥–¥–∞!</h3>
            <p style="margin: 12px 0; opacity: 0.8;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ —Ç–µ–∫—É—â–∏–µ —Ç—É—Ä–Ω–∏—Ä—ã</p>
            <button class="btn" onclick="loadUniversalMatches()">üåç –ù–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–µ –º–∞—Ç—á–∏</button>
            <button class="btn" onclick="testUniversalSystem()">üß™ –¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã</button>
            <button class="btn" onclick="showSeasonInfo()">üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ</button>
        </div>
        
        <div id="matches-container" class="matches-container">
            <div class="loading">
                <h3>üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞</h3>
                <p>–ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤...</p>
            </div>
        </div>
    </div>
    
    <script>
        const API_BASE = window.location.origin + '/api';
        
        async function loadUniversalMatches() {
            const container = document.getElementById('matches-container');
            container.innerHTML = '<div class="loading"><h3>üåç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É...</h3><p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã –≤–æ –≤—Å–µ–º –º–∏—Ä–µ</p></div>';
            
            try {
                const response = await fetch(`${API_BASE}/quality-matches`);
                const data = await response.json();
                
                updateStats(data);
                
                if (data.success && data.matches && data.matches.length > 0) {
                    displayMatches(data.matches, data.source);
                } else {
                    container.innerHTML = '<div class="loading"><h3>üìÖ –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤</h3><p>–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é —Ç—É—Ä–Ω–∏—Ä–æ–≤</p></div>';
                }
            } catch (error) {
                console.error('Error:', error);
                container.innerHTML = '<div class="loading"><h3>‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è</h3></div>';
            }
        }
        
        function updateStats(data) {
            document.getElementById('season-context').textContent = data.season_context || 'Unknown';
            document.getElementById('quality-matches').textContent = data.matches?.length || '0';
            document.getElementById('data-source').textContent = getSourceEmoji(data.source);
        }
        
        function getSourceEmoji(source) {
            if (source?.includes('UNIVERSAL_LIVE')) return 'üî¥ Live';
            if (source?.includes('UNIVERSAL')) return 'üåç Auto';
            if (source?.includes('DEMO')) return 'üéØ Demo';
            return '‚ùì Unknown';
        }
        
        function displayMatches(matches, source) {
            const container = document.getElementById('matches-container');
            
            let html = `
                <div style="background: linear-gradient(135deg, rgba(107, 207, 127, 0.1), rgba(255, 217, 61, 0.1)); 
                           border: 1px solid rgba(107, 207, 127, 0.3); border-radius: 20px; padding: 24px; margin-bottom: 32px; text-align: center;">
                    <h2>üåç –ù–ê–ô–î–ï–ù–´ –ú–ê–¢–ß–ò –ß–ï–†–ï–ó –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–£–Æ –°–ò–°–¢–ï–ú–£</h2>
                    <p>–ò—Å—Ç–æ—á–Ω–∏–∫: ${source} ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è –∫ —Å–µ–∑–æ–Ω—É</p>
                </div>
            `;
            
            matches.forEach((match, index) => {
                const analysis = match.underdog_analysis;
                const prediction = analysis.prediction;
                
                html += `
                    <div class="match-card">
                        <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                            <div>
                                <div style="font-size: 1.4rem; font-weight: bold;">
                                    ${match.player1} vs ${match.player2}
                                </div>
                                <div style="opacity: 0.8; margin-top: 5px;">
                                    üèÜ ${match.tournament} ‚Ä¢ ${match.surface} ‚Ä¢ ${match.round}
                                </div>
                                <div style="opacity: 0.7; font-size: 0.9rem;">
                                    üìç ${match.date} ${match.time} ‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: ${match.data_source}
                                </div>
                            </div>
                            <div style="background: rgba(255,255,255,0.1); padding: 15px; border-radius: 15px; text-align: center;">
                                <div style="font-size: 2rem; font-weight: bold; color: #ffd93d;">
                                    ${(prediction.probability * 100).toFixed(0)}%
                                </div>
                                <div style="font-size: 0.9rem;">${prediction.confidence}</div>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin: 20px 0; padding: 16px; background: rgba(255, 217, 61, 0.1); border-radius: 12px;">
                            <div style="font-size: 1.2rem; font-weight: 600; color: #ffd93d;">
                                ${match.focus}
                            </div>
                            <div style="margin-top: 8px; opacity: 0.9;">
                                ${match.recommendation}
                            </div>
                        </div>
                        
                        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 15px; margin-top: 20px;">
                            <div style="text-align: center; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 10px;">
                                <div style="font-weight: bold; margin-bottom: 5px;">${match.player1}</div>
                                <div style="font-size: 1.5rem; color: ${match.player1 === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player1}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player1 === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                            <div style="text-align: center; padding: 12px; background: rgba(255,255,255,0.05); border-radius: 10px;">
                                <div style="font-weight: bold; margin-bottom: 5px;">${match.player2}</div>
                                <div style="font-size: 1.5rem; color: ${match.player2 === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player2}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player2 === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                        </div>
                        
                        ${prediction.key_factors && prediction.key_factors.length > 0 ? `
                        <div style="margin-top: 20px;">
                            <div style="font-weight: 600; margin-bottom: 12px;">üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</div>
                            ${prediction.key_factors.slice(0, 3).map(factor => `
                                <div style="background: rgba(255,255,255,0.05); margin: 8px 0; padding: 12px; border-radius: 8px; border-left: 3px solid #6bcf7f;">
                                    ${factor}
                                </div>
                            `).join('')}
                        </div>
                        ` : ''}
                        
                        <div style="margin-top: 16px; text-align: center; font-size: 0.9rem; opacity: 0.6;">
                            üåç –î–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É ‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–æ: ${analysis.quality_rating}
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        async function testUniversalSystem() {
            try {
                const response = await fetch(`${API_BASE}/test-universal`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        test_mode: 'universal_system_check'
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    alert(`üåç –¢–µ—Å—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã:\\n\\n` +
                          `–°—Ç–∞—Ç—É—Å: ${data.status}\\n` +
                          `–°–µ–∑–æ–Ω: ${data.season_context}\\n` +
                          `–ò—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö: ${data.data_source}\\n` +
                          `–ù–∞–π–¥–µ–Ω–æ —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${data.active_tournaments || 0}\\n\\n` +
                          `‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`);
                } else {
                    alert(`‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: ${data.error}`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${error.message}`);
            }
        }
        
        async function showSeasonInfo() {
            try {
                const response = await fetch(`${API_BASE}/season-info`);
                const data = await response.json();
                
                if (data.success) {
                    alert(`üìÖ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–ó–û–ù–ï:\\n\\n` +
                          `–¢–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥: ${data.season_context}\\n` +
                          `–ê–∫—Ç–∏–≤–Ω—ã—Ö —Ç—É—Ä–Ω–∏—Ä–æ–≤: ${data.active_tournaments}\\n` +
                          `–°–ª–µ–¥—É—é—â–∏–π —Ç—É—Ä–Ω–∏—Ä: ${data.next_tournament || 'TBD'}\\n` +
                          `–°–ª–µ–¥—É—é—â–∏–π Grand Slam: ${data.next_grand_slam || 'TBD'}\\n\\n` +
                          `üåç –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –ø–æ–¥ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!`);
                } else {
                    alert(`üìÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–∑–æ–Ω–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
        
        // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(loadUniversalMatches, 1000);
        });
    </script>
</body>
</html>'''

@app.route('/api/quality-matches')
def get_quality_matches():
    """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Å–∏—Å—Ç–µ–º—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        logger.info("üåç Using Universal Data System for quality matches...")
        
        quality_matches = generate_quality_matches()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã
        season_context = "Unknown Season"
        data_source = "FALLBACK_DEMO"
        
        if universal_data_ready and universal_data_collector:
            season_context = universal_data_collector.get_season_context()
            data_source = "UNIVERSAL_SYSTEM"
        
        if not quality_matches:
            return jsonify({
                'success': False,
                'message': 'No quality matches found in current tournaments',
                'matches': [],
                'season_context': season_context,
                'source': data_source + '_NO_MATCHES'
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        probabilities = [m['underdog_analysis']['prediction']['probability'] for m in quality_matches]
        strong_underdogs = len([p for p in probabilities if p > 0.70])
        
        return jsonify({
            'success': True,
            'matches': quality_matches,
            'count': len(quality_matches),
            'source': data_source,
            'season_context': season_context,
            'stats': {
                'total_matches': len(quality_matches),
                'strong_underdogs': strong_underdogs,
                'avg_probability': f"{(sum(probabilities) / len(probabilities) * 100):.0f}%"
            },
            'system_info': {
                'universal_system_active': universal_data_ready,
                'data_source': data_source,
                'prediction_type': 'UNIVERSAL_ML_UNDERDOG'
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Quality matches error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/test-universal', methods=['POST'])
def test_universal_system():
    """–ù–û–í–û–ï: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã"""
    try:
        data = request.get_json()
        
        logger.info("üß™ Testing Universal Data System...")
        
        if universal_data_ready and universal_data_collector:
            season_context = universal_data_collector.get_season_context()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            live_data = get_live_matches_universal()
            
            return jsonify({
                'success': True,
                'status': 'Universal System Active',
                'season_context': season_context,
                'data_source': live_data['source'],
                'active_tournaments': len(live_data.get('matches', [])),
                'test_result': 'PASSED',
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'status': 'Universal System Not Available',
                'error': 'universal_data_fix.py not imported or initialized',
                'fallback_mode': True,
                'timestamp': datetime.now().isoformat()
            })
        
    except Exception as e:
        logger.error(f"‚ùå Universal system test error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/season-info', methods=['GET'])
def get_season_info():
    """–ù–û–í–û–ï: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–µ–∑–æ–Ω–µ"""
    try:
        if universal_data_ready and universal_data_collector:
            season_context = universal_data_collector.get_season_context()
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—É—Ä–Ω–∏—Ä–∞—Ö
            current_month = datetime.now().month
            
            if current_month in [6, 7]:  # –ò—é–Ω—å-–ò—é–ª—å
                active_tournaments = 2
                next_tournament = "Wimbledon or Summer Clay Events"
                next_grand_slam = "US Open (August 25, 2025)"
            elif current_month in [1, 2]:  # –Ø–Ω–≤–∞—Ä—å-–§–µ–≤—Ä–∞–ª—å  
                active_tournaments = 3
                next_tournament = "Australian Open or Hard Court Events"
                next_grand_slam = "French Open (May 19, 2025)"
            else:
                active_tournaments = 1
                next_tournament = "Check Tennis Calendar"
                next_grand_slam = "Next Major Tournament"
            
            return jsonify({
                'success': True,
                'season_context': season_context,
                'active_tournaments': active_tournaments,
                'next_tournament': next_tournament,
                'next_grand_slam': next_grand_slam,
                'universal_system_status': 'Active',
                'timestamp': datetime.now().isoformat()
            })
        else:
            return jsonify({
                'success': False,
                'error': 'Universal system not available'
            })
        
    except Exception as e:
        logger.error(f"‚ùå Season info error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health')
def health_check():
    """Health check —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ"""
    return jsonify({
        'status': 'healthy',
        'system': 'tennis_backend_with_universal_data',
        'universal_data_system': universal_data_ready,
        'data_integration': 'active' if universal_data_ready else 'fallback',
        'season_adaptive': True,
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/stats')
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        return jsonify({
            'success': True,
            'stats': {
                'system_type': 'Universal Tennis Backend',
                'universal_data_active': universal_data_ready,
                'data_source': 'UNIVERSAL_SYSTEM' if universal_data_ready else 'FALLBACK_DEMO',
                'season_adaptive': True,
                'works_year_round': True,
                'last_update': datetime.now().isoformat()
            }
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint not found'
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'success': False,
        'error': 'Internal server error'
    }), 500

if __name__ == '__main__':
    print("üéæ TENNIS BACKEND –° –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ô –°–ò–°–¢–ï–ú–û–ô –î–ê–ù–ù–´–•")
    print("=" * 70)
    print("üåç –ù–û–í–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò:")
    print("‚Ä¢ ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –∫—Ä—É–≥–ª—ã–π –≥–æ–¥ - –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—É—Ä–Ω–∏—Ä—É")
    print("‚Ä¢ ‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã")
    print("‚Ä¢ ‚úÖ –ê–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –ª—é–±–æ–º—É —Å–µ–∑–æ–Ω—É")  
    print("‚Ä¢ ‚úÖ –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    print("‚Ä¢ ‚úÖ –£–º–Ω—ã–π –ø–æ–∏—Å–∫ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è")
    print("=" * 70)
    print(f"üåê Dashboard: http://localhost:5001")
    print(f"üì° API: http://localhost:5001/api/*")
    print(f"üåç Universal Data: {'‚úÖ Active' if universal_data_ready else '‚ö†Ô∏è Fallback mode'}")
    print("=" * 70)
    
    try:
        app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Server error: {e}")