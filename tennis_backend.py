#!/usr/bin/env python3
"""
üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô Tennis Backend - –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
–§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–∞—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç
"""

import os
from dotenv import load_dotenv
from typing import Optional
from flask import Flask, jsonify, request
from flask_cors import CORS
import logging
import random
import math
from datetime import datetime, timedelta
import numpy as np

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

ODDS_API_KEY: Optional[str] = os.getenv('ODDS_API_KEY')

def get_real_wimbledon_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ The Odds API"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞
    if ODDS_API_KEY is None:
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return get_fallback_matches()
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ API
        from correct_odds_api_integration import TheOddsAPICorrect
        
        api = TheOddsAPICorrect(ODDS_API_KEY)
        tennis_odds = api.get_tennis_odds("tennis")
        
        if not tennis_odds:
            print("‚ö†Ô∏è API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            return get_fallback_matches()
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        real_matches = []
        for match in tennis_odds:
            if is_tennis_match(match):  # –§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ —Ç–µ–Ω–Ω–∏—Å
                converted_match = convert_api_match(match)
                real_matches.append(converted_match)
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(real_matches)} –º–∞—Ç—á–µ–π —á–µ—Ä–µ–∑ API")
        return real_matches
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
        return get_fallback_matches()

def get_fallback_matches():
    """–°—Ç–∞—Ç–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"""
    return [
        {
            'player1': 'Aryna Sabalenka', 'player2': 'Emma Raducanu',
            'odds1': 1.22, 'odds2': 4.50,
            'tournament': 'Wimbledon 2025', 'round': '3rd Round',
            'court': 'Centre Court', 'time': '15:00'
        },
        # ... –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç–∏—á–Ω—ã–µ –º–∞—Ç—á–∏
    ]

def convert_api_match(api_match):
    """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
    bookmakers = api_match.get('bookmakers', [])
    
    # –ò—â–µ–º –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
    odds1, odds2 = extract_best_odds(bookmakers)
    
    return {
        'player1': api_match.get('home_team', 'Player 1'),
        'player2': api_match.get('away_team', 'Player 2'),
        'odds1': odds1,
        'odds2': odds2,
        'tournament': 'Live Tournament',
        'round': 'Live',
        'court': 'TBD',
        'time': api_match.get('commence_time', 'TBD')[:5]  # HH:MM
    }

def extract_best_odds(bookmakers):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –ª—É—á—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"""
    best_odds1, best_odds2 = 2.0, 2.0
    
    for bookmaker in bookmakers:
        for market in bookmaker.get('markets', []):
            if market.get('key') == 'h2h':
                outcomes = market.get('outcomes', [])
                if len(outcomes) >= 2:
                    odds1 = outcomes[0].get('price', 2.0)
                    odds2 = outcomes[1].get('price', 2.0)
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                    best_odds1 = max(best_odds1, odds1)
                    best_odds2 = max(best_odds2, odds2)
    
    return best_odds1, best_odds2

def is_tennis_match(match):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ —ç—Ç–æ —Ç–µ–Ω–Ω–∏—Å–Ω—ã–π –º–∞—Ç—á"""
    return (match.get('sport_title') == 'Tennis' or 
            'tennis' in match.get('sport_key', '').lower())

class SmartUnderdogPredictor:
    """–£–º–Ω—ã–π –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
    
    def __init__(self):
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –∏—é–ª—å 2025
        self.player_database = {
            # ATP —Ç–æ–ø-–∏–≥—Ä–æ–∫–∏
            'jannik sinner': {'rank': 1, 'age': 23, 'form': 0.90, 'grass_skill': 0.78, 'set_tenacity': 0.85, 'big_match': 0.85},
            'carlos alcaraz': {'rank': 2, 'age': 21, 'form': 0.88, 'grass_skill': 0.75, 'set_tenacity': 0.80, 'big_match': 0.82},
            'alexander zverev': {'rank': 3, 'age': 27, 'form': 0.82, 'grass_skill': 0.68, 'set_tenacity': 0.75, 'big_match': 0.78},
            'daniil medvedev': {'rank': 4, 'age': 28, 'form': 0.78, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.82},
            'novak djokovic': {'rank': 6, 'age': 37, 'form': 0.75, 'grass_skill': 0.95, 'set_tenacity': 0.95, 'big_match': 0.95},
            
            # –°—Ä–µ–¥–Ω–∏–µ –∏–≥—Ä–æ–∫–∏ (–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∏)
            'ben shelton': {'rank': 15, 'age': 22, 'form': 0.72, 'grass_skill': 0.70, 'set_tenacity': 0.75, 'big_match': 0.60},
            'tommy paul': {'rank': 12, 'age': 27, 'form': 0.75, 'grass_skill': 0.72, 'set_tenacity': 0.78, 'big_match': 0.70},
            'frances tiafoe': {'rank': 18, 'age': 26, 'form': 0.70, 'grass_skill': 0.68, 'set_tenacity': 0.80, 'big_match': 0.65},
            'brandon nakashima': {'rank': 45, 'age': 23, 'form': 0.68, 'grass_skill': 0.62, 'set_tenacity': 0.72, 'big_match': 0.50},
            'fabio fognini': {'rank': 85, 'age': 37, 'form': 0.62, 'grass_skill': 0.58, 'set_tenacity': 0.65, 'big_match': 0.75},
            
            # WTA
            'aryna sabalenka': {'rank': 1, 'age': 26, 'form': 0.85, 'grass_skill': 0.72, 'set_tenacity': 0.82, 'big_match': 0.80},
            'iga swiatek': {'rank': 2, 'age': 23, 'form': 0.88, 'grass_skill': 0.65, 'set_tenacity': 0.85, 'big_match': 0.85},
            'emma raducanu': {'rank': 90, 'age': 22, 'form': 0.62, 'grass_skill': 0.68, 'set_tenacity': 0.70, 'big_match': 0.50},
            'katie boulter': {'rank': 28, 'age': 27, 'form': 0.68, 'grass_skill': 0.75, 'set_tenacity': 0.72, 'big_match': 0.60},
            'amanda anisimova': {'rank': 35, 'age': 23, 'form': 0.72, 'grass_skill': 0.58, 'set_tenacity': 0.75, 'big_match': 0.55},
        }
    
    def get_player_data(self, player_name):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_database:
            return self.player_database[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, data in self.player_database.items():
            if any(part in known_player for part in name_lower.split()):
                return data
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
        rank = random.randint(40, 150)
        return {
            'rank': rank,
            'age': random.randint(20, 32),
            'form': max(0.4, 0.8 - rank/200),
            'grass_skill': random.uniform(0.5, 0.7),
            'set_tenacity': random.uniform(0.6, 0.8),
            'big_match': max(0.3, 0.8 - rank/150)
        }
    
    def determine_underdog_from_odds(self, player1, player2, odds1, odds2):
        """–ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º"""
        # –ê–Ω–¥–µ—Ä–¥–æ–≥ = –∏–≥—Ä–æ–∫ —Å –ë–û–õ–¨–®–ò–ú–ò –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ (–º–µ–Ω–µ–µ –≤–µ—Ä–æ—è—Ç–Ω–∞—è –ø–æ–±–µ–¥–∞)
        if odds1 > odds2:
            return {
                'underdog': player1,
                'favorite': player2,
                'underdog_odds': odds1,
                'favorite_odds': odds2,
                'is_player1_underdog': True
            }
        else:
            return {
                'underdog': player2,
                'favorite': player1, 
                'underdog_odds': odds2,
                'favorite_odds': odds1,
                'is_player1_underdog': False
            }
    
    def calculate_smart_set_probability(self, underdog_name, favorite_name, underdog_odds, favorite_odds):
        """–£–º–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç"""
        
        underdog_data = self.get_player_data(underdog_name)
        favorite_data = self.get_player_data(favorite_name)
        
        # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏–∑ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
        # –ù–æ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º - –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–∞ –º–∞—Ç—á, –Ω–∞–º –Ω—É–∂–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–µ—Ç–∞
        match_prob = 1.0 / underdog_odds  # –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–∏–≥—Ä–∞—Ç—å –º–∞—Ç—á
        implied_prob = 1.0 / underdog_odds / (1.0 / underdog_odds + 1.0 / favorite_odds)
        
        # 2. –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞: –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç –í–´–®–ï —á–µ–º –≤—ã–∏–≥—Ä–∞—Ç—å –º–∞—Ç—á
        base_set_prob = min(0.85, match_prob + 0.25)  # –î–æ–±–∞–≤–ª—è–µ–º ~25% –∫ —à–∞–Ω—Å—É –º–∞—Ç—á–∞
        
        # 3. –§–∞–∫—Ç–æ—Ä—ã, –≤–ª–∏—è—é—â–∏–µ –Ω–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
        
        # –£–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö - –∫–ª—é—á–µ–≤–æ–π —Ñ–∞–∫—Ç–æ—Ä
        tenacity_factor = underdog_data['set_tenacity'] * 0.3
        
        # –ù–∞–≤—ã–∫–∏ –Ω–∞ —Ç—Ä–∞–≤–µ (–¥–ª—è Wimbledon)
        grass_factor = (underdog_data['grass_skill'] - 0.6) * 0.2
        
        # –û–ø—ã—Ç –±–æ–ª—å—à–∏—Ö –º–∞—Ç—á–µ–π - –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –≤–∞–∂–µ–Ω
        big_match_factor = underdog_data['big_match'] * 0.15
        
        # –§–æ—Ä–º–∞ –∏–≥—Ä–æ–∫–∞
        form_factor = (underdog_data['form'] - 0.65) * 0.2
        
        # –í–æ–∑—Ä–∞—Å—Ç - –º–æ–ª–æ–¥—ã–µ –∏–≥—Ä–æ–∫–∏ —á–∞—Å—Ç–æ –∏–≥—Ä–∞—é—Ç –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è
        age_factor = 0
        if underdog_data['age'] < 25:
            age_factor = 0.05  # –ú–æ–ª–æ–¥–æ—Å—Ç—å = –±–µ—Å—Å—Ç—Ä–∞—à–∏–µ
        elif underdog_data['age'] > 32:
            age_factor = -0.03  # –û–ø—ã—Ç vs —Ñ–∏–∑–∏–∫–∞
        
        # –†–∞–∑–Ω–æ—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ - –Ω–æ –Ω–µ –ª–∏–Ω–µ–π–Ω–æ
        rank_diff = favorite_data['rank'] - underdog_data['rank']
        if rank_diff > 0:  # –§–∞–≤–æ—Ä–∏—Ç –≤—ã—à–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–º
            rank_factor = min(0.1, rank_diff / 500)  # –ú–∞–∫—Å–∏–º—É–º 10% –±–æ–Ω—É—Å–∞
        else:
            rank_factor = max(-0.05, rank_diff / 200)  # –ù–µ–±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ
        
        # –û—Å–æ–±—ã–π —Ñ–∞–∫—Ç–æ—Ä: "upset potential" - —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–µ–Ω—Å–∞—Ü–∏—é
        odds_gap = underdog_odds - favorite_odds
        if odds_gap > 2.0:  # –ë–æ–ª—å—à–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö
            upset_bonus = min(0.1, (odds_gap - 2.0) * 0.03)
        else:
            upset_bonus = 0
        
        # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        final_probability = (base_set_prob + tenacity_factor + grass_factor + 
                           big_match_factor + form_factor + age_factor + 
                           rank_factor + upset_bonus)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø—Ä–µ–¥–µ–ª–∞–º–∏
        final_probability = max(0.25, min(0.92, final_probability))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
        confidence = self._determine_confidence(final_probability, underdog_data, odds_gap)
        
        # –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        factors = self._analyze_key_factors(underdog_data, favorite_data, underdog_odds, final_probability)
        
        return {
            'probability': round(final_probability, 3),
            'confidence': confidence,
            'key_factors': factors,
            'analysis': {
                'base_from_odds': round(base_set_prob, 3),
                'tenacity_boost': round(tenacity_factor, 3),
                'grass_advantage': round(grass_factor, 3),
                'big_match_exp': round(big_match_factor, 3),
                'upset_potential': round(upset_bonus, 3)
            }
        }
    
    def _determine_confidence(self, probability, underdog_data, odds_gap):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –ø—Ä–æ–≥–Ω–æ–∑–µ"""
        # –í—ã—Å–æ–∫–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –µ—Å–ª–∏:
        # - –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –±–ª–∏–∑–∫–∞ –∫ 50%
        # - –ò–≥—Ä–æ–∫ –∏–∑–≤–µ—Å—Ç–µ–Ω —Ö–æ—Ä–æ—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        # - –ï—Å—Ç—å –ª–æ–≥–∏—á–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        
        if probability > 0.75:
            return "Very High"
        elif probability > 0.65:
            return "High" 
        elif probability > 0.55:
            return "Medium"
        else:
            return "Low"
    
    def _analyze_key_factors(self, underdog_data, favorite_data, underdog_odds, probability):
        """–ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–∞"""
        factors = []
        
        # –£–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö
        if underdog_data['set_tenacity'] > 0.75:
            factors.append(f"üî• –í—ã—Å–æ–∫–æ–µ —É–ø–æ—Ä—Å—Ç–≤–æ –≤ —Å–µ—Ç–∞—Ö ({underdog_data['set_tenacity']:.0%})")
        
        # –ù–∞–≤—ã–∫–∏ –Ω–∞ —Ç—Ä–∞–≤–µ
        if underdog_data['grass_skill'] > 0.70:
            factors.append(f"üå± –•–æ—Ä–æ—à–æ –∏–≥—Ä–∞–µ—Ç –Ω–∞ —Ç—Ä–∞–≤–µ")
        
        # –§–æ—Ä–º–∞
        if underdog_data['form'] > 0.70:
            factors.append(f"üìà –•–æ—Ä–æ—à–∞—è —Ç–µ–∫—É—â–∞—è —Ñ–æ—Ä–º–∞")
        elif underdog_data['form'] < 0.60:
            factors.append(f"üìâ –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–æ–π - –Ω–æ –º–æ–∂–µ—Ç —Å—ã–≥—Ä–∞—Ç—å –±–µ–∑ –¥–∞–≤–ª–µ–Ω–∏—è")
        
        # –í–æ–∑—Ä–∞—Å—Ç
        if underdog_data['age'] < 24:
            factors.append(f"‚ö° –ú–æ–ª–æ–¥–æ–π –∏–≥—Ä–æ–∫ - –º–æ–∂–µ—Ç –∏–≥—Ä–∞—Ç—å –±–µ–∑ —Å—Ç—Ä–∞—Ö–∞")
        
        # –û–ø—ã—Ç –±–æ–ª—å—à–∏—Ö –º–∞—Ç—á–µ–π
        if underdog_data['big_match'] > 0.70:
            factors.append(f"üíé –û–ø—ã—Ç –≤–∞–∂–Ω—ã—Ö –º–∞—Ç—á–µ–π")
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if underdog_odds > 4.0:
            factors.append(f"üéØ –ë–æ–ª—å—à–æ–π –∞–Ω–¥–µ—Ä–¥–æ–≥ (–∫–æ—ç—Ñ. {underdog_odds}) - –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Å–µ–Ω—Å–∞—Ü–∏–∏")
        elif underdog_odds > 2.5:
            factors.append(f"‚öñÔ∏è –°—Ä–µ–¥–Ω–∏–π –∞–Ω–¥–µ—Ä–¥–æ–≥ - —Ä–∞–∑—É–º–Ω—ã–µ —à–∞–Ω—Å—ã")
        
        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
        if underdog_data['rank'] > 50 and underdog_data['set_tenacity'] > 0.75:
            factors.append("üöÄ –ù–µ–æ–ø–∞—Å–Ω—ã–π –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É, –Ω–æ —É–ø–æ—Ä–Ω—ã–π –≤ –º–∞—Ç—á–∞—Ö")
        
        if underdog_data['grass_skill'] > favorite_data.get('grass_skill', 0.7):
            factors.append("üèüÔ∏è –õ—É—á—à–µ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ —Ç—Ä–∞–≤–µ")
        
        return factors[:4]  # –ú–∞–∫—Å–∏–º—É–º 4 —Ñ–∞–∫—Ç–æ—Ä–∞

class QualityMatchFilter:
    """–§–∏–ª—å—Ç—Ä –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤"""
    
    def __init__(self, predictor):
        self.predictor = predictor
    
    def is_quality_match(self, underdog_name, favorite_name, underdog_odds, set_probability):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –ª–∏ —ç—Ç–æ –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏"""
        
        # –ö—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞:
        
        # 1. –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Ä–∞–∑—É–º–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        if underdog_odds < 1.8 or underdog_odds > 8.0:
            return False, "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–Ω–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
        
        # 2. –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –Ω–µ —Å–ª–∏—à–∫–æ–º –Ω–∏–∑–∫–∞—è –∏ –Ω–µ —Å–ª–∏—à–∫–æ–º –≤—ã—Å–æ–∫–∞—è
        if set_probability < 0.45 or set_probability > 0.88:
            return False, "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–Ω–µ —Ü–µ–ª–µ–≤–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞"
        
        # 3. –ê–Ω–¥–µ—Ä–¥–æ–≥ –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ö–æ—Ç—è –±—ã –∫–∞–∫–∏–µ-—Ç–æ –∫–æ–∑—ã—Ä–∏
        underdog_data = self.predictor.get_player_data(underdog_name)
        
        quality_indicators = 0
        
        if underdog_data['set_tenacity'] > 0.70:
            quality_indicators += 1
        if underdog_data['form'] > 0.65:
            quality_indicators += 1  
        if underdog_data['grass_skill'] > 0.65:
            quality_indicators += 1
        if underdog_data['big_match'] > 0.60:
            quality_indicators += 1
        if underdog_data['age'] < 26:  # –ú–æ–ª–æ–¥–æ—Å—Ç—å = –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
            quality_indicators += 1
        
        if quality_indicators < 2:
            return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —É –∞–Ω–¥–µ—Ä–¥–æ–≥–∞"
        
        # 4. –†–∞–∑—É–º–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞—Ö (–Ω–µ —Å–ª–∏—à–∫–æ–º —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è)
        if underdog_odds > 6.0:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –Ω—É–∂–Ω—ã –æ—Å–æ–±—ã–µ —É—Å–ª–æ–≤–∏—è
            if underdog_data['set_tenacity'] < 0.75 or underdog_data['form'] < 0.60:
                return False, "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∞–Ω–¥–µ—Ä–¥–æ–≥ –±–µ–∑ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –∫–∞—á–µ—Å—Ç–≤"
        
        return True, "–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –º–∞—Ç—á –¥–ª—è —Å—Ç–∞–≤–∫–∏"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
predictor = SmartUnderdogPredictor()
quality_filter = QualityMatchFilter(predictor)

def generate_quality_matches():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤"""
    
    # –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –º–∞—Ç—á–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
    potential_matches = potential_matches = get_real_wimbledon_matches()
    
    quality_matches = []
    
    for match_data in potential_matches:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
        underdog_info = predictor.determine_underdog_from_odds(
            match_data['player1'], match_data['player2'],
            match_data['odds1'], match_data['odds2']
        )
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç
        prediction = predictor.calculate_smart_set_probability(
            underdog_info['underdog'],
            underdog_info['favorite'], 
            underdog_info['underdog_odds'],
            underdog_info['favorite_odds']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–∞
        is_quality, reason = quality_filter.is_quality_match(
            underdog_info['underdog'],
            underdog_info['favorite'],
            underdog_info['underdog_odds'],
            prediction['probability']
        )
        
        if is_quality:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            match = {
                'id': f"quality_{len(quality_matches)+1}",
                'player1': match_data['player1'],
                'player2': match_data['player2'], 
                'tournament': match_data['tournament'],
                'surface': match_data['surface'],
                'round': match_data['round'],
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': f"{random.randint(12, 18)}:00",
                
                # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                'odds': {
                    'player1': match_data['odds1'],
                    'player2': match_data['odds2']
                },
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞–Ω–¥–µ—Ä–¥–æ–≥–µ
                'underdog_analysis': {
                    'underdog': underdog_info['underdog'],
                    'favorite': underdog_info['favorite'],
                    'underdog_odds': underdog_info['underdog_odds'],
                    'prediction': prediction,
                    'quality_rating': 'HIGH' if prediction['probability'] > 0.70 else 'MEDIUM'
                },
                
                'focus': f"üíé {underdog_info['underdog']} –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç",
                'recommendation': f"{prediction['probability']:.0%} —à–∞–Ω—Å –≤–∑—è—Ç—å —Å–µ—Ç"
            }
            
            quality_matches.append(match)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ (–ª—É—á—à–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤—ã–º–∏)
    quality_matches.sort(key=lambda x: x['underdog_analysis']['prediction']['probability'], reverse=True)
    
    return quality_matches

@app.route('/')
def dashboard():
    """Dashboard —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤"""
    return '''<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üéæ Smart Underdog Set Predictor</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { 
            font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, sans-serif;
            background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
            color: white; min-height: 100vh; padding: 20px;
        }
        .container { max-width: 1200px; margin: 0 auto; }
        .header { 
            background: rgba(255, 255, 255, 0.05); backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.1); border-radius: 24px;
            padding: 32px; margin-bottom: 32px; text-align: center;
        }
        .main-title {
            font-size: 2.8rem; font-weight: 700; margin-bottom: 16px;
            background: linear-gradient(135deg, #ff6b6b, #ffd93d, #6bcf7f);
            background-clip: text; -webkit-background-clip: text; -webkit-text-fill-color: transparent;
        }
        .subtitle { font-size: 1.2rem; opacity: 0.8; margin-bottom: 32px; }
        .stats-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(180px, 1fr)); gap: 20px; }
        .stat-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px; padding: 20px; text-align: center; transition: all 0.3s ease;
        }
        .stat-card:hover { transform: translateY(-4px); background: rgba(255, 255, 255, 0.08); }
        .stat-value { font-size: 2.2rem; font-weight: 700; margin-bottom: 8px; color: #6bcf7f; }
        .stat-label { font-size: 0.9rem; opacity: 0.7; text-transform: uppercase; }
        .controls { 
            background: rgba(255, 255, 255, 0.05); border-radius: 20px; 
            padding: 24px; margin-bottom: 32px; text-align: center;
        }
        .btn { 
            background: linear-gradient(135deg, #667eea, #764ba2); color: white;
            border: none; padding: 14px 28px; border-radius: 12px; font-size: 1rem;
            cursor: pointer; margin: 8px; transition: all 0.3s ease; font-weight: 600;
        }
        .btn:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4); }
        .matches-container { display: grid; gap: 24px; }
        .match-card { 
            background: rgba(255, 255, 255, 0.05); border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 20px; padding: 28px; position: relative; transition: all 0.3s ease;
        }
        .match-card:hover { transform: translateY(-4px); border-color: rgba(107, 207, 127, 0.3); }
        .quality-badge {
            position: absolute; top: 16px; right: 16px; 
            background: linear-gradient(135deg, #ff6b6b, #ffd93d); color: #1a1a2e;
            padding: 6px 12px; border-radius: 20px; font-size: 0.8rem; font-weight: 700;
        }
        .match-header { display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 20px; }
        .players { font-size: 1.5rem; font-weight: 600; }
        .underdog-highlight { color: #ffd93d; font-weight: 700; }
        .favorite-text { opacity: 0.7; }
        .prediction-box { 
            background: linear-gradient(135deg, rgba(107, 207, 127, 0.1), rgba(255, 217, 61, 0.1));
            border: 1px solid rgba(107, 207, 127, 0.3); border-radius: 16px; 
            padding: 20px; margin: 20px 0;
        }
        .probability { font-size: 2.5rem; font-weight: 700; color: #6bcf7f; }
        .confidence { margin-top: 8px; font-size: 1.1rem; opacity: 0.8; }
        .factors-list { margin-top: 16px; }
        .factor-item { 
            background: rgba(255, 255, 255, 0.05); margin: 8px 0; padding: 12px 16px;
            border-radius: 8px; font-size: 0.95rem; border-left: 3px solid #6bcf7f;
        }
        .odds-display { display: flex; gap: 20px; margin-top: 16px; }
        .odds-item { 
            background: rgba(255, 255, 255, 0.05); padding: 12px 16px; 
            border-radius: 10px; text-align: center; flex: 1;
        }
        .loading { 
            text-align: center; padding: 80px; background: rgba(255, 255, 255, 0.05);
            border-radius: 20px; font-size: 1.2rem;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="main-title">üéæ Smart Underdog Set Predictor</div>
            <div class="subtitle">–ù–∞—Ö–æ–¥–∏–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤, —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç</div>
            
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value" id="quality-matches">-</div>
                    <div class="stat-label">Quality Matches</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="avg-probability">-</div>
                    <div class="stat-label">Avg Set Probability</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="strong-underdogs">-</div>
                    <div class="stat-label">Strong Underdogs</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value" id="system-status">‚úÖ</div>
                    <div class="stat-label">System Status</div>
                </div>
            </div>
        </div>
        
        <div class="controls">
            <h3>üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏</h3>
            <p style="margin: 12px 0; opacity: 0.8;">–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ –≥–¥–µ –∞–Ω–¥–µ—Ä–¥–æ–≥ –∏–º–µ–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —à–∞–Ω—Å—ã –≤–∑—è—Ç—å —Å–µ—Ç</p>
            <button class="btn" onclick="loadQualityMatches()">üîç –ù–∞–π—Ç–∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤</button>
            <button class="btn" onclick="testPrediction()">üß™ –¢–µ—Å—Ç –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞</button>
            <button class="btn" onclick="showAnalysis()">üìä –ü–æ–∫–∞–∑–∞—Ç—å –∞–Ω–∞–ª–∏–∑</button>
        </div>
        
        <div id="matches-container" class="matches-container">
            <div class="loading">
                <h3>üéØ –£–º–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≥–æ—Ç–æ–≤–∞</h3>
                <p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ —Å–µ—Ç—ã</p>
            </div>
        </div>
    </div>
    
    <script>
        const API_BASE = window.location.origin + '/api';
        
        async function loadQualityMatches() {
            const container = document.getElementById('matches-container');
            container.innerHTML = '<div class="loading"><h3>üîç –ü–æ–∏—Å–∫ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤...</h3><p>–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤</p></div>';
            
            try {
                const response = await fetch(`${API_BASE}/quality-matches`);
                const data = await response.json();
                
                if (data.success && data.matches && data.matches.length > 0) {
                    updateStats(data.stats);
                    displayQualityMatches(data.matches);
                } else {
                    container.innerHTML = '<div class="loading"><h3>‚ùå –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</h3></div>';
                }
            } catch (error) {
                console.error('Error:', error);
                container.innerHTML = '<div class="loading"><h3>‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3></div>';
            }
        }
        
        function updateStats(stats) {
            document.getElementById('quality-matches').textContent = stats.total_matches || '0';
            document.getElementById('avg-probability').textContent = stats.avg_probability || '-';
            document.getElementById('strong-underdogs').textContent = stats.strong_underdogs || '0';
        }
        
        function displayQualityMatches(matches) {
            const container = document.getElementById('matches-container');
            
            let html = `
                <div style="background: linear-gradient(135deg, rgba(107, 207, 127, 0.1), rgba(255, 217, 61, 0.1)); 
                           border: 1px solid rgba(107, 207, 127, 0.3); border-radius: 20px; padding: 24px; margin-bottom: 32px; text-align: center;">
                    <h2>üéØ –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –í–û–ó–ú–û–ñ–ù–û–°–¢–ò –ù–ê–ô–î–ï–ù–´</h2>
                    <p>–û—Ç–æ–±—Ä–∞–Ω—ã —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ —Å —Ä–µ–∞–ª—å–Ω—ã–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–æ–º –¥–ª—è –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ –≤–∑—è—Ç—å —Å–µ—Ç</p>
                </div>
            `;
            
            matches.forEach((match, index) => {
                const analysis = match.underdog_analysis;
                const prediction = analysis.prediction;
                
                html += `
                    <div class="match-card">
                        <div class="quality-badge">${analysis.quality_rating}</div>
                        
                        <div class="match-header">
                            <div>
                                <div class="players">
                                    ${match.player1 === analysis.underdog ? 
                                        `<span class="underdog-highlight">${match.player1}</span> vs <span class="favorite-text">${match.player2}</span>` :
                                        `<span class="favorite-text">${match.player1}</span> vs <span class="underdog-highlight">${match.player2}</span>`
                                    }
                                </div>
                                <div style="margin-top: 8px; opacity: 0.8;">
                                    üèÜ ${match.tournament} ‚Ä¢ ${match.surface} ‚Ä¢ ${match.round}
                                </div>
                                <div style="margin-top: 4px; font-size: 0.9rem; opacity: 0.7;">
                                    üìÖ ${match.date} ${match.time}
                                </div>
                            </div>
                        </div>
                        
                        <div style="text-align: center; margin: 20px 0; padding: 16px; background: rgba(255, 217, 61, 0.1); border-radius: 12px;">
                            <div style="font-size: 1.4rem; font-weight: 600; color: #ffd93d;">
                                ${match.focus}
                            </div>
                            <div style="margin-top: 8px; font-size: 1.1rem; opacity: 0.9;">
                                ${match.recommendation}
                            </div>
                        </div>
                        
                        <div class="prediction-box">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <div style="font-size: 1.2rem; margin-bottom: 8px;">üéØ –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç:</div>
                                    <div class="probability">${(prediction.probability * 100).toFixed(0)}%</div>
                                    <div class="confidence">–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${prediction.confidence}</div>
                                </div>
                                <div style="text-align: right;">
                                    <div style="font-size: 0.9rem; opacity: 0.8;">–ê–Ω–¥–µ—Ä–¥–æ–≥ –∫–æ—ç—Ñ:</div>
                                    <div style="font-size: 2rem; font-weight: 700; color: #ffd93d;">
                                        ${analysis.underdog_odds}
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        ${prediction.key_factors && prediction.key_factors.length > 0 ? `
                        <div class="factors-list">
                            <div style="font-size: 1.1rem; font-weight: 600; margin-bottom: 12px;">üîç –ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:</div>
                            ${prediction.key_factors.map(factor => `<div class="factor-item">${factor}</div>`).join('')}
                        </div>
                        ` : ''}
                        
                        <div class="odds-display">
                            <div class="odds-item">
                                <div style="font-weight: 600;">${match.player1}</div>
                                <div style="font-size: 1.5rem; color: ${match.player1 === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player1}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player1 === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                            <div class="odds-item">
                                <div style="font-weight: 600;">${match.player2}</div>
                                <div style="font-size: 1.5rem; color: ${match.player2 === analysis.underdog ? '#ffd93d' : '#6bcf7f'};">
                                    ${match.odds.player2}
                                </div>
                                <div style="font-size: 0.8rem; opacity: 0.7;">
                                    ${match.player2 === analysis.underdog ? '–ê–ù–î–ï–†–î–û–ì' : '–§–ê–í–û–†–ò–¢'}
                                </div>
                            </div>
                        </div>
                        
                        <div style="margin-top: 16px; text-align: center; font-size: 0.9rem; opacity: 0.6;">
                            üí° –°—Ç—Ä–∞—Ç–µ–≥–∏—è: –°—Ç–∞–≤–∫–∞ –Ω–∞ ${analysis.underdog} –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç
                        </div>
                    </div>
                `;
            });
            
            container.innerHTML = html;
        }
        
        async function testPrediction() {
            try {
                const response = await fetch(`${API_BASE}/test-underdog`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({
                        player1: 'Ben Shelton',
                        player2: 'Novak Djokovic',
                        odds1: 3.20,
                        odds2: 1.35
                    })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    const analysis = data.analysis;
                    alert(`üéæ –¢–µ—Å—Ç –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞:\\n\\n` +
                          `–ê–Ω–¥–µ—Ä–¥–æ–≥: ${analysis.underdog}\\n` +
                          `–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: ${analysis.underdog_odds}\\n` +
                          `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∑—è—Ç—å —Å–µ—Ç: ${(analysis.prediction.probability * 100).toFixed(0)}%\\n` +
                          `–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.prediction.confidence}\\n\\n` +
                          `–ö–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã:\\n${analysis.prediction.key_factors.slice(0,2).join('\\n')}\\n\\n` +
                          `‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!`);
                } else {
                    alert(`‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: ${data.error}`);
                }
            } catch (error) {
                alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
        }
        
        async function showAnalysis() {
            alert(`üìä –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´:\\n\\n` +
                  `üéØ –¶–µ–ª—å: –ù–∞–π—Ç–∏ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤ —Å–ø–æ—Å–æ–±–Ω—ã—Ö –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã 1 —Å–µ—Ç\\n` +
                  `‚öñÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: –ê–Ω–¥–µ—Ä–¥–æ–≥ = –±–æ–ª—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç\\n` +
                  `üîç –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: –¢–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏\\n` +
                  `üìà –£–º–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã: –û—Ç 30% –¥–æ 90% –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–∏–ª—ã\\n` +
                  `üíé –§–∞–∫—Ç–æ—Ä—ã: –£–ø–æ—Ä—Å—Ç–≤–æ, –Ω–∞–≤—ã–∫–∏, —Ñ–æ—Ä–º–∞, –æ–ø—ã—Ç\\n\\n` +
                  `‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!`);
        }
        
        // –ê–≤—Ç–æ–∑–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        document.addEventListener('DOMContentLoaded', function() {
            setTimeout(loadQualityMatches, 1000);
        });
    </script>
</body>
</html>'''

@app.route('/api/quality-matches')
def get_quality_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –Ω–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤"""
    try:
        logger.info("üîç Searching for quality underdog opportunities...")
        
        quality_matches = generate_quality_matches()
        
        if not quality_matches:
            return jsonify({
                'success': False,
                'message': 'No quality matches found',
                'matches': []
            })
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        probabilities = [m['underdog_analysis']['prediction']['probability'] for m in quality_matches]
        strong_underdogs = len([p for p in probabilities if p > 0.70])
        
        stats = {
            'total_matches': len(quality_matches),
            'avg_probability': f"{(sum(probabilities) / len(probabilities) * 100):.0f}%",
            'strong_underdogs': strong_underdogs,
            'quality_rating': 'HIGH' if strong_underdogs > 2 else 'GOOD'
        }
        
        logger.info(f"‚úÖ Found {len(quality_matches)} quality matches, {strong_underdogs} strong underdogs")
        
        return jsonify({
            'success': True,
            'matches': quality_matches,
            'stats': stats,
            'system_info': {
                'focus': 'underdog_set_probability',
                'quality_filter': 'active',
                'odds_logic': 'corrected'
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Error getting quality matches: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/test-underdog', methods=['POST'])
def test_underdog_prediction():
    """–¢–µ—Å—Ç –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞ –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        player1 = data.get('player1', 'Ben Shelton')
        player2 = data.get('player2', 'Novak Djokovic') 
        odds1 = data.get('odds1', 3.20)
        odds2 = data.get('odds2', 1.35)
        
        logger.info(f"üß™ Testing underdog prediction: {player1} ({odds1}) vs {player2} ({odds2})")
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–Ω–¥–µ—Ä–¥–æ–≥–∞
        underdog_info = predictor.determine_underdog_from_odds(player1, player2, odds1, odds2)
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        prediction = predictor.calculate_smart_set_probability(
            underdog_info['underdog'],
            underdog_info['favorite'],
            underdog_info['underdog_odds'],
            underdog_info['favorite_odds']
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
        is_quality, reason = quality_filter.is_quality_match(
            underdog_info['underdog'],
            underdog_info['favorite'],
            underdog_info['underdog_odds'],
            prediction['probability']
        )
        
        analysis = {
            'underdog': underdog_info['underdog'],
            'favorite': underdog_info['favorite'],
            'underdog_odds': underdog_info['underdog_odds'],
            'favorite_odds': underdog_info['favorite_odds'],
            'prediction': prediction,
            'is_quality_match': is_quality,
            'quality_reason': reason
        }
        
        return jsonify({
            'success': True,
            'analysis': analysis,
            'test_info': {
                'input': {'player1': player1, 'player2': player2, 'odds1': odds1, 'odds2': odds2},
                'logic': 'underdog = higher odds',
                'focus': 'set_probability'
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Test error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/health')
def health_check():
    """Health check"""
    return jsonify({
        'status': 'healthy',
        'system': 'smart_underdog_predictor',
        'focus': 'quality_underdog_set_predictions',
        'logic': 'corrected_odds_interpretation',
        'timestamp': datetime.now().isoformat()
    })

@app.route('/api/stats')
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        return jsonify({
            'success': True,
            'stats': {
                'system_type': 'Smart Underdog Predictor',
                'focus': 'Set probability for underdogs',
                'quality_filter': 'Active',
                'odds_logic': 'Corrected (higher odds = underdog)',
                'target_probability_range': '45% - 88%',
                'target_odds_range': '1.8 - 8.0',
                'last_update': datetime.now().isoformat()
            }
        })
    except Exception as e:
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

if __name__ == '__main__':
    print("üéæ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô TENNIS BACKEND - SMART UNDERDOG PREDICTOR")
    print("=" * 70)
    print("üéØ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("‚Ä¢ ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–Ω–¥–µ—Ä–¥–æ–≥–∞ (–±–æ–ª—å—à–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç)")
    print("‚Ä¢ ‚úÖ –§–æ–∫—É—Å –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö")
    print("‚Ä¢ ‚úÖ –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ –ø—Ä–æ—Ü–µ–Ω—Ç—ã (30%-90%)")
    print("‚Ä¢ ‚úÖ –£–º–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç—á–µ–π")
    print("‚Ä¢ ‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –≤–∑—è—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å–µ—Ç")
    print("=" * 70)
    print(f"üåê Dashboard: http://localhost:5001")
    print("üéæ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–Ω–¥–µ—Ä–¥–æ–≥–æ–≤!")
    print("=" * 70)
    
    try:
        app.run(host='0.0.0.0', port=5001, debug=False, threaded=True)
    except Exception as e:
        print(f"‚ùå Server error: {e}")