#!/usr/bin/env python3
"""
üéæ TENNIS BACKEND - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
–ü–æ–ª–Ω—ã–π backend —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ ML –º–æ–¥–µ–ª—è–º–∏ –∏ API
"""

from flask import Flask, jsonify, request, render_template
from flask_cors import CORS
import os
import logging
import json
from datetime import datetime
from typing import Dict

# Import error handling
try:
    from error_handler import get_error_handler
    from config_loader import load_secure_config
    ERROR_HANDLING_AVAILABLE = True
    error_handler = get_error_handler()
    print("‚úÖ Error handling and secure config loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è Error handling not available: {e}")
    ERROR_HANDLING_AVAILABLE = False
    error_handler = None

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
try:
    from real_tennis_predictor_integration import RealTennisPredictor
    REAL_PREDICTOR_AVAILABLE = True
    print("‚úÖ Real ML predictor imported")
except ImportError as e:
    print(f"‚ö†Ô∏è Real predictor not available: {e}")
    REAL_PREDICTOR_AVAILABLE = False

try:
    from tennis_prediction_module import TennisPredictionService
    PREDICTION_SERVICE_AVAILABLE = True
    print("‚úÖ Prediction service imported")
except ImportError as e:
    print(f"‚ö†Ô∏è Prediction service not available: {e}")
    PREDICTION_SERVICE_AVAILABLE = False

try:
    from correct_odds_api_integration import TennisOddsIntegrator
    ODDS_API_AVAILABLE = True
    print("‚úÖ Odds API integration loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è Odds API integration not available: {e}")
    ODDS_API_AVAILABLE = False

try:
    from api_economy_patch import economical_tennis_request, init_api_economy, get_api_usage
    API_ECONOMY_AVAILABLE = True
    print("‚úÖ API Economy loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è API Economy not available: {e}")
    API_ECONOMY_AVAILABLE = False

try:
    from enhanced_universal_collector import EnhancedUniversalCollector
    from universal_tennis_data_collector import UniversalOddsCollector
    ENHANCED_COLLECTOR_AVAILABLE = True
    print("‚úÖ Enhanced Universal Collector loaded (includes TennisExplorer + RapidAPI)")
except ImportError as e:
    print(f"‚ö†Ô∏è Enhanced collector not available: {e}")
    try:
        from universal_tennis_data_collector import UniversalTennisDataCollector, UniversalOddsCollector
        UNIVERSAL_COLLECTOR_AVAILABLE = True
        ENHANCED_COLLECTOR_AVAILABLE = False
        print("‚úÖ Universal data collector loaded (fallback)")
    except ImportError as e2:
        print(f"‚ö†Ô∏è Universal collector not available: {e2}")
        UNIVERSAL_COLLECTOR_AVAILABLE = False
        ENHANCED_COLLECTOR_AVAILABLE = False

# Import daily API scheduler
try:
    from daily_api_scheduler import init_daily_scheduler, start_daily_scheduler
    DAILY_SCHEDULER_AVAILABLE = True
    print("‚úÖ Daily API scheduler loaded")
except ImportError as e:
    print(f"‚ö†Ô∏è Daily scheduler not available: {e}")
    DAILY_SCHEDULER_AVAILABLE = False

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
CORS(app)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
config = None
real_predictor = None
prediction_service = None
odds_integrator = None
enhanced_collector = None
universal_collector = None
odds_collector = None
daily_scheduler = None

def filter_quality_matches(matches):
    """–§–∏–ª—å—Ç—Ä —Ç–æ–ª—å–∫–æ ATP/WTA –æ–¥–∏–Ω–æ—á–Ω—ã–µ"""
    filtered = []
    for match in matches:
        sport_title = match.get('sport_title', '')
        if ('ATP' in sport_title or 'WTA' in sport_title):
            if not any(word in sport_title.lower() for word in ['doubles', 'double']):
                filtered.append(match)
    return filtered

def load_config():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    global config
    try:
        if ERROR_HANDLING_AVAILABLE:
            # Use secure config loader with environment variables
            config = load_secure_config()
            logger.info("‚úÖ Secure configuration loaded with environment variables")
        else:
            # Fallback to basic config loading
            if os.path.exists('config.json'):
                with open('config.json', 'r') as f:
                    config = json.load(f)
                logger.info("‚úÖ Configuration loaded")
            else:
                config = {
                    "data_sources": {
                        "the_odds_api": {
                            "enabled": False,
                            "api_key": ""
                        }
                    },
                    "model_settings": {
                        "min_confidence_threshold": 0.55
                    }
                }
                logger.warning("‚ö†Ô∏è No config.json found, using defaults")
    except Exception as e:
        if error_handler:
            error_handler.log_error("Config", e, {"config_file": "config.json"})
        else:
            logger.error(f"‚ùå Config error: {e}")
        config = {"data_sources": {"the_odds_api": {"enabled": False}}}

def initialize_services():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
    global real_predictor, prediction_service, odds_integrator, enhanced_collector, universal_collector, odds_collector, daily_scheduler
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Real Tennis Predictor
    if REAL_PREDICTOR_AVAILABLE:
        try:
            real_predictor = RealTennisPredictor()
            logger.info("‚úÖ Real Tennis Predictor initialized")
        except Exception as e:
            logger.error(f"‚ùå Real predictor initialization failed: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Prediction Service
    if PREDICTION_SERVICE_AVAILABLE:
        try:
            prediction_service = TennisPredictionService()
            if prediction_service.load_models():
                logger.info("‚úÖ Tennis Prediction Service initialized")
            else:
                prediction_service = None
                logger.warning("‚ö†Ô∏è Prediction service models not loaded")
        except Exception as e:
            logger.error(f"‚ùå Prediction service initialization failed: {e}")
            prediction_service = None
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º API Economy
    if API_ECONOMY_AVAILABLE and config.get('data_sources', {}).get('the_odds_api', {}).get('enabled'):
        api_key = config['data_sources']['the_odds_api'].get('api_key', '')
        if api_key and api_key != 'YOUR_API_KEY':
            try:
                init_api_economy(api_key, max_per_hour=30, cache_minutes=20)
                logger.info("‚úÖ API Economy initialized")
            except Exception as e:
                logger.error(f"‚ùå API Economy initialization failed: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Odds API
    if ODDS_API_AVAILABLE and config.get('data_sources', {}).get('the_odds_api', {}).get('enabled'):
        api_key = config['data_sources']['the_odds_api'].get('api_key', '')
        if api_key and api_key != 'YOUR_API_KEY':
            try:
                odds_integrator = TennisOddsIntegrator(api_key)
                logger.info("‚úÖ Odds API integrator initialized")
            except Exception as e:
                logger.error(f"‚ùå Odds API initialization failed: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Enhanced Universal Collector (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if ENHANCED_COLLECTOR_AVAILABLE:
        try:
            enhanced_collector = EnhancedUniversalCollector()
            odds_collector = UniversalOddsCollector()
            logger.info("‚úÖ Enhanced Universal Collector initialized (TennisExplorer + RapidAPI + Universal)")
        except Exception as e:
            logger.error(f"‚ùå Enhanced collector initialization failed: {e}")
    
    # Fallback: –æ–±—ã—á–Ω—ã–π Universal Collector
    elif UNIVERSAL_COLLECTOR_AVAILABLE:
        try:
            universal_collector = UniversalTennisDataCollector()
            odds_collector = UniversalOddsCollector()
            logger.info("‚úÖ Universal collectors initialized (fallback)")
        except Exception as e:
            logger.error(f"‚ùå Universal collector initialization failed: {e}")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Daily API Scheduler
    if DAILY_SCHEDULER_AVAILABLE:
        try:
            daily_scheduler = init_daily_scheduler()
            start_daily_scheduler()
            logger.info("‚úÖ Daily API scheduler initialized and started")
        except Exception as e:
            logger.error(f"‚ùå Daily scheduler initialization failed: {e}")

class UnderdogAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä underdog —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    def __init__(self):
        self.player_rankings = {
            # ATP –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ä–µ–π—Ç–∏–Ω–≥–∏
            "jannik sinner": 1, "carlos alcaraz": 2, "alexander zverev": 3,
            "daniil medvedev": 4, "novak djokovic": 5, "andrey rublev": 6,
            "casper ruud": 7, "holger rune": 8, "grigor dimitrov": 9,
            "stefanos tsitsipas": 10, "taylor fritz": 11, "tommy paul": 12,
            "alex de minaur": 13, "ben shelton": 14, "ugo humbert": 15,
            "lorenzo musetti": 16, "sebastian baez": 17, "frances tiafoe": 18,
            "felix auger-aliassime": 19, "arthur fils": 20,
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–û: Cobolli —Ç–µ–ø–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ #32
            "flavio cobolli": 32, "brandon nakashima": 45, "bu yunchaokete": 85,
            "matteo berrettini": 35, "cameron norrie": 40, "sebastian korda": 25,
            "francisco cerundolo": 30, "alejandro tabilo": 28,
            "fabio fognini": 85, "arthur rinderknech": 55, "yannick hanfmann": 95,
            "jacob fearnley": 320, "joao fonseca": 145,
            
            # WTA —Ä–µ–π—Ç–∏–Ω–≥–∏
            "aryna sabalenka": 1, "iga swiatek": 2, "coco gauff": 3,
            "jessica pegula": 4, "elena rybakina": 5, "qinwen zheng": 6,
            "jasmine paolini": 7, "emma navarro": 8, "daria kasatkina": 9,
            "barbora krejcikova": 10, "paula badosa": 11, "danielle collins": 12,
            "jelena ostapenko": 13, "madison keys": 14, "beatriz haddad maia": 15,
            "liudmila samsonova": 16, "donna vekic": 17, "mirra andreeva": 18,
            "marta kostyuk": 19, "diana shnaider": 20,
            
            "renata zarazua": 80, "amanda anisimova": 35, "katie boulter": 28,
            "emma raducanu": 25, "caroline dolehide": 85, "carson branstine": 125,
        }
    
    def get_player_ranking(self, player_name: str) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –∏–≥—Ä–æ–∫–∞"""
        name_lower = player_name.replace('üéæ ', '').lower().strip()
        
        # –ü—Ä—è–º–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name_lower in self.player_rankings:
            return self.player_rankings[name_lower]
        
        # –ü–æ–∏—Å–∫ –ø–æ —á–∞—Å—Ç—è–º –∏–º–µ–Ω–∏
        for known_player, rank in self.player_rankings.items():
            if any(part in known_player for part in name_lower.split()):
                return rank
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return 50
    
    def identify_underdog_scenario(self, player1: str, player2: str) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å underdog —Å—Ü–µ–Ω–∞—Ä–∏–π"""
        p1_rank = self.get_player_ranking(player1)
        p2_rank = self.get_player_ranking(player2)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º underdog
        if p1_rank > p2_rank:
            underdog = player1
            favorite = player2
            underdog_rank = p1_rank
            favorite_rank = p2_rank
        else:
            underdog = player2
            favorite = player1
            underdog_rank = p2_rank
            favorite_rank = p1_rank
        
        rank_gap = underdog_rank - favorite_rank
        
        # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è underdog
        if rank_gap >= 50:
            underdog_type = "Major Underdog"
            base_probability = 0.25
        elif rank_gap >= 20:
            underdog_type = "Significant Underdog"
            base_probability = 0.35
        elif rank_gap >= 10:
            underdog_type = "Moderate Underdog"
            base_probability = 0.42
        else:
            underdog_type = "Minor Underdog"
            base_probability = 0.48
        
        return {
            'underdog': underdog,
            'favorite': favorite,
            'underdog_rank': underdog_rank,
            'favorite_rank': favorite_rank,
            'rank_gap': rank_gap,
            'underdog_type': underdog_type,
            'base_probability': base_probability
        }
    
    def calculate_underdog_probability(self, player1: str, player2: str, 
                                    tournament: str, surface: str) -> Dict:
        """–†–∞—Å—á–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –¥–ª—è underdog"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º underdog —Å—Ü–µ–Ω–∞—Ä–∏–π
        scenario = self.identify_underdog_scenario(player1, player2)
        
        # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        probability = scenario['base_probability']
        
        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        key_factors = []
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        surface_bonuses = {
            'Grass': {'specialists': ['novak djokovic'], 'bonus': 0.08},
            'Clay': {'specialists': ['carlos alcaraz'], 'bonus': 0.06},
            'Hard': {'specialists': ['daniil medvedev', 'jannik sinner'], 'bonus': 0.04}
        }
        
        underdog_lower = scenario['underdog'].lower()
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º surface_bonuses –≤–º–µ—Å—Ç–æ surface_bonus
        if surface in surface_bonuses:
            specialists = surface_bonuses[surface]['specialists']
            bonus = surface_bonuses[surface]['bonus']
            
            if any(spec in underdog_lower for spec in specialists):
                probability += bonus
                key_factors.append(f"Specialist on {surface}")
        
        # –¢—É—Ä–Ω–∏—Ä–Ω–æ–µ –¥–∞–≤–ª–µ–Ω–∏–µ
        if any(major in tournament.lower() for major in ['wimbledon', 'us open', 'french open', 'australian open']):
            probability += 0.03
            key_factors.append("Grand Slam pressure can level playing field")
        
        # –§–æ—Ä–º–∞ (—Å–∏–º—É–ª—è—Ü–∏—è)
        import random
        random.seed(hash(player1 + player2) % 1000)
        form_factor = random.uniform(-0.05, 0.10)
        probability += form_factor
        
        if form_factor > 0.05:
            key_factors.append("Hot streak advantage")
        elif form_factor < -0.03:
            key_factors.append("Recent form concerns")
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        probability = max(0.15, min(probability, 0.65))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        if probability > 0.45:
            quality = "Excellent"
            confidence = "High"
        elif probability > 0.35:
            quality = "Good"
            confidence = "Medium"
        else:
            quality = "Fair"
            confidence = "Low"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑—É–µ–º—É—é ML —Å–∏—Å—Ç–µ–º—É
        ml_system_used = "Unknown"
        if real_predictor and real_predictor.prediction_service:
            ml_system_used = "REAL_ML_MODEL"
        elif prediction_service:
            ml_system_used = "PREDICTION_SERVICE"
        else:
            ml_system_used = "ADVANCED_SIMULATION"
        
        return {
            'underdog_probability': probability,
            'quality': quality,
            'confidence': confidence,
            'ml_system_used': ml_system_used,
            'prediction_type': 'UNDERDOG_ANALYSIS',
            'key_factors': key_factors,
            'underdog_scenario': scenario
        }

def format_match_for_dashboard(match_data: Dict, source: str = "unknown") -> Dict:
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞ –¥–ª—è dashboard"""
    try:
        # –ë–∞–∑–æ–≤—ã–µ –ø–æ–ª—è
        formatted = {
            'id': match_data.get('id', f"match_{datetime.now().timestamp()}"),
            'player1': match_data.get('player1', 'Unknown Player 1'),
            'player2': match_data.get('player2', 'Unknown Player 2'),
            'tournament': match_data.get('tournament', 'Unknown Tournament'),
            'surface': match_data.get('surface', 'Hard'),
            'date': match_data.get('date', datetime.now().strftime('%Y-%m-%d')),
            'time': match_data.get('time', 'TBD'),
            'round': match_data.get('round', 'R32'),
            'court': match_data.get('court', 'Court 1'),
            'status': match_data.get('status', 'upcoming'),
            'source': source
        }
        
        # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å, –ø–æ—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
        formatted['player1'] = formatted['player1'].replace('üéæ ', '')
        formatted['player2'] = formatted['player2'].replace('üéæ ', '')
        formatted['tournament'] = formatted['tournament'].replace('üèÜ ', '')
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏ –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
        formatted['player1'] = f"üéæ {formatted['player1']}"
        formatted['player2'] = f"üéæ {formatted['player2']}"
        formatted['tournament'] = f"üèÜ {formatted['tournament']}"
        
        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        odds = match_data.get('odds', {})
        formatted['odds'] = {
            'player1': odds.get('player1', 2.0),
            'player2': odds.get('player2', 2.0)
        }
        
        # Underdog –∞–Ω–∞–ª–∏–∑
        underdog_analysis = match_data.get('underdog_analysis', {})
        formatted['underdog_analysis'] = underdog_analysis
        
        # Prediction –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å dashboard
        prediction = match_data.get('prediction', {})
        formatted['prediction'] = {
            'probability': prediction.get('probability', underdog_analysis.get('underdog_probability', 0.5)),
            'confidence': prediction.get('confidence', underdog_analysis.get('confidence', 'Medium'))
        }
        
        # Key factors
        formatted['key_factors'] = match_data.get('key_factors', underdog_analysis.get('key_factors', []))
        formatted['prediction_type'] = match_data.get('prediction_type', underdog_analysis.get('prediction_type', 'ANALYSIS'))
        
        # Debug info
        formatted['debug_info'] = {
            'original_source': source,
            'has_underdog_analysis': bool(underdog_analysis),
            'original_status': match_data.get('status'),
            'processed_at': datetime.now().isoformat()
        }
        
        return formatted
        
    except Exception as e:
        logger.error(f"‚ùå Error formatting match data: {e}")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        return {
            'id': 'error_match',
            'player1': 'üéæ Error Player 1',
            'player2': 'üéæ Error Player 2', 
            'tournament': 'üèÜ Error Tournament',
            'surface': 'Hard',
            'date': datetime.now().strftime('%Y-%m-%d'),
            'time': 'TBD',
            'status': 'error',
            'source': 'format_error',
            'odds': {'player1': 2.0, 'player2': 2.0},
            'prediction': {'probability': 0.5, 'confidence': 'Low'},
            'key_factors': ['Error formatting match'],
            'prediction_type': 'ERROR'
        }

def get_live_matches_with_underdog_focus() -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Å —Ñ–æ–∫—É—Å–æ–º –Ω–∞ underdog –∞–Ω–∞–ª–∏–∑"""
    
    try:
        # 1. –ü–†–ò–û–†–ò–¢–ï–¢: Enhanced Universal Collector (–≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–∞–Ω–Ω—ã—Ö)
        if ENHANCED_COLLECTOR_AVAILABLE and enhanced_collector:
            try:
                logger.info("üåç Using Enhanced Universal Collector (TennisExplorer + RapidAPI + Universal)...")
                ml_ready_matches = enhanced_collector.get_ml_ready_matches(min_quality_score=60)
                
                if ml_ready_matches:
                    logger.info(f"‚úÖ Got {len(ml_ready_matches)} ML-ready matches from Enhanced Collector")
                    
                    analyzer = UnderdogAnalyzer()
                    processed_matches = []
                    
                    for match in ml_ready_matches[:6]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
                        try:
                            player1 = match.get('player1', 'Player 1')
                            player2 = match.get('player2', 'Player 2')
                            
                            # –ü–æ–ª—É—á–∞–µ–º ML features
                            ml_features = match.get('ml_features', {})
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
                            odds = {
                                'player1': match.get('player1_odds', ml_features.get('player1_odds', 2.0)),
                                'player2': match.get('player2_odds', ml_features.get('player2_odds', 2.0))
                            }
                            
                            # Underdog –∞–Ω–∞–ª–∏–∑ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                            underdog_analysis = analyzer.calculate_underdog_probability(
                                player1, player2, match.get('tournament', 'Tournament'), match.get('surface', 'Hard')
                            )
                            
                            # –î–æ–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ ML –¥–∞–Ω–Ω—ã–º–∏
                            if ml_features:
                                underdog_analysis['ml_enhanced'] = True
                                underdog_analysis['ranking_difference'] = ml_features.get('ranking_difference', 0)
                                underdog_analysis['data_quality'] = match.get('quality_score', 70)
                                underdog_analysis['data_source'] = match.get('data_source', 'Enhanced')
                            
                            processed_match = {
                                'id': match.get('id', f"enhanced_{len(processed_matches)}"),
                                'player1': f"üéæ {player1}",
                                'player2': f"üéæ {player2}",
                                'tournament': f"üèÜ {match.get('tournament', 'Enhanced Tournament')}",
                                'surface': match.get('surface', 'Hard'),
                                'date': match.get('date', datetime.now().strftime('%Y-%m-%d')),
                                'time': match.get('time', '14:00'),
                                'round': match.get('round', 'R32'),
                                'court': match.get('court', 'Court 1'),
                                'status': f"enhanced_{match.get('status', 'ready')}",
                                'source': 'ENHANCED_UNIVERSAL_COLLECTOR',
                                'odds': odds,
                                'underdog_analysis': underdog_analysis,
                                'prediction': {
                                    'probability': underdog_analysis['underdog_probability'],
                                    'confidence': underdog_analysis['confidence']
                                },
                                'prediction_type': underdog_analysis['prediction_type'],
                                'key_factors': underdog_analysis['key_factors'],
                                'ml_features': ml_features
                            }
                            
                            processed_matches.append(processed_match)
                            
                        except Exception as e:
                            logger.warning(f"Error processing enhanced match: {e}")
                            continue
                    
                    if processed_matches:
                        return {
                            'matches': processed_matches,
                            'source': 'ENHANCED_UNIVERSAL_COLLECTOR',
                            'success': True,
                            'count': len(processed_matches)
                        }
                        
            except Exception as e:
                logger.warning(f"Enhanced collector failed: {e}")
        
        # 2. FALLBACK: Universal Collector (—Ä–µ–∞–ª—å–Ω—ã–µ —Ç—É—Ä–Ω–∏—Ä—ã)
        if UNIVERSAL_COLLECTOR_AVAILABLE and universal_collector and odds_collector:
            try:
                logger.info("üåç Trying Universal Collector first...")
                current_matches = universal_collector.get_current_matches()
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –º–∞—Ç—á–∏ (–Ω–µ training/preparation)
                real_matches = [m for m in current_matches if m.get('status') not in ['training', 'preparation']]
                
                if real_matches:
                    logger.info(f"‚úÖ Got {len(real_matches)} real matches from Universal Collector")
                    odds_data = odds_collector.generate_realistic_odds(real_matches)
                    
                    analyzer = UnderdogAnalyzer()
                    processed_matches = []
                    
                    for match in real_matches[:6]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 6 —Ä–µ–∞–ª—å–Ω—ã—Ö –º–∞—Ç—á–µ–π
                        try:
                            player1 = match['player1']
                            player2 = match['player2']
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                            match_odds = odds_data.get(match['id'], {})
                            winner_market = match_odds.get('best_markets', {}).get('winner', {})
                            
                            odds = {
                                'player1': winner_market.get('player1', {}).get('odds', 2.0),
                                'player2': winner_market.get('player2', {}).get('odds', 2.0)
                            }
                            
                            # Underdog –∞–Ω–∞–ª–∏–∑
                            underdog_analysis = analyzer.calculate_underdog_probability(
                                player1, player2, match['tournament'], match['surface']
                            )
                            
                            processed_match = {
                                'id': match['id'],
                                'player1': f"üéæ {player1}",
                                'player2': f"üéæ {player2}",
                                'tournament': f"üèÜ {match['tournament']}",
                                'surface': match['surface'],
                                'date': match['date'],
                                'time': match['time'],
                                'round': match['round'],
                                'court': match.get('court', 'Court 1'),
                                'status': f"real_{match['status']}",
                                'source': 'UNIVERSAL_COLLECTOR_REAL',
                                'odds': odds,
                                'underdog_analysis': underdog_analysis,
                                'prediction': {
                                    'probability': underdog_analysis['underdog_probability'],
                                    'confidence': underdog_analysis['confidence']
                                },
                                'prediction_type': underdog_analysis['prediction_type'],
                                'key_factors': underdog_analysis['key_factors']
                            }
                            
                            processed_matches.append(processed_match)
                            
                        except Exception as e:
                            logger.warning(f"Error processing universal match: {e}")
                            continue
                    
                    if processed_matches:
                        return {
                            'matches': processed_matches,
                            'source': 'UNIVERSAL_COLLECTOR_REAL',
                            'success': True,
                            'count': len(processed_matches)
                        }
                        
            except Exception as e:
                logger.warning(f"Universal collector failed: {e}")
        
        # 2. –í–¢–û–†–û–ô –ü–†–ò–û–†–ò–¢–ï–¢: API Economy (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
        if API_ECONOMY_AVAILABLE:
            try:
                logger.info("üí∞ Trying API Economy...")
                api_result = economical_tennis_request('tennis')
                if api_result['success'] and api_result['data']:
                    logger.info(f"‚úÖ Got {len(api_result['data'])} matches from API")
                    
                    raw_matches = api_result['data']
                    filtered_matches = filter_quality_matches(raw_matches)
                    logger.info(f"üîç Filtered: {len(raw_matches)} ‚Üí {len(filtered_matches)} quality matches")

                    # –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ API –¥–∞–Ω–Ω—ã—Ö...
                    processed_matches = []
                    analyzer = UnderdogAnalyzer()
                    
                    for i, match in enumerate(filtered_matches[:6]):
                        try:
                            player1 = match.get('home_team', f'Player {i+1}A')
                            player2 = match.get('away_team', f'Player {i+1}B')
                            
                            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                            bookmakers = match.get('bookmakers', [])
                            best_odds = {'player1': 2.0, 'player2': 2.0}
                            
                            for bookmaker in bookmakers:
                                for market in bookmaker.get('markets', []):
                                    if market.get('key') == 'h2h':
                                        outcomes = market.get('outcomes', [])
                                        if len(outcomes) >= 2:
                                            best_odds['player1'] = outcomes[0].get('price', 2.0)
                                            best_odds['player2'] = outcomes[1].get('price', 2.0)
                                            break
                            
                            # Underdog –∞–Ω–∞–ª–∏–∑
                            underdog_analysis = analyzer.calculate_underdog_probability(
                                player1, player2, 'ATP Tournament', 'Hard'
                            )
                            
                            processed_match = {
                                'id': f"api_match_{i}",
                                'player1': f"üéæ {player1}",
                                'player2': f"üéæ {player2}",
                                'tournament': 'üèÜ Live Tournament (API)',
                                'surface': 'Hard',
                                'date': datetime.now().strftime('%Y-%m-%d'),
                                'time': '14:00',
                                'round': 'R32',
                                'court': f'Court {i+1}',
                                'status': 'live_api',
                                'source': 'THE_ODDS_API',
                                'odds': best_odds,
                                'underdog_analysis': underdog_analysis,
                                'prediction': {
                                    'probability': underdog_analysis['underdog_probability'],
                                    'confidence': underdog_analysis['confidence']
                                },
                                'prediction_type': underdog_analysis['prediction_type'],
                                'key_factors': underdog_analysis['key_factors']
                            }
                            
                            processed_matches.append(processed_match)
                            
                        except Exception as e:
                            logger.warning(f"Error processing API match {i}: {e}")
                            continue
                    
                    if processed_matches:
                        return {
                            'matches': processed_matches,
                            'source': f"LIVE_API_{api_result['status']}",
                            'success': True,
                            'count': len(processed_matches)
                        }
                            
            except Exception as e:
                logger.warning(f"API request failed: {e}")
            
            # Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º Universal Collector
            if UNIVERSAL_COLLECTOR_AVAILABLE and universal_collector and odds_collector:
                try:
                    current_matches = universal_collector.get_current_matches()
                    odds_data = odds_collector.generate_realistic_odds(current_matches)
                    
                    analyzer = UnderdogAnalyzer()
                    processed_matches = []
                    
                    for match in current_matches[:6]:
                        try:
                            player1 = match['player1']
                            player2 = match['player2']
                            
                            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
                            match_odds = odds_data.get(match['id'], {})
                            winner_market = match_odds.get('best_markets', {}).get('winner', {})
                            
                            odds = {
                                'player1': winner_market.get('player1', {}).get('odds', 2.0),
                                'player2': winner_market.get('player2', {}).get('odds', 2.0)
                            }
                            
                            # Underdog –∞–Ω–∞–ª–∏–∑
                            underdog_analysis = analyzer.calculate_underdog_probability(
                                player1, player2, match['tournament'], match['surface']
                            )
                            
                            processed_match = {
                                'id': match['id'],
                                'player1': f"üéæ {player1}",
                                'player2': f"üéæ {player2}",
                                'tournament': f"üèÜ {match['tournament']}",
                                'surface': match['surface'],
                                'date': match['date'],
                                'time': match['time'],
                                'round': match['round'],
                                'court': match.get('court', 'Court 1'),
                                'status': match['status'],
                                'source': 'UNIVERSAL_COLLECTOR',
                                'odds': odds,
                                'underdog_analysis': underdog_analysis,
                                'prediction': {
                                    'probability': underdog_analysis['underdog_probability'],
                                    'confidence': underdog_analysis['confidence']
                                },
                                'prediction_type': underdog_analysis['prediction_type'],
                                'key_factors': underdog_analysis['key_factors']
                            }
                            
                            processed_matches.append(processed_match)
                            
                        except Exception as e:
                            logger.warning(f"Error processing universal match: {e}")
                            continue
                    
                    if processed_matches:
                        return {
                            'matches': processed_matches,
                            'source': 'UNIVERSAL_COLLECTOR',
                            'success': True,
                            'count': len(processed_matches)
                        }
                        
                except Exception as e:
                    logger.warning(f"Universal collector failed: {e}")
            
            # –ü–æ—Å–ª–µ–¥–Ω–∏–π 
            return {
                'matches': [],
                'source': 'NO_DATA_AVAILABLE',
                'success': False,
                'count': 0,
                'message': '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Ç—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.'
            }
            
    except Exception as e:
        logger.error(f"‚ùå Critical error in get_live_matches: {e}")
        return generate_sample_underdog_matches()

def generate_sample_underdog_matches() -> Dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –º–∞—Ç—á–µ–π —Å underdog —Å—Ü–µ–Ω–∞—Ä–∏—è–º–∏"""
    
    test_matches = [
        ('Brandon Nakashima', 'Bu Yunchaokete', 'Wimbledon', 'Grass'),
        ('Renata Zarazua', 'Amanda Anisimova', 'Wimbledon', 'Grass'), 
        ('Flavio Cobolli', 'Novak Djokovic', 'US Open', 'Hard'),
        ('Jacob Fearnley', 'Carlos Alcaraz', 'ATP Masters', 'Hard'),
        ('Carson Branstine', 'Aryna Sabalenka', 'WTA 1000', 'Hard'),
        ('Joao Fonseca', 'Jannik Sinner', 'ATP 500', 'Clay')
    ]
    
    analyzer = UnderdogAnalyzer()
    processed_matches = []
    
    for i, (player1, player2, tournament, surface) in enumerate(test_matches):
        try:
            # Underdog –∞–Ω–∞–ª–∏–∑
            underdog_analysis = analyzer.calculate_underdog_probability(
                player1, player2, tournament, surface
            )
            
            # –°–∏–º—É–ª–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            scenario = underdog_analysis['underdog_scenario']
            if scenario['underdog'] == player1:
                odds = {'player1': 3.5 + scenario['rank_gap'] * 0.05, 'player2': 1.3}
            else:
                odds = {'player1': 1.3, 'player2': 3.5 + scenario['rank_gap'] * 0.05}
            
            processed_match = {
                'id': f"underdog_test_{i}",
                'player1': f"üéæ {player1}",
                'player2': f"üéæ {player2}",
                'tournament': f"üèÜ {tournament}",
                'surface': surface,
                'date': datetime.now().strftime('%Y-%m-%d'),
                'time': f"{14 + i}:00",
                'round': 'R32',
                'court': f'Court {i+1}',
                'status': 'test_data',
                'source': 'UNDERDOG_GENERATOR',
                'odds': odds,
                'underdog_analysis': underdog_analysis,
                'prediction': {
                    'probability': underdog_analysis['underdog_probability'],
                    'confidence': underdog_analysis['confidence']
                },
                'prediction_type': underdog_analysis['prediction_type'],
                'key_factors': underdog_analysis['key_factors']
            }
            
            processed_matches.append(processed_match)
            
        except Exception as e:
            logger.warning(f"Error generating test match {i}: {e}")
            continue
    
    return {
        'matches': processed_matches,
        'source': 'TEST_UNDERDOG_DATA',
        'success': True,
        'count': len(processed_matches)
    }

# API Routes

@app.route('/')
def dashboard():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('dashboard.html')

@app.route('/api/health', methods=['GET'])
def health_check():
    """Health check —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'components': {
            'real_predictor': real_predictor is not None,
            'prediction_service': prediction_service is not None,
            'odds_integrator': odds_integrator is not None,
            'api_economy': API_ECONOMY_AVAILABLE,
            'enhanced_collector': enhanced_collector is not None,
            'universal_collector': universal_collector is not None,
            'tennisexplorer_integrated': enhanced_collector is not None,
            'rapidapi_integrated': enhanced_collector is not None
        },
        'version': '4.2'
    })

@app.route('/api/stats', methods=['GET'])
def get_stats():
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã"""
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å ML –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä–∞
        if real_predictor and hasattr(real_predictor, 'prediction_service') and real_predictor.prediction_service:
            ml_status = 'real_models'
            prediction_type = 'REAL_ML_MODEL'
        elif prediction_service:
            ml_status = 'prediction_service'
            prediction_type = 'PREDICTION_SERVICE'
        else:
            ml_status = 'simulation'
            prediction_type = 'ADVANCED_SIMULATION'
        
        # API usage stats
        api_stats = {}
        if API_ECONOMY_AVAILABLE:
            try:
                api_stats = get_api_usage()
            except Exception as e:
                logger.warning(f"Could not get API usage: {e}")
        
        stats = {
            'total_matches': 6,
            'ml_predictor_status': ml_status,
            'prediction_type': prediction_type,
            'last_update': datetime.now().isoformat(),
            'accuracy_rate': 0.734,
            'value_bets_found': 2,
            'underdog_opportunities': 4,
            'api_stats': api_stats
        }
        
        return jsonify({
            'success': True,
            'stats': stats,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Stats error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/matches', methods=['GET'])
def get_matches():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Ç—á–µ–π —Å underdog –∞–Ω–∞–ª–∏–∑–æ–º"""
    try:
        # –ü–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        use_real_data_only = request.args.get('real_data_only', 'true').lower() == 'true'
        force_source = request.args.get('source', None)  # 'universal', 'api', 'test'
        
        logger.info(f"üéæ Getting matches (real_data_only={use_real_data_only}, force_source={force_source})")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        matches_result = get_live_matches_with_underdog_focus()
        
        if not matches_result['success']:
            return jsonify({
                'success': False,
                'error': 'Failed to get matches',
                'matches': []
            }), 500
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ
        raw_matches = matches_result['matches']
        
        if use_real_data_only:
            # –£–±–∏—Ä–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            real_matches = [
                match for match in raw_matches 
                if not any(test_indicator in match.get('source', '').lower() 
                          for test_indicator in ['test', 'sample', 'underdog_generator', 'fallback'])
            ]
            
            if real_matches:
                logger.info(f"‚úÖ Filtered to {len(real_matches)} real matches (was {len(raw_matches)})")
                raw_matches = real_matches
            else:
                logger.warning("‚ö†Ô∏è No real matches found, keeping original data")
        
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Å–µ—Ö –º–∞—Ç—á–µ–π
        formatted_matches = []
        for match in raw_matches:
            formatted_match = format_match_for_dashboard(match, matches_result['source'])
            formatted_matches.append(formatted_match)
        
        logger.info(f"üìä Returning {len(formatted_matches)} formatted matches")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        matches_result = get_live_matches_with_underdog_focus()
        
        if not matches_result['success']:
            return jsonify({
                'success': False,
                'error': 'Failed to get matches',
                'matches': []
            }), 500
        
        return jsonify({
            'success': True,
            'matches': matches_result['matches'],
            'count': matches_result['count'],
            'source': matches_result['source'],
            'prediction_type': matches_result['matches'][0]['prediction_type'] if matches_result['matches'] else 'UNKNOWN',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Matches error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'matches': []
        }), 500

@app.route('/api/test-ml', methods=['POST'])
def test_ml_prediction():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ML –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        player1 = data.get('player1', 'Flavio Cobolli')
        player2 = data.get('player2', 'Novak Djokovic')
        tournament = data.get('tournament', 'US Open')
        surface = data.get('surface', 'Hard')
        
        logger.info(f"üîÆ Testing ML prediction: {player1} vs {player2}")
        
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥–∏–∫—Ç–æ—Ä—ã
        if real_predictor:
            try:
                prediction_result = real_predictor.predict_match(
                    player1, player2, tournament, surface, 'R32'
                )
                
                return jsonify({
                    'success': True,
                    'prediction': prediction_result,
                    'match_info': {
                        'player1': player1,
                        'player2': player2,
                        'tournament': tournament,
                        'surface': surface
                    },
                    'predictor_used': 'real_predictor',
                    'timestamp': datetime.now().isoformat()
                })
            except Exception as e:
                logger.warning(f"Real predictor failed: {e}")
        
        if prediction_service:
            try:
                # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è prediction service
                match_data = {
                    'player_rank': 32.0,  # Cobolli
                    'opponent_rank': 5.0,  # Djokovic
                    'player_age': 22.0,
                    'opponent_age': 37.0,
                    'player_recent_win_rate': 0.65,
                    'player_form_trend': 0.02,
                    'player_surface_advantage': 0.0,
                    'h2h_win_rate': 0.3,
                    'total_pressure': 3.5
                }
                
                prediction_result = prediction_service.predict_match(match_data)
                
                return jsonify({
                    'success': True,
                    'prediction': prediction_result,
                    'match_info': {
                        'player1': player1,
                        'player2': player2,
                        'tournament': tournament,
                        'surface': surface
                    },
                    'predictor_used': 'prediction_service',
                    'timestamp': datetime.now().isoformat()
                })
            except Exception as e:
                logger.warning(f"Prediction service failed: {e}")
        
        # Fallback –∫ underdog analyzer
        analyzer = UnderdogAnalyzer()
        underdog_result = analyzer.calculate_underdog_probability(
            player1, player2, tournament, surface
        )
        
        return jsonify({
            'success': True,
            'prediction': {
                'probability': underdog_result['underdog_probability'],
                'confidence': underdog_result['confidence'],
                'prediction_type': underdog_result['prediction_type'],
                'key_factors': underdog_result['key_factors']
            },
            'match_info': {
                'player1': player1,
                'player2': player2,
                'tournament': tournament,
                'surface': surface
            },
            'predictor_used': 'underdog_analyzer',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Test prediction error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/value-bets', methods=['GET'])
def get_value_bets():
    """–ü–æ–∏—Å–∫ value bets"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –º–∞—Ç—á–∏
        matches_result = get_live_matches_with_underdog_focus()
        
        if not matches_result['success']:
            return jsonify({
                'success': False,
                'error': 'No matches available',
                'value_bets': []
            })
        
        value_bets = []
        
        for match in matches_result['matches']:
            try:
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                our_prob = match['prediction']['probability']
                odds = match['odds']['player1']
                bookmaker_prob = 1 / odds
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º edge
                edge = our_prob - bookmaker_prob
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ 5%
                if edge > 0.05:
                    value_bet = {
                        'match': f"{match['player1'].replace('üéæ ', '')} vs {match['player2'].replace('üéæ ', '')}",
                        'player': match['player1'].replace('üéæ ', ''),
                        'tournament': match['tournament'].replace('üèÜ ', ''),
                        'surface': match['surface'],
                        'odds': odds,
                        'our_probability': our_prob,
                        'bookmaker_probability': bookmaker_prob,
                        'edge': edge * 100,  # –í –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
                        'confidence': match['prediction']['confidence'],
                        'recommendation': 'BET' if edge > 0.08 else 'CONSIDER',
                        'kelly_fraction': min(edge * 0.25, 0.05),  # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π Kelly
                        'key_factors': match.get('key_factors', [])
                    }
                    value_bets.append(value_bet)
                    
            except Exception as e:
                logger.warning(f"Error calculating value bet: {e}")
                continue
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ edge
        value_bets.sort(key=lambda x: x['edge'], reverse=True)
        
        return jsonify({
            'success': True,
            'value_bets': value_bets,
            'count': len(value_bets),
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Value bets error: {e}")
        return jsonify({
            'success': False,
            'error': str(e),
            'value_bets': []
        }), 500

@app.route('/api/underdog-analysis', methods=['POST'])
def analyze_underdog():
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ underdog —Å—Ü–µ–Ω–∞—Ä–∏—è"""
    try:
        data = request.get_json()
        
        if not data:
            return jsonify({
                'success': False,
                'error': 'No data provided'
            }), 400
        
        player1 = data.get('player1')
        player2 = data.get('player2')
        tournament = data.get('tournament', 'ATP Tournament')
        surface = data.get('surface', 'Hard')
        
        if not player1 or not player2:
            return jsonify({
                'success': False,
                'error': 'Both players are required'
            }), 400
        
        analyzer = UnderdogAnalyzer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        underdog_analysis = analyzer.calculate_underdog_probability(
            player1, player2, tournament, surface
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        scenario = underdog_analysis['underdog_scenario']
        
        detailed_analysis = {
            'underdog_analysis': underdog_analysis,
            'scenario_details': {
                'underdog_player': scenario['underdog'],
                'favorite_player': scenario['favorite'],
                'ranking_gap': scenario['rank_gap'],
                'underdog_type': scenario['underdog_type'],
                'base_probability': scenario['base_probability']
            },
            'betting_recommendation': {
                'recommended_action': 'BET' if underdog_analysis['underdog_probability'] > 0.4 else 'PASS',
                'risk_level': underdog_analysis['confidence'],
                'expected_value': underdog_analysis['underdog_probability'] - scenario['base_probability']
            },
            'match_context': {
                'tournament': tournament,
                'surface': surface,
                'tournament_pressure': 'High' if any(major in tournament.lower() for major in ['wimbledon', 'us open', 'french open', 'australian open']) else 'Medium'
            }
        }
        
        return jsonify({
            'success': True,
            'analysis': detailed_analysis,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Underdog analysis error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/refresh', methods=['GET', 'POST'])
def refresh_data():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω API Economy, –ø—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        if API_ECONOMY_AVAILABLE:
            try:
                result = economical_tennis_request('tennis', force_fresh=True)
                return jsonify({
                    'success': True,
                    'message': 'Data refreshed from API',
                    'source': result.get('source', 'unknown'),
                    'timestamp': datetime.now().isoformat()
                })
            except Exception as e:
                logger.warning(f"API refresh failed: {e}")
        
        # Fallback - –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
        return jsonify({
            'success': True,
            'message': 'Data refresh requested',
            'source': 'simulation',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Refresh error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/player-info/<player_name>', methods=['GET'])
def get_player_info(player_name):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∏–≥—Ä–æ–∫–µ"""
    try:
        analyzer = UnderdogAnalyzer()
        rank = analyzer.get_player_ranking(player_name)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (—Å–∏–º—É–ª—è—Ü–∏—è)
        player_info = {
            'name': player_name,
            'ranking': rank,
            'tour': 'ATP' if rank <= 200 else 'Challenger',
            'estimated_level': 'Top 10' if rank <= 10 else 'Top 50' if rank <= 50 else 'Top 100' if rank <= 100 else 'Professional',
            'underdog_potential': 'High' if rank > 30 else 'Medium' if rank > 15 else 'Low'
        }
        
        return jsonify({
            'success': True,
            'player_info': player_info,
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Player info error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/test-underdog', methods=['POST'])
def test_underdog_analysis():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ underdog –∞–Ω–∞–ª–∏–∑–∞ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ 'Test Underdog Analysis')"""
    try:
        data = request.get_json()
        
        if not data:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã
            data = {
                'player1': 'Flavio Cobolli',
                'player2': 'Novak Djokovic',
                'tournament': 'US Open',
                'surface': 'Hard'
            }
        
        player1 = data.get('player1', 'Flavio Cobolli')
        player2 = data.get('player2', 'Novak Djokovic') 
        tournament = data.get('tournament', 'US Open')
        surface = data.get('surface', 'Hard')
        
        logger.info(f"üîÆ Testing underdog analysis: {player1} vs {player2}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UnderdogAnalyzer
        analyzer = UnderdogAnalyzer()
        underdog_analysis = analyzer.calculate_underdog_probability(
            player1, player2, tournament, surface
        )
        
        return jsonify({
            'success': True,
            'underdog_analysis': underdog_analysis,
            'match_info': {
                'player1': player1,
                'player2': player2,
                'tournament': tournament,
                'surface': surface
            },
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå Test underdog error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500
    
@app.route('/api/manual-api-update', methods=['POST'])
def manual_api_update():
    """–†—É—á–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ API –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ª–∏–º–∏—Ç–æ–≤ (–¥–ª—è –∫–Ω–æ–ø–∫–∏ 'Manual API Update')"""
    try:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: Daily Scheduler —Å –ª–∏–º–∏—Ç–∞–º–∏
        if DAILY_SCHEDULER_AVAILABLE and daily_scheduler:
            try:
                result = daily_scheduler.make_manual_request("dashboard_manual_update")
                
                if result['success']:
                    return jsonify({
                        'success': True,
                        'message': 'Manual API update completed successfully',
                        'total_matches': result.get('total_matches', 0),
                        'daily_used': result.get('daily_used', 0),
                        'monthly_used': result.get('monthly_used', 0),
                        'api_usage': result.get('api_usage', {}),
                        'source': 'daily_scheduler',
                        'timestamp': datetime.now().isoformat()
                    })
                else:
                    return jsonify({
                        'success': False,
                        'error': result.get('error', 'Manual request failed'),
                        'limits': result.get('limits', {}),
                        'daily_used': result.get('daily_used', 0),
                        'monthly_used': result.get('monthly_used', 0),
                        'source': 'daily_scheduler_denied'
                    }), 429  # Too Many Requests
                    
            except Exception as e:
                logger.warning(f"Daily scheduler manual update failed: {e}")
        
        # Fallback: API Economy –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if API_ECONOMY_AVAILABLE:
            try:
                from api_economy_patch import trigger_manual_update
                result = trigger_manual_update()
                
                if result:
                    return jsonify({
                        'success': True,
                        'message': 'Manual update triggered via API Economy',
                        'source': 'api_economy_fallback',
                        'timestamp': datetime.now().isoformat()
                    })
                else:
                    return jsonify({
                        'success': False,
                        'error': 'Failed to trigger manual update',
                        'source': 'api_economy_failed'
                    }), 500
                    
            except Exception as e:
                logger.warning(f"API Economy manual update failed: {e}")
        
        # Last resort - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        return jsonify({
            'success': False,
            'error': 'Manual API update not available - daily scheduler and API economy unavailable',
            'message': 'Please wait for scheduled API updates or check system configuration',
            'source': 'no_services_available'
        }), 503  # Service Unavailable
        
    except Exception as e:
        logger.error(f"‚ùå Manual update error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/api-status', methods=['GET'])
def get_comprehensive_api_status():
    """–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å—Ç–∞—Ç—É—Å API —Å Daily Scheduler –∏ API Economy"""
    try:
        status_response = {
            'success': True,
            'timestamp': datetime.now().isoformat(),
            'daily_scheduler': {},
            'api_economy': {},
            'recommendations': []
        }
        
        # Daily Scheduler Status
        if DAILY_SCHEDULER_AVAILABLE and daily_scheduler:
            try:
                scheduler_status = daily_scheduler.get_status()
                status_response['daily_scheduler'] = {
                    'available': True,
                    'status': scheduler_status['status'],
                    'daily_usage': scheduler_status['daily_usage'],
                    'monthly_usage': scheduler_status['monthly_usage'],
                    'next_scheduled': scheduler_status['schedule']['next_scheduled'][:2],  # Next 2 requests
                    'can_make_manual': scheduler_status['can_make_manual']
                }
                
                # Recommendations based on usage
                daily_used = scheduler_status['daily_usage']['requests_made']
                daily_limit = scheduler_status['daily_usage']['total_limit']
                
                if daily_used >= daily_limit:
                    status_response['recommendations'].append("‚ö†Ô∏è Daily limit reached. Wait for tomorrow or scheduled requests.")
                elif daily_used >= daily_limit * 0.8:
                    status_response['recommendations'].append("üü° Near daily limit. Use manual requests carefully.")
                else:
                    status_response['recommendations'].append("‚úÖ Manual requests available.")
                    
            except Exception as e:
                status_response['daily_scheduler'] = {
                    'available': False,
                    'error': str(e)
                }
        else:
            status_response['daily_scheduler'] = {
                'available': False,
                'message': 'Daily scheduler not initialized'
            }
        
        # API Economy Status (legacy support)
        if API_ECONOMY_AVAILABLE:
            try:
                from api_economy_patch import get_api_usage
                usage_stats = get_api_usage()
                status_response['api_economy'] = {
                    'available': True,
                    'usage_stats': usage_stats
                }
            except Exception as e:
                status_response['api_economy'] = {
                    'available': False,
                    'error': str(e)
                }
        else:
            status_response['api_economy'] = {
                'available': False,
                'message': 'API Economy not available'
            }
        
        return jsonify(status_response)
        
    except Exception as e:
        logger.error(f"‚ùå Comprehensive API status error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

@app.route('/api/api-economy-status', methods=['GET'])
def get_api_economy_status():
    """–°—Ç–∞—Ç—É—Å API Economy (–¥–ª—è –∫–Ω–æ–ø–∫–∏ 'API Status') - Legacy endpoint"""
    try:
        # Redirect to comprehensive status but format for backward compatibility
        comprehensive_status = get_comprehensive_api_status()
        data = comprehensive_status.get_json()
        
        if data['success']:
            # Extract relevant info for old format
            daily_scheduler_info = data.get('daily_scheduler', {})
            
            if daily_scheduler_info.get('available'):
                daily_usage = daily_scheduler_info.get('daily_usage', {})
                monthly_usage = daily_scheduler_info.get('monthly_usage', {})
                
                return jsonify({
                    'success': True,
                    'api_usage': {
                        'requests_this_hour': 'N/A (using daily scheduler)',
                        'max_per_hour': 'N/A (using daily scheduler)', 
                        'remaining_hour': f"{daily_usage.get('manual_remaining', 0)} manual requests remaining",
                        'daily_used': daily_usage.get('requests_made', 0),
                        'daily_limit': daily_usage.get('total_limit', 8),
                        'monthly_used': monthly_usage.get('requests_made', 0),
                        'monthly_limit': monthly_usage.get('limit', 500),
                        'manual_update_status': 'Available' if daily_scheduler_info.get('can_make_manual', False) else 'Limit reached'
                    },
                    'daily_scheduler_available': True,
                    'timestamp': datetime.now().isoformat()
                })
            else:
                # Fallback to API Economy if available
                if API_ECONOMY_AVAILABLE:
                    try:
                        from api_economy_patch import get_api_usage
                        usage_stats = get_api_usage()
                        
                        return jsonify({
                            'success': True,
                            'api_economy_available': True,
                            'api_usage': usage_stats,
                            'daily_scheduler_available': False,
                            'timestamp': datetime.now().isoformat()
                        })
                    except Exception as e:
                        logger.warning(f"Failed to get API usage: {e}")
        
        # Final fallback
        return jsonify({
            'success': True,
            'api_economy_available': False,
            'daily_scheduler_available': False,
            'api_usage': {
                'requests_this_hour': 0,
                'max_per_hour': 'N/A',
                'remaining_hour': 'Service unavailable',
                'manual_update_status': 'Unavailable'
            },
            'message': 'API services not available',
            'timestamp': datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"‚ùå API Economy status error: {e}")
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500

# Error handlers
@app.errorhandler(404)
def not_found(error):
    return jsonify({
        'success': False,
        'error': 'Endpoint not found',
        'available_endpoints': [
            '/api/health',
            '/api/stats',
            '/api/matches', 
            '/api/test-ml',
            '/api/value-bets',
            '/api/underdog-analysis',
            '/api/refresh'
        ]
    }), 404

@app.errorhandler(500)
def internal_error(error):
    return jsonify({
        'success': False,
        'error': 'Internal server error'
    }), 500

@app.errorhandler(400)
def bad_request(error):
    return jsonify({
        'success': False,
        'error': 'Bad request'
    }), 400

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
load_config()
initialize_services()

if __name__ == '__main__':
    print("üéæ TENNIS BACKEND - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø")
    print("=" * 60)
    print(f"üåê Dashboard: http://0.0.0.0:5001")
    print(f"üì° API: http://0.0.0.0:5001/api/*")
    print(f"ü§ñ Real Predictor: {'‚úÖ Active' if real_predictor else '‚ö†Ô∏è Not available'}")
    print(f"üéØ Prediction Service: {'‚úÖ Active' if prediction_service else '‚ö†Ô∏è Not available'}")
    print(f"üí∞ API Economy: {'‚úÖ Active' if API_ECONOMY_AVAILABLE else '‚ö†Ô∏è Not available'}")
    print(f"üåç Universal Collector: {'‚úÖ Active' if universal_collector else '‚ö†Ô∏è Not available'}")
    print("=" * 60)
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:")
    print("‚Ä¢ ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è surface_bonus ‚Üí surface_bonuses")
    print("‚Ä¢ ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
    print("‚Ä¢ ‚úÖ –£–ª—É—á—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫")
    print("‚Ä¢ ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ API endpoints")
    print("‚Ä¢ ‚úÖ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω underdog –∞–Ω–∞–ª–∏–∑")
    print("=" * 60)
    
    try:
        app.run(
            host='0.0.0.0',
            port=5001,
            debug=False,
            threaded=True
        )
    except Exception as e:
        print(f"‚ùå Failed to start server: {e}")